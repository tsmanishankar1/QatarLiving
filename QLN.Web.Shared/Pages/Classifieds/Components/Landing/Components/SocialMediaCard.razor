@using MudBlazor
@inject IJSRuntime JSRuntime

<div class="store-media-section">
    <MudGrid>
       <MudItem xs="12" md="6">
    <div class="d-flex flex-column" style="height: 100%; justify-content: center;">
        <MudText Typo="Typo.h6" Style="color: var(--color-text-secondary); font-weight: bold;">@Title</MudText>
        <MudText Typo="Typo.body1" Class="my-2" Style="color:var(--color-text-caption);">
            @Description
        </MudText>

        <div class="d-flex mt-3">
            @foreach (var platform in SocialPlatforms)
            {
                <MudIconButton Icon="@platform.Icon" 
                               Style="background-color:var(--color-background); color: var(--color-accent); border: 2px solid var(--color-accent);"
                               Class="mr-2 " 
                               Href="@platform.Link"
                               Target="_blank" 
                               Size="MudBlazor.Size.Small"/>
            }
        </div>
@* 
        <MudPaper Elevation="0"
                  Class="py-3 my-4 mt-8">
         <MudDivider Class="mb-3"/>
            <div class="d-flex align-items-center justify-content-between">
                <!-- Left: Avatar + Text -->
                <div class="d-flex align-items-center">
                    <MudAvatar Size="Size.Large" Class="mr-3" >
                     <img src="/images/account_qatar.svg" alt="Account" style="width: 100%; height: 100%;" />
                     </MudAvatar>
                    <div>
                        <MudText Typo="Typo.subtitle1" Style="color:var(--color-text-primary); font-weight: 600;">
                            Qatar LivingÂ® Properties
                        </MudText>
                        <MudText Typo="Typo.body2" Style="color:var(--color-text-secondary);">
                            <strong>6,381</strong> Posts
                        </MudText>
                    </div>
                </div>

                <!-- Right: Follow Button -->
               <MudButton StartIcon="@Icons.Custom.Brands.Instagram"
                    Style="background-color: var(--color-accent); color:var(--color-background); border-radius: 8px; text-transform: capitalize"
                    Href="https://www.instagram.com/qatarlivingproperties"
                    Target="_blank">
                Follow
            </MudButton>
            </div>
        </MudPaper> *@
    </div>
</MudItem>
        <MudItem xs="12" md="6">
            <div style="display: flex; gap: 16px; height: 100%; justify-content: center; align-items: center;">
                @foreach (var video in VideoCards)
                {
                    <div style="position: relative; width: 220px; height: 348px; border-radius: 12px; overflow: hidden; cursor: pointer;"
                         class="video-card"
                         @onclick="() => ToggleVideoPlay(video)"
                         @onmouseenter="() => ShowPlayButton(video)"
                         @onmouseleave="() => HidePlayButton(video)">
                        
                        <!-- Video element -->
                        <video width="100%" height="100%" 
                               muted loop
                               style="object-fit: cover;"
                               src="@video.VideoUrl"
                               @ref="video.VideoElement">
                        </video>
                        
                        <!-- Play button overlay - shown on hover when not playing -->
                        @if (video.ShowPlayButton)
                        {
                            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; 
                                        display: flex; justify-content: center; align-items: center;
                                        background: rgba(0,0,0,0.3);">
                                <MudIcon Icon="@Icons.Material.Filled.PlayCircle" 
                                         Style="color:var(--color-text-white); font-size: 36px;" />
                            </div>
                        }
                    </div>
                }
            </div>
        </MudItem>
    </MudGrid>
</div>

<style>
    .store-media-section {
       background-color: var(--color-background);
       padding: 2rem 1rem;
    }

</style>


@code {
    [Parameter]
    public string Title { get; set; } = "Are you Following Classifieds on Social Media?";

    [Parameter]
    public string Description { get; set; } = "Stay Tuned with Qatar Living Classifieds on social media for the latest updates, featured exclusive listings, market trends, and valuable insights to guide your investments.";

  [Parameter]
public List<SocialPlatform> SocialPlatforms { get; set; } = new()
{
    new SocialPlatform { 
        Name = "Facebook", 
        Icon = Icons.Custom.Brands.Facebook, 
        Link = "https://www.facebook.com/QatarLiving" 
    },
    new SocialPlatform { 
        Name = "Instagram", 
        Icon = Icons.Custom.Brands.Instagram, 
        Link = "https://www.instagram.com/qatarliving" 
    },
    new SocialPlatform { 
        Name = "YouTube", 
        Icon = Icons.Custom.Brands.YouTube, 
        Link = "https://www.youtube.com/channel/UCcsJRinZg4qYGLRDkFiVHcQ" 
    },
    new SocialPlatform { 
        Name = "LinkedIn", 
        Icon = Icons.Custom.Brands.LinkedIn, 
        Link = "https://www.linkedin.com/company/qatarliving-com" 
    },
    new SocialPlatform { 
        Name = "Twitter", 
        Icon = Icons.Custom.Brands.Twitter, 
        Link = "https://twitter.com/qatarliving" 
    }
};

    [Parameter]
    public List<VideoCard> VideoCards { get; set; } = new()
    {
        new VideoCard { 
            VideoUrl = "/videos/video1.mp4",
            Title = "Video 1"
        },
        new VideoCard { 
            VideoUrl = "/videos/video2.mp4",
            Title = "Video 2"
        },
        new VideoCard { 
            VideoUrl = "/videos/video3.mp4",
            Title = "Video 3"
        }
    };

    private async Task ToggleVideoPlay(VideoCard video)
    {
        if (video.IsPlaying)
        {
            await JSRuntime.InvokeVoidAsync("pauseVideo", video.VideoElement);
            video.IsPlaying = false;
            video.ShowPlayButton = true; // Show play button again when paused
        }
        else
        {
            // Pause all other videos first
            foreach (var v in VideoCards.Where(v => v != video && v.IsPlaying))
            {
                await JSRuntime.InvokeVoidAsync("pauseVideo", v.VideoElement);
                v.IsPlaying = false;
                v.ShowPlayButton = true;
            }
            
            await JSRuntime.InvokeVoidAsync("playVideo", video.VideoElement);
            video.IsPlaying = true;
            video.ShowPlayButton = false; // Hide play button when playing
        }
        
        StateHasChanged();
    }

    private void ShowPlayButton(VideoCard video)
    {
        if (!video.IsPlaying)
        {
            video.ShowPlayButton = true;
            StateHasChanged();
        }
    }

    private void HidePlayButton(VideoCard video)
    {
        if (!video.IsPlaying)
        {
            video.ShowPlayButton = false;
            StateHasChanged();
        }
    }

    public class SocialPlatform
    {
        public string Name { get; set; }
        public string Icon { get; set; }
        public string Link { get; set; }
    }

    public class VideoCard
    {
        public string VideoUrl { get; set; }
        public string Title { get; set; }
        public bool ShowPlayButton { get; set; }
        public bool IsPlaying { get; set; }
        public ElementReference VideoElement { get; set; }
    }
}