@using MudBlazor
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Components.Classifieds.ItemDetailsImage
@using QLN.Web.Shared.Pages.Classifieds.Components.Items.Components.IteamdetailsSection
@using QLN.Web.Shared.Components.BreadCrumb
@inject NavigationManager NavigationManager

<Breadcrumb Items="breadcrumbItems" />

<div class="main-layout">
    <div class="row-container">
        <MudText Typo="Typo.h5">@Item?.Title</MudText>
        <div class="icon-label-container">
            <div class="icon-label">
                <img src="/images/classifieds/share.svg" alt="Share Icon" class="icon-image" />
                <span class="icon-text">Share</span>
            </div>
            <div class="icon-label" @onclick="OnSaveClicked">
                <img src="@HeartIcon" alt="Save Icon" class="icon-image" />
                <span class="icon-text">@(isSaved ? "Saved" : "Save")</span>
            </div>
        </div>
    </div>
    <MudGrid AlignItems="Center" Justify="Justify.FlexStart" GutterSize="GutterSize.Small">
        <MudItem xs="12" md="8">
            <ItemDetailsImage Images="Item?.ImageUrls" SelectedImageIndex="selectedImageIndex"
                OnImageSelected="SelectImage" OnPrevSlide="PrevSlide" OnNextSlide="NextSlide" />


            <OverviewCard Item="Item" />
            <DescriptionBox />
        </MudItem>

        <MudItem xs="12" md="4" Style="max-width: 450px;">
            <div
                style="display: flex; align-items: flex-start; gap: 1rem; flex-wrap: wrap; justify-content: flex-start;">
                <MudPaper Elevation="1" Class="custom-card">
                    <MudText Typo="Typo.caption" Class="status-text">Brand New</MudText>

                    <MudText Typo="Typo.h6" Class="title-text">@Item?.Title</MudText>

                    <MudText Typo="Typo.h5" Class="price-text">@($"{Item?.Price:N0} QAR")</MudText>

                    <div class="button-group">
                        <div class="button-wrapper">
                            <button class="custom-btn call-btn">
                                <img src="/images/classifieds/call.svg" class="btn-icon" />
                                Call
                            </button>
                        </div>
                        <div class="button-wrapper">
                            <button class="custom-btn whatsapp-btn">
                                <img src="/images/classifieds/whatsapp.svg" class="btn-icon" />
                                WhatsApp
                            </button>
                        </div>
                    </div>

                    <div class="posted-by-container">
                        <div class="posted-label">Posted by:</div>

                        <div class="posted-details">
                            <div class="user-info">
                                <img src="/images/classifieds/personIcon.svg" class="person-icon" />
                                <div class="user-text">
                                    <div class="username">@Item?.Company</div>
                                    <div class="updated-time">Updated 1 hour ago</div>
                                </div>
                            </div>

                            <div class="location-info">
                                <img src="/images/classifieds/location.svg" class="location-icon" />
                                <span class="location-text">@Item?.Location</span>
                            </div>
                        </div>
                    </div>
                </MudPaper>

                <img src="/images/classifieds/detail_ad.svg" alt="Product Image" class="main-image"
                    style="width: 300px; height: 350px; object-fit: contain;" />
            </div>
        </MudItem>
    </MudGrid>

</div>


@code {
    private bool isSaved = false;
    private List<QLN.Web.Shared.Components.BreadCrumb.BreadcrumbItem> breadcrumbItems = new();
    private int _startIndex = 0;
    [Parameter] public PromotedItem? Item { get; set; }
    protected override void OnParametersSet()
    {
        if (Item == null)
        {
            throw new InvalidOperationException("Item is null. The component cannot render.");
        }
    }
    private int selectedImageIndex = 0;
    private string categorySegment = "items"; // Default

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var segments = uri.AbsolutePath.Split("/", StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length >= 2)
            categorySegment = segments[1];

        string displayName = categorySegment switch
        {
            "items" => "Items",
            "preloved" => "Preloved",
            "collectibles" => "Collectibles",
            _ => "Items"
        };

        breadcrumbItems = new()
{
new() { Label = "Classifieds", Url = "/classifieds" },
new() { Label = displayName, Url = $"/classifieds/{categorySegment}" },
new() { Label = Item?.Title ?? "Details", Url = NavigationManager.Uri, IsLast = true }
};
    }
    private void PrevSlide()
    {
        if (selectedImageIndex > 0)
            selectedImageIndex--;
    }

    private void NextSlide()
    {
        if (selectedImageIndex < Item.ImageUrls.Count - 1)
            selectedImageIndex++;
    }

    private void SelectImage(int index)
    {
        Console.WriteLine($"Selected image index: {index}");
        if (Item?.ImageUrls != null && index >= 0 && index < Item.ImageUrls.Count)
        {
            selectedImageIndex = index;
        }
    }

    private bool IsFirstSlide => selectedImageIndex == 0;
    private bool IsLastSlide => selectedImageIndex == Item.ImageUrls.Count - 1;

    private string TrackOffset => $"translateX(-{selectedImageIndex * 144}px)";
    private void OnSaveClicked()
    {
        isSaved = !isSaved;
    }
    private string HeartIcon => isSaved ? "images/classifieds/liked_heart.svg" : "images/classifieds/heart.svg";


}
<style>
    .main-layout {
        display: flex;
        flex-direction: column;
        gap: 24px;
        margin-top: 16px;
    }

    .posted-by-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        font-family: 'Public Sans', sans-serif;
    }

    .posted-label {
        font-weight: 500;
        color: var(--color-text-heading);
        font-size: 12px !important;
    }

    .posted-details {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 16px;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .person-icon {
        width: 40px;
        height: 40px;
    }

    .user-text .username {
        font-weight: 500;
        color: var(--color-primary);
        font-size: 14px !important;
    }

    .user-text .updated-time {
        font-weight: 400;
        color: var(--color-text-descripton);
        font-size: 11px !important;
    }

    .location-info {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-top: 6px;
    }

    .location-icon {
        width: 16px;
        height: 16px;
    }

    .location-text {
        color: var(--color-accent);
        font-weight: 500;
        font-size: 14px !important;
    }

    .icon-label {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .icon-image {
        width: 18px;
        height: 18px;
        /* Adjust the above filter to match your desired orange color */
    }

    .row-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .icon-text {
        margin-left: 0.5rem;
        color: var(--color-accent);
        /* Your orange color */
        font-family: 'Public Sans', sans-serif;
        font-size: 13px !important;
        font-weight: 500;
    }

    .icon-label-container {
        display: flex;
        gap: 2rem;
        /* Space between icons */
        align-items: center;
    }

    .title-style {
        color: var(--color-text-heading);
        /* Your orange color */
        font-family: 'Public Sans', sans-serif;
        font-size: 25px !important;
        font-weight: 500;
    }


    .custom-card {
        padding: 16px;
        border-radius: 6px;
        width: 300px;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .status-text {
        border-color: var(--color-category-outline);
        color: var(--color-category-text);
        font-family: 'Public Sans', sans-serif;
        font-weight: 500;
    }

    .title-text {
        font-size: 18px !important;
        font-weight: 500;
        color: var(--color-text-heading);
        font-family: 'Public Sans', sans-serif;
    }

    .price-text {
        font-size: 25px !important;
        font-weight: 600;
        color: var(--color-text-heading);
        font-family: 'Public Sans', sans-serif;
    }

    .button-group {
        display: flex;
        gap: 12px;
    }

    .button-wrapper {
        flex: 1;
    }

    .custom-btn {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 10px 12px;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        border: 2px solid transparent;
        background-color: transparent;
        box-sizing: border-box;
    }

    .call-btn {
        border-color: var(--color-accent);
        color: var(--color-accent);
        font-family: 'Public Sans', sans-serif;
    }

    .whatsapp-btn {
        border-color: var(--color-whatsapp-outline);
        color: var(--color-whatsapp-outline);
        font-family: 'Public Sans', sans-serif;
    }

    .btn-icon {
        width: 20px;
        height: 20px;
    }

    .posted-by {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        border-top: 1px solid #eee;
        padding-top: 12px;
        font-size: 0.875rem;
    }

    .posted-label {
        font-weight: 500;
    }

    .username {
        color: #007bff;
        font-weight: 600;
    }

    .timestamp {
        font-size: 0.75rem;
        color: #888;
    }

    .location {
        color: var(--color-accent);
        font-weight: 500;
        display: flex;
        align-items: center;
    }

    .main-image {
        width: 100%;
        border-radius: 8px;
    }
</style>