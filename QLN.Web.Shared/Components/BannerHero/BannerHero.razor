@using QLN.Common.Infrastructure.DTO_s
@using QLN.Web.Shared.Components.QLAnalytics
@using QLN.Web.Shared.Services
@using Microsoft.Extensions.Logging
@inject ILogger<BannerHero> Logger
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div id="banner-hero" class="banner-wrapper">
    <div class="hero-carousel-container">
        <div class="hero-slides-wrapper" style="transform: translateX(-@($"{CurrentIndex * 100}%"))">
            @foreach (var (banner, index) in BannersToRender.Select((b, i) => (b, i)))
            {
                <div class="carousel-slide" id="banner-@banner.Code-@index">
                    <a href="@banner.Link" target="_blank" rel="noopener noreferrer">
                        <img class="banner-image"
                             src="@banner.ImageDesktop"
                             data-mobile="@banner.ImageMobile"
                             data-desktop="@banner.ImageDesktop"
                             alt="@banner.Alt" />
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@if (AnalyticsProps != null)
{
    <QLAnalytics @key="AnalyticsKey" AnalyticsProps="@AnalyticsProps" />
}

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = new();
    [Parameter] public bool Loading { get; set; }

    private List<BannerItem> BannersToRender => BannerItems.Count == 1
        ? new() { BannerItems[0], BannerItems[0] }  // Duplicate if only one
        : BannerItems;

    private int CurrentIndex = 0;
    private string AnalyticsKey = Guid.NewGuid().ToString();
    private QLAnalyticsCallProps? AnalyticsProps;
    private bool _started;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && BannersToRender.Any() && !_started)
        {
            await JS.InvokeVoidAsync("updateBannerImagesForScreen");
            _started = true;
            _ = StartBannerLoop();
        }
    }

    private async Task StartBannerLoop()
    {
        while (true)
        {
            var banner = BannersToRender[CurrentIndex];
            var uniqueId = $"banner-{banner.Code}-{CurrentIndex}";

            var isVisible = await JS.InvokeAsync<bool>("isBannerActuallyVisible", uniqueId);
            @* Logger.LogInformation("Banner {BannerCode} is visible: {IsVisible}", banner.Code, isVisible); *@

            if (isVisible && banner.Code != null)
            {
                AnalyticsProps = new QLAnalyticsCallProps
                {
                    Action = "AutoBannerImpression",
                    AnalyticType = (int)AnalyticType.VIEW_BANNER_IMPRESSION,
                    Impressions = [],
                    Url = new Uri(NavigationManager.Uri).AbsolutePath,
                    Lead = AnalyticsLead.SMS_REVEAL,
                    VerticalTag = (int)VerticalTag.CONTENT,
                    AdditionalTag = new Dictionary<string, string>
                    {
                        { "BannerCode", banner.Code },
                        { "Duration", banner.Duration ?? "N/A" }
                    }
                };
                AnalyticsKey = Guid.NewGuid().ToString();
                await InvokeAsync(StateHasChanged);
            }

            var delay = int.TryParse(banner.Duration, out var d) ? d : 5;
            await Task.Delay(delay * 1000);

            CurrentIndex = (CurrentIndex + 1) % BannersToRender.Count;
            await InvokeAsync(StateHasChanged);
        }
    }
}

<style>
.hero-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    height: 250px;
}

.hero-slides-wrapper {
    display: flex;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    width: 100%;
    height: 100%;
}

.carousel-slide {
    flex: 0 0 100%;
    height: 100%;
}

.banner-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 3px;
}

@@media (max-width: 768px) {
    .hero-carousel-container {
        height: 150px;
    }

    .banner-image {
        height: auto;
        max-height: 220px;
    }
}

</style>
