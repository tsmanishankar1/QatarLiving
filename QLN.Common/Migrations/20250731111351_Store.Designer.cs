// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QLN.Common.Infrastructure.QLDbContext;

#nullable disable

namespace QLN.Common.Migrations
{
    [DbContext(typeof(ClassifiedDevContext))]
    [Migration("20250731111351_Store")]
    partial class Store
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreAddresses", b =>
                {
                    b.Property<int>("StoreAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreAddressId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StoresID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoreAddressId");

                    b.HasIndex("StoresID");

                    b.ToTable("StoreAddress");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreLicenseDocuments", b =>
                {
                    b.Property<int>("StoreLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreLicenseId"));

                    b.Property<string>("CRDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CRDocumentURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StoresID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoreLicenseId");

                    b.HasIndex("StoresID");

                    b.ToTable("StoreLicense");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreProductDocuments", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StoresID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentId");

                    b.HasIndex("StoresID");

                    b.ToTable("StoreDocuments");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreStatus", b =>
                {
                    b.Property<int>("StoreStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreStatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoreStatusId");

                    b.ToTable("StoreStatuses");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.Stores", b =>
                {
                    b.Property<Guid>("StoresID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Banner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoresID");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoresDto", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("BranchLocations")
                        .HasColumnType("text[]");

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("CRDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CRNumber")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanySize")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndDay")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EndHour")
                        .HasColumnType("interval");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int[]>("NatureOfBusiness")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartDay")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("StartHour")
                        .HasColumnType("interval");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubVertical")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("Vertical")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("storesDtos");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoresSubscriptionDto", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmailLeads")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<int>("PhoneLeads")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int>("WebLeads")
                        .HasColumnType("integer");

                    b.Property<string>("WebUrl")
                        .HasColumnType("text");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("text");

                    b.Property<int>("WhatsappLeads")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.ToTable("StoresSubscriptions");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.SubscriptionTypes", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubscriptionId");

                    b.ToTable("SubscriptionType");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreAddresses", b =>
                {
                    b.HasOne("QLN.Common.DTO_s.ClassifiedsBo.Stores", "Store")
                        .WithMany("Addresses")
                        .HasForeignKey("StoresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreLicenseDocuments", b =>
                {
                    b.HasOne("QLN.Common.DTO_s.ClassifiedsBo.Stores", "Store")
                        .WithMany("LicenseDocuments")
                        .HasForeignKey("StoresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.StoreProductDocuments", b =>
                {
                    b.HasOne("QLN.Common.DTO_s.ClassifiedsBo.Stores", "Store")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("StoresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("QLN.Common.DTO_s.ClassifiedsBo.Stores", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("LicenseDocuments");

                    b.Navigation("ProductDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
