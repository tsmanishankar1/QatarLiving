@page "/select-verification"
 @using MudBlazor
@using QLN.Web.Shared.Components.CustomButton
@using static QLN.Web.Shared.Helpers.HttpErrorHelper
@inject CustomAuthStateProvider CustomAuthenticationStateProvider;
@inject NavigationManager NavManager
@using System.Security.Claims;
@inject ISnackbar Snackbar
@using QLN.Web.Shared.Services
@inject ApiService Api

<div class="page-wrapper">
    <div class="form-container">
        <MudText Class="title-text">Verification Method</MudText>
        <MudText Class="subtitle">Choose how you want to receive your verification code</MudText>

        <MudPaper Elevation="0" Class="d-flex flex-column gap-3 p-3 option-list">
            @foreach (var option in verificationOptions)
            {
                var paperClass = $"option-card {GetSelectedClass(option.Value)}";

                <MudPaper Class="@paperClass">
                    <div class="d-flex align-center p-3">
                        <input type="radio" name="method" class="custom-radio" value="@option.Value"
                            checked="@(_selectedMethod == option.Value)" @onchange="() => SelectOption(option.Value)" />
                        <div class="ml-3"
                            style="display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start;">
                            <MudText Class="label-text">@option.Label</MudText>
                            <MudText Class="description-text">
                                @option.Description
                            </MudText>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudPaper>

        <CustomButton BackgroundColor="var(--color-accent)" TextColor="#FFFFFF" Text="Continue" Disabled="_isLoading"
            Loading="_isLoading" OnClick="NavigateTo" Class="mt-4" />
    </div>
</div>

@code {
    [CascadingParameter] public GlobalAppState? AppState { get; set; }
    public string email{ get; set; }
    public string mobile{ get; set; }

    private string _selectedMethod = string.Empty;
    private bool _isLoading = false;
    protected override async Task OnInitializedAsync()
	{
            var authState = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
             if (authState != null){
                var user = authState.User;
                if (user.Identity != null && user.Identity.IsAuthenticated)
                {
                    email = user.FindFirst(ClaimTypes.Email)?.Value;
                    mobile = user.FindFirst(ClaimTypes.MobilePhone)?.Value;
                }
            } 
	}

    private List<VerificationOption> verificationOptions => new()
{
new VerificationOption
{
Value = "sms",
Label = "Text Message (SMS)",
Description = $"Send code to {mobile}",
},
new VerificationOption
{
Value = "email",
Label = "Email Address",
Description = $"Send code to {email}"
},
new VerificationOption
{
Value = "authenticator",
Label = "Authenticator App",
Description = "Use the code from your authenticator app"
}
};


    private string GetSelectedClass(string value) =>
    _selectedMethod == value ? "selected" : "";

    private void SelectOption(string method) =>
    _selectedMethod = method;

    private async void NavigateTo()
    {
        if (string.IsNullOrWhiteSpace(_selectedMethod))
        {
            Snackbar.Add("Choose a verification method!", Severity.Warning);
            return;
        }

        if (_selectedMethod == "authenticator")
        {
            Snackbar.Add("Authenticator method is currently not supported. Please select Email or SMS.", Severity.Error);
            return;
        }

        _isLoading = true;
        try
        {
            var payload = new
            {
                usernameOrEmailOrPhone = _selectedMethod == "email" ? AppState?.Email : AppState?.MobileNumber,
                method = _selectedMethod == "sms" ? "phone" : _selectedMethod
            };
            var response = await Api.PostAsync<object, object>("auth/send-2fa", payload);
            NavManager.NavigateTo("/two-factor-authentication");
        }
        catch (HttpRequestException ex)
        {
            HandleHttpException(ex, Snackbar);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    public class VerificationOption
    {
        public string Value { get; set; }
        public string Label { get; set; }
        public string Description { get; set; }
    }
}

<style>
    .page-wrapper {
        width: 100%;
        background-color: var(--color-secondary-background);
        padding: 32px 16px;
    }

    .form-container {
        max-width: 400px;
        margin: 0 auto;
        text-align: center;
    }

    .title-text {
        font-size: 30px;
        font-weight: 500;
        font-family: 'Public Sans', sans-serif;
        margin-bottom: 12px;
        color: var(--color-text-secondary)
    }

    .subtitle {
        font-size: 16px;
        font-weight: 400;
        font-family: 'Public Sans', sans-serif;
        color: var(--color-text-caption);
        margin-bottom: 24px;
    }

    .label-text {
        font-size: 18px;
        font-weight: 500;
        font-family: 'Public Sans', sans-serif;
        color: var(--color-text-gray);
    }

    .description-text {
        font-size: 14px;
        font-weight: 400;
        font-family: 'Public Sans', sans-serif;
        color: var(--color-text-caption);
    }

    .option-list {
        background-color: var(--color-secondary-background);
    }

    .option-card {
        border-radius: 8px;
        background-color: var(--color-background);
        padding: 16px;
    }

    .custom-radio {
        appearance: none;
        -webkit-appearance: none;
        background-color: var(--color-background);
        border: 3px solid var(--color-accent);
        width: 20px;
        height: 20px;
        border-radius: 50%;
        position: relative;
        cursor: pointer;
    }

    .custom-radio:checked::before {
        content: "";
        width: 8px;
        height: 8px;
        background-color: var(--color-accent);
        border-radius: 50%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
</style> 