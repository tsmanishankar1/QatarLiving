@using QLN.Web.Shared.Components.MoreFilters
@using QLN.Common.DTO_s;
<MoreFilters Selection="@modelSelection" OnApply="ApplyFilters" OnReset="ResetFilters">
    @foreach (var category in CategoryFilters)
    {
        @if(category.Name != "Brands" || category.Name != "Brand" ){
        <div class="filter-section">
        <label class="section-label">@category.Name</label>

        @if (category.Options != null && category.Options.Any())
        {
           @foreach (var option in category.Options)
            {
                var cat = category.Name;
                var opt = option;
                <label class="checkbox-item">
                    <MudCheckBox T="bool"
                    Color="Color.Primary"
                    Value="modelSelection[opt]" 
                    UncheckedColor="Color.Default"
                    ValueChanged="@(() => ToggleOption(cat,opt,modelSelection[opt]))"
                    Class="mb-1"/>
                    @opt
                </label>
            }
        }
         </div>
         }
    } 
</MoreFilters>

@code {
    [Parameter]
    public EventCallback OnFiltersChanged { get; set; }
    private Dictionary<string, bool> modelSelection = new();
    private Dictionary<string, List<string>> selectedFilters = new();
    private Dictionary<string, Dictionary<string, bool>> categorySelections = new();
    protected List<CategoryField> CategoryFilters => SearchState.ItemCategoryFilters;
    [Inject] protected SearchStateService SearchState { get; set; }
    private List<string> PopularModels = new() { "iPhone 16 Pro Max", "iPhone 15 Pro Max" };

    protected override void OnInitialized()
    {
       foreach (var category in CategoryFilters)
    {
        if (!modelSelection.ContainsKey(category.Name))
        {
            modelSelection[category.Name] = false;
        }
    }
        
    }

    private async Task ApplyFilters()
{
    SearchState.SelectedCategoryFields = GetSelectedCategoryFields();
    foreach (var category in SearchState.SelectedCategoryFields)
    {
        Console.WriteLine($"{category.Name}: {string.Join(", ", category.Options)}");
    }

    await OnFiltersChanged.InvokeAsync();
}
    private Task ResetFilters()
    {
        Console.WriteLine("Filters reset.");
        return Task.CompletedTask;
    }

private async Task ToggleOption(string category, string option, bool isChecked)
{
    Console.WriteLine($"ToggleOption - {category} => {option}: {isChecked}");
    switch (category)
    {
        case "Accept Offers":
            UpdateList(SearchState.ItemAcceptOffers, option, isChecked);
            break;
        case "Location":
            UpdateList(SearchState.ItemLocations, option, isChecked);
            break;
        case "Storage":
            UpdateList(SearchState.ItemStorge, option, isChecked);
            break;
        case "Condition":
            UpdateList(SearchState.ItemConditions, option, isChecked);
            break;
        case "Coverage":
            UpdateList(SearchState.ItemCoverage, option, isChecked);
            break;
        case "Model":
            UpdateList(SearchState.ItemModels, option, isChecked);
            break;
        case "Capacity":
            UpdateList(SearchState.ItemCapacity, option, isChecked);
            break;
        case "Make / Type":
            UpdateList(SearchState.ItemMakeType, option, isChecked);
            break;
        case "Colour":
            UpdateList(SearchState.ItemColor, option, isChecked);
            break;
         case "Warranty":
            UpdateList(SearchState.ItemWarranty, option, isChecked);
            break;
         case "Battery Life":
            UpdateList(SearchState.ItemBatteryLife, option, isChecked);
            break;
         case "Ram":
            UpdateList(SearchState.ItemRam, option, isChecked);
            break;
         default:
            Console.WriteLine($"Unhandled category: {category}");
            break;
    }
    await Task.CompletedTask; 
}
private bool GetBoundValue(string category, string option)
{
    return IsOptionSelected(category, option);
}

private Action<bool> GetBoundValue(string category, string option, out bool value)
{
    value = IsOptionSelected(category, option);
    return isChecked => ToggleOption(category, option, isChecked);
}
private bool IsOptionSelected(string category, string option)
{
    return category switch
    {
        "Accept Offers" => SearchState.ItemAcceptOffers.Contains(option),
        "Location" => SearchState.ItemLocations.Contains(option),
        "Storage" => SearchState.ItemStorge.Contains(option),
        "Condition" => SearchState.ItemConditions.Contains(option),
        "Coverage" => SearchState.ItemCoverage.Contains(option),
        "Model" => SearchState.ItemModels.Contains(option),
        "Capacity" => SearchState.ItemCapacity.Contains(option),
        "Make / Type" => SearchState.ItemMakeType.Contains(option),
        "Colour" => SearchState.ItemColor.Contains(option),
        "Warranty" => SearchState.ItemWarranty.Contains(option),
        "Battery Life" => SearchState.ItemBatteryLife.Contains(option),
        "Ram" => SearchState.ItemRam.Contains(option),
        _ => false
    };
}
private void UpdateList(List<string> list, string option, bool isChecked)
{
    if (isChecked)
    {
        if (!list.Contains(option))
            list.Add(option);
    }
    else
    {
        list.Remove(option);
    }
}
private void OnCheckboxChanged(string category, string option, bool isChecked)
{
    Console.WriteLine($"[Checkbox] Category: {category}, Option: {option}, Checked: {isChecked}");
    ToggleOption(category, option, isChecked);
    StateHasChanged();
}
private List<CategoryField> GetSelectedCategoryFields()
{
    var selectedFields = new List<CategoryField>();

    foreach (var category in CategoryFilters)
    {
        if (category.Options == null || !category.Options.Any())
            continue;

        var selectedOptions = category.Options
            .Where(opt => modelSelection.ContainsKey(opt) && modelSelection[opt])
            .ToList();

        if (selectedOptions.Any())
        {
            selectedFields.Add(new CategoryField
            {
                Name = category.Name,
                Type = category.Type,
                Options = selectedOptions
            });
        }
    }

    return selectedFields;
}
}



