<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <link rel="preload" href="/qln-images/qatar-living-logo-sized.webp" as="image" type="image/webp">

    <link rel="stylesheet" href="_content/QLN.Web.Shared/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="QLN.Blazor.Base.styles.css" />
    <link rel="stylesheet" href="_content/QLN.Web.Shared/css/app.css" />
    <link rel="stylesheet" href="_content/QLN.Web.Shared/css/site.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet" as="style">
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" media="print"
        onload="this.media='all'">

    @* <link rel="preload" href="fonts/PublicSans.woff2" as="font" type="font/woff2" crossorigin="anonymous"> *@

    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" media="print" onload="this.media='all'">
    <noscript>
        <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet">
    </noscript>

    <link rel="icon" type="image/svg+xml" href="fav-icon.svg">
    <HeadOutlet />
</head>

@* <HeadContent>
    <style>
        @@font -face {
            font-family: 'Public Sans';
            src: url('/fonts/PublicSans.woff2') format('woff2');
            font-weight: 100;
            font-style: normal;
            font-display: swap;
        }
        @@font -face {
            font-family: 'Public Sans';
            src: url('/fonts/PublicSans.woff2') format('woff2');
            font-weight: 100;
            font-style: italic;
        }
        /* ... Repeat for 200–900 weights + italics ... */
        @@font -face {
            font-family: 'Public Sans';
            src: url('/fonts/PublicSans.woff2') format('woff2');
            font-weight: 700;
            font-style: normal;
        }
        @@font -face {
            font-family: 'Public Sans';
            src: url('/fonts/PublicSans.woff2') format('woff2');
            font-weight: 700;
            font-style: italic;
        }
    </style>
</HeadContent> *@

<body>
    <Routes @rendermode="InteractiveServer" />
    <script src="_content/MudBlazor/MudBlazor.min.js?v=8.5.1"></script>
    <div id="reconnect-modal" style="display: none;"></div>
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script src="js/boot.js"></script>
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js" defer></script>
    <script src="_content/GoogleAnalytics.Blazor/googleanalytics.blazor.js" defer></script>
    @* 
        Script is MIA, not needed maybe?
        <script src="_content/Extensions.MudBlazor.StaticInput/NavigationObserver.js?v=3.2.0" defer></script> 
    *@

    <script>
        window.setVideoFirstFrame = function (videoElement) {
            videoElement.addEventListener('loadedmetadata', function () {
                videoElement.currentTime = 0.1;
            });
            videoElement.load();
        };

        window.playVideo = function (videoElement) {
            if (videoElement) {
                videoElement.play();
            }
        };

        window.pauseVideo = function (videoElement) {
            if (videoElement) {
                videoElement.pause();
                videoElement.currentTime = 0;
            }
        };
    </script>
    <script>
        document.addEventListener('input', function (e) {
            if (e.target.maxLength === 1 && e.target.value.length === 1) {
                let next = e.target.nextElementSibling;
                while (next && next.tagName !== 'INPUT') {
                    next = next.nextElementSibling;
                }
                if (next) next.focus();
            }
        });
    </script>
    <script>
        window.getWindowWidth = () => {
            return window.innerWidth;
        };
        window.registerResizeHandler = (dotNetHelper) => {
            window.addEventListener('resize', () => {
                dotNetHelper.invokeMethodAsync('UpdateWindowWidth', window.innerWidth);
            });
        };
    </script>
    <script>
        function updateBannerImagesForScreen() {
            const isMobile = window.innerWidth <= 768;

            document.querySelectorAll('.take-over-banner-image').forEach(img => {
                const mobileSrc = img.getAttribute('data-mobile');
                const desktopSrc = img.getAttribute('data-desktop');

                if (isMobile && mobileSrc) {
                    img.src = mobileSrc;
                } else if (desktopSrc) {
                    img.src = desktopSrc;
                }
            });
        }

        window.addEventListener('load', updateBannerImagesForScreen);

        window.addEventListener('resize', updateBannerImagesForScreen);

    </script>
    <script>
        function updateBannerImagesForScreen() {
            const isMobile = window.innerWidth <= 768;

            document.querySelectorAll('.banner-image').forEach(img => {
                const mobileSrc = img.getAttribute('data-mobile');
                const desktopSrc = img.getAttribute('data-desktop');

                if (isMobile && mobileSrc) {
                    img.src = mobileSrc;
                } else if (desktopSrc) {
                    img.src = desktopSrc;
                }
            });
        }

        // Initial call on page load
        window.addEventListener('load', updateBannerImagesForScreen);

        // Update images on window resize
        window.addEventListener('resize', updateBannerImagesForScreen);

    </script>
    <script>
        function adBannerForScreen() {
            const isMobile = window.innerWidth <= 768;

            document.querySelectorAll('.add-image').forEach(img => {
                const mobileSrc = img.getAttribute('data-mobile');
                const desktopSrc = img.getAttribute('data-desktop');

                if (isMobile && mobileSrc) {
                    img.src = mobileSrc;
                } else if (desktopSrc) {
                    img.src = desktopSrc;
                }
            });
        }

        window.addEventListener('load', adBannerForScreen);
        window.addEventListener('resize', adBannerForScreen);
    </script>

    <script>
        window.registerImageLoadCallback = (imageId, dotNetRef) => {
            const img = document.getElementById(imageId);
            if (!img) return;

            img.onload = () => {
                dotNetRef.invokeMethodAsync("OnImageLoaded");
            };
        };

    </script>
    <script>
        window.toggleBodyScroll = function (shouldLock) {
            document.body.style.overflow = shouldLock ? 'hidden' : '';
        };

    </script>
    <script>
        window.triggerFileInputClick = (element) => {
            if (element) element.click();
        };
    </script>
    <script>
        let seasonalSwiperInstance;
        window.initSeasonalSwiper = () => {
            if (seasonalSwiperInstance) {
                seasonalSwiperInstance.destroy(true, true);
            }

            const swiperEl = document.querySelector('.swiper-seasonal');
            if (!swiperEl) {
                console.warn("Seasonal Swiper element not found");
                return;
            }

            seasonalSwiperInstance = new Swiper(swiperEl, {
                slidesPerView: 'auto',
                spaceBetween: 10,
                navigation: {
                    nextEl: '.swiper-seasonal-button-next',
                    prevEl: '.swiper-seasonal-button-prev'
                },
                breakpoints: {
                    480: { slidesPerView: 1, spaceBetween: 12 },
                    640: { slidesPerView: 1.5, spaceBetween: 12 },
                    768: { slidesPerView: 2, spaceBetween: 14 },
                    860: { slidesPerView: 2.5, spaceBetween: 16 },
                    1024: { slidesPerView: 3, spaceBetween: 18 },
                    1200: { slidesPerView: 3, spaceBetween: 18 }
                }
            });
        };
        let featuredSwiperInstance;

        function initFeaturedSwiper() {
            if (featuredSwiperInstance) {
                featuredSwiperInstance.destroy(true, true);
            }

            const swiperEl = document.querySelector('.swiper-featured');
            if (!swiperEl) {
                console.warn("Swiper element not found");
                return;
            }

            featuredSwiperInstance = new Swiper(swiperEl, {
                slidesPerView: 'auto',
                spaceBetween: 10,
                navigation: {
                    nextEl: ".swiper-featured-button-next",
                    prevEl: ".swiper-featured-button-prev",
                },
                pagination: {
                    el: ".swiper-featured-pagination",
                    clickable: true,
                },
                breakpoints: {
                    480: { slidesPerView: 1.2, spaceBetween: 12 },
                    640: { slidesPerView: 1.8, spaceBetween: 12 },
                    768: { slidesPerView: 2.5, spaceBetween: 14 },
                    860: { slidesPerView: 2.8, spaceBetween: 16 },
                    1024: { slidesPerView: 3.2, spaceBetween: 18 },
                    1120: { slidesPerView: 4, spaceBetween: 10 },
                    1200: { slidesPerView: 4, spaceBetween: 10 },
                }

            });
        }
        let categoriesSwiperInstance;

        function initCategoriesSwiper() {
            if (categoriesSwiperInstance) {
                categoriesSwiperInstance.destroy(true, true);
            }

            const swiperEl = document.querySelector('.swiper-categories');
            if (!swiperEl) {
                console.warn("Categories swiper element not found");
                return;
            }

            categoriesSwiperInstance = new Swiper(swiperEl, {
                slidesPerView: 'auto',
                spaceBetween: 10,
                navigation: {
                    nextEl: ".swiper-categories-button-next",
                    prevEl: ".swiper-categories-button-prev",
                },
                pagination: {
                    el: '.swiper-categories-pagination',
                    clickable: true,
                    dynamicBullets: true,
                    dynamicMainBullets: 7

                },
                breakpoints: {
                    480: { slidesPerView: 2, spaceBetween: 5 },
                    540: { slidesPerView: 2.8, spaceBetween: 5 },
                    640: { slidesPerView: 3.8, spaceBetween: 6 },
                    768: { slidesPerView: 4, spaceBetween: 7 },
                    860: { slidesPerView: 4.8, spaceBetween: 7 },
                    1024: { slidesPerView: 4.9, spaceBetween: 10 },
                    1120: { slidesPerView: 5.3, spaceBetween: 10 },
                    1200: { slidesPerView: 5.8, spaceBetween: 10 },
                },
                on: {
                    afterInit: function (swiper) {
                        const totalSlides = swiper.slides.length;
                        const visibleSlides = swiper.params.slidesPerView;

                        const nextBtn = document.querySelector(".swiper-categories-button-next");
                        const prevBtn = document.querySelector(".swiper-categories-button-prev");

                        // If all slides fit into view, hide arrows
                        if (totalSlides <= visibleSlides) {
                            nextBtn.style.display = "none";
                            prevBtn.style.display = "none";
                        } else {
                            nextBtn.style.display = "";
                            prevBtn.style.display = "";
                        }
                    },
                }
            });
        }


    </script>

        <script>
            window.setupHeroBannerTracking = function (dotNetHelper) {
                const slides = document.querySelectorAll('.carousel-slide');

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const el = entry.target;
                            const code = el.dataset.code;
                            const duration = el.dataset.duration;
                            dotNetHelper.invokeMethodAsync("TrackBannerEvent", code, duration, "view");
                        }
                    });
                }, { threshold: 0.6 });

                slides.forEach(slide => {
                    observer.observe(slide);

                    slide.addEventListener('click', () => {
                        const code = slide.dataset.code;
                        const duration = slide.dataset.duration;
                        dotNetHelper.invokeMethodAsync("TrackBannerEvent", code, duration, "click");
                    });
                });
            };

            window.setupTakeOverBannerTracking = function (dotNetHelper) {
                const slides = document.querySelectorAll('.take-carousel-slide');

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const el = entry.target;
                            const code = el.dataset.code;
                            const duration = el.dataset.duration;
                            dotNetHelper.invokeMethodAsync("TrackBannerTakeOver", code, duration, "view");
                        }
                    });
                }, { threshold: 0.6 });

                slides.forEach(slide => {
                    observer.observe(slide);

                    slide.addEventListener('click', () => {
                        const code = slide.dataset.code;
                        const duration = slide.dataset.duration;
                        dotNetHelper.invokeMethodAsync("TrackBannerTakeOver", code, duration, "click");
                    });
                });
            };
        window.setupAdBannerTracking = function (dotNetHelper) {
                const banners = document.querySelectorAll('.trackable-banner');
                const seen = new Set();

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const el = entry.target;
                            const code = el.dataset.code;
                            const duration = el.dataset.duration;

                            if (!seen.has(code)) {
                                console.log("Ad banner in view:", code); // For debug
                                dotNetHelper.invokeMethodAsync("TrackAdBannerEvent", code, duration, "view");
                                seen.add(code);
                            }
                        }
                    });
                }, { threshold: 0.6 });

                banners.forEach(banner => {
                    observer.observe(banner);

                    banner.addEventListener('click', () => {
                        const code = banner.dataset.code;
                        const duration = banner.dataset.duration;
                        dotNetHelper.invokeMethodAsync("TrackAdBannerEvent", code, duration, "click");
                    });
                });
            };
        </script>

    <GBAnchor />
    <script>
        window.registerPopoverClickAway = (popoverDiv, dotNetHelper) => {
            const handler = (event) => {
                if (!popoverDiv || !popoverDiv.contains(event.target)) {
                    dotNetHelper.invokeMethodAsync("CloseDatePickerExternally");
                    document.removeEventListener("click", handler);
                }
            };

            // Delay to avoid immediately triggering on same click
            setTimeout(() => {
                document.addEventListener("click", handler);
            }, 100);
        };
    </script>
    <script>

        if (!window.__blazorStarted) {
            window.__blazorStarted = true;
            Blazor.start({
                reconnectionOptions: {
                    maxRetries: 5,
                    retryIntervalMilliseconds: 4000
                },
                onConnectionDown: (options, error) => {
                    console.warn('Connection down:', error);
                    setTimeout(() => {
                        location.reload();
                    }, 30000); // reload after 30s if not reconnected
                }
            });
        }

    </script>
    <script>
        window.scrollToElementById = function (id) {
            const el = document.getElementById(id);
            if (el) {
                el.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
    </script>

</body>

</html>
