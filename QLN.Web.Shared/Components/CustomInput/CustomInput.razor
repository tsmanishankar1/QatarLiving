@using Microsoft.AspNetCore.Components.Web
@typeparam TItem

<div class="custom-input-wrapper @(IsDisabled ? "disabled" : "") @(HasError ? "error-border" : "")"
    style="padding:@Padding; border-radius:@BorderRadius; height:@Height;">
    @if (!string.IsNullOrEmpty(Icon) || !string.IsNullOrEmpty(ImageUrl))
    {
        <div class="input-icon">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <MudIcon Icon="@Icon" Class="icon-symbol" />
            }
            else if (!string.IsNullOrEmpty(ImageUrl))
            {
                <img src="@ImageUrl" class="input-image" />
            }
        </div>
    }

    <input @bind="InternalValue" @bind:event="oninput" class="custom-input" placeholder="@Placeholder"
        disabled="@IsDisabled" type="@InputType" />

    @if (!string.IsNullOrEmpty(TextRight))
    {
        <div class="input-text-right">@TextRight</div>
    }
</div>

@if (HasError && !string.IsNullOrEmpty(ErrorText))
{
    <div class="error-text">@ErrorText</div>
}

@code {
    [Parameter] public TItem Value { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string Icon { get; set; }
    [Parameter] public string ImageUrl { get; set; }
    [Parameter] public string TextRight { get; set; }
    [Parameter] public string InputType { get; set; } = "text";

    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public string Padding { get; set; } = "14px 12px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string BorderRadius { get; set; } = "6px";

    [Parameter] public bool HasError { get; set; } = false;
    [Parameter] public string ErrorText { get; set; } = string.Empty;

    private string InternalValue
    {
        get => Value?.ToString() ?? "";
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
            {
                HasError = false;
            }

            try
            {
                if (typeof(TItem) == typeof(string))
                {
                    Value = (TItem)(object)value;
                }
                else
                {
                    Value = (TItem)Convert.ChangeType(value, typeof(TItem));
                }
                ValueChanged.InvokeAsync(Value);
            }
            catch
            {
                // Handle conversion errors if needed
            }
        }
    }
}

<style>
    .custom-input-wrapper {
        display: flex;
        align-items: center;
        border: 1px solid var(--color-captcha-box);
        background: var(--color-background);
        color: var(--color-text-heading);
        width: 100%;
        font-family: 'Public Sans', sans-serif;
        transition: border 0.2s;
    }

    .custom-input-wrapper.disabled {
        opacity: 0.6;
        pointer-events: none;
        background-color: var(--color-background-secondary-grey-light);
    }

    .custom-input {
        flex: 1;
        border: none;
        background: transparent;
        font-size: 14px;
        outline: none;
        color: inherit;
    }

    .input-icon,
    .input-image {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 8px;
    }

    .icon-symbol {
        font-size: 18px;
        color: var(--color-accent);
    }

    .input-image {
        width: 20px;
        height: 20px;
        object-fit: contain;
    }

    .input-text-right {
        font-size: 12px;
        margin-right: 8px;
        color: var(--color-text-secondary);
    }

    .custom-input-wrapper.error-border {
        border: 1px solid red;
        box-shadow: 0 0 0 1px rgba(255, 0, 0, 0.15);
    }

    .error-text {
        color: red;
        font-size: 12px;
        margin-top: 4px;
        padding-left: 4px;
    }
</style>