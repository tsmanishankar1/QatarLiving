@using QLN.Common.Infrastructure.DTO_s
@using QLN.Web.Shared.Components.QLAnalytics
@using QLN.Web.Shared.Services
@using Microsoft.Extensions.Logging
@inject ILogger<AdBanner> Logger
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (BannerItems != null && BannerItems.Any())
{
    <div class="ad-banner-wrapper">
        @foreach (var banner in BannerItems)
        {
            <div class="ad-banner-slide trackable-banner"
                 data-code="@banner.Code"
                 data-duration="@banner.Duration">
                @if (!string.IsNullOrWhiteSpace(banner.Link))
                {
                    <a href="@banner.Link" target="_blank" rel="noopener noreferrer">
                        <img class="ad-banner-image"
                             src="@banner.ImageDesktop"
                             alt="@banner.Alt"
                             @onclick="@(() => TriggerAnalytics(banner, "click"))" />
                    </a>
                }
                else
                {
                    <img class="ad-banner-image"
                         src="@banner.ImageDesktop"
                         alt="@banner.Alt" />
                }
            </div>
        }
    </div>
}

@if (AnalyticsProps != null)
{
    <QLAnalytics @key="AnalyticsKey" AnalyticsProps="@AnalyticsProps" />
}

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = new();

    private QLAnalyticsCallProps? AnalyticsProps;
    private string AnalyticsKey = Guid.NewGuid().ToString();
    private DotNetObjectReference<AdBanner>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && BannerItems.Any())
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupAdBannerTracking", _dotNetRef);
        }
    }

    [JSInvokable("TrackAdBannerEvent")]
    public Task TriggerAnalytics(string bannerCode, string? duration, string eventType)
    {
        @* Logger.LogInformation("Triggering AdBanner analytics: {EventType}, {BannerCode}, Duration: {Duration}",
            eventType, bannerCode, duration ?? "N/A"); *@

        AnalyticsProps = new QLAnalyticsCallProps
        {
            Action = eventType == "view" ? "AdBannerImpression" : "AdBannerClick",
            AnalyticType = eventType == "view"
                ? (int)AnalyticType.VIEW_BANNER_IMPRESSION
                : (int)AnalyticType.BANNER_CLICK,
            Url = new Uri(NavigationManager.Uri).AbsolutePath,
            Lead = AnalyticsLead.SMS_REVEAL,
            VerticalTag = (int)VerticalTag.CONTENT,
            AdditionalTag = new Dictionary<string, string>
            {
                { "BannerCode", bannerCode },
                { "Duration", duration ?? "N/A" }
            }
        };

        AnalyticsKey = Guid.NewGuid().ToString();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void TriggerAnalytics(BannerItem banner, string eventType)
    {
        _ = TriggerAnalytics(banner.Code!, banner.Duration, eventType);
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

<style>
    .ad-banner-image {
        width: 100%;
        border-radius: 1px;
        display: block;
    }

    @@media (max-width: 768px) {
        .ad-banner-image {
            height: auto;
            max-height: 402px;
            object-fit: contain;
        }
    }

    @@media (min-width: 769px) {
        .ad-banner-image {
            height: 402px;
            object-fit: cover;
        }
    }
</style>

