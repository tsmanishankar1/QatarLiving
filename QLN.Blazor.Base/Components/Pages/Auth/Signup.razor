@page "/signup"
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ApiService Api
@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Components
@inject UserState UserState
@using MudBlazor
@using QLN.Blazor.Base.Helpers
@using MudBlazor.Components
@using System.ComponentModel.DataAnnotations;
@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using QLN.Web.Shared.Components.PasswordStrengthIndicator
@using System.Text.RegularExpressions;
@using QLN.Blazor.Base.Models;
@using System.Net.Http;
@using System.Text.Json;
@inject IDialogService DialogService
@inject HttpClient Http

@if (_showVerificationPopup)
{
          <div class="popup-overlay">
        <VerificationPopup ShowSuccess="@showVerificationSuccess" _showMobileVerificationSuccess="@showMobileVerificationSuccess" isEmail="@isEmail" email="@email" OnClose="CloseVerificationPopup" OnAction="@ShowVerificationSuccessPopup" VerificationMethod="SelectedVerificationMethod" /> 
    </div> 
}
@if (signUpSucesss){
    <div class="popup-overlay">
       <ModalDialog 
        Title="Account Created!" 
        Description="Account created successfully"
        ButtonName="Continue"
        StatusType="Success"
        OnClick="CloseSuccessPopup" />
    </div> 
}
<div class="form-container">
    <div class="form-wrapper">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6 heading-text">
        Create Account
    </MudText>
<MudForm @ref="_form" Model="@_model" OnValidSubmit="SubmitSignup">
        <MudText Typo="Typo.body1"  Class="label-text">
        First Name
        </MudText>

               <MudTextField T="string"
                  For="@(() => _model.FirstName)"
                  Label="First Name"
                  @bind-Value="_model.FirstName"
                  Immediate="true"
                  Variant="Variant.Outlined"
                  style="background-color: var(--color-background)"
                  MaxLength="50"
                  FullWidth="true"
                   />
        <MudText Typo="Typo.body1"  Class="label-text">
        Last Name
        </MudText>
         <MudTextField T="string"
              Label="Last Name"
              For="@(() => _model.LastName)"
              @bind-Value="_model.LastName"
              Variant="Variant.Outlined"
              Immediate="true"
              MaxLength="50"
              FullWidth="true"
              style="background-color: var(--color-background)"  />
        <MudText Typo="Typo.body1"  Class="label-text">
        Username
        </MudText>
        <MudTextField T="string"
              Label="Username"
              For="@(() => _model.UserName)"
              @bind-Value="_model.UserName"
              Variant="Variant.Outlined"
              MaxLength="50"
              FullWidth="true"
              Immediate="true"
              style="background-color: var(--color-background)" />
              
    <MudText Typo="Typo.body1"  Class="label-text">
        Email
     </MudText>
   
<MudPaper Class="pa-4 custom-paper" Elevation="0" >
    <div class="phone-flex">
        <MudTextField T="string"
              Label="Email Address"
              For="@(() => _model.EmailAddress)"
              @bind-Value="_model.EmailAddress"
              MaxLength="50"
              Validation="@ValidateEmailFormat"
              FullWidth="true"
              Immediate="true"
              Class="phone-input" />

        @if (showVerificationSuccess)
        {
            <MudText Typo="Typo.body1" Class="success-text">
            Verified
            </MudText>
        }
        else
        {
            <MudButton Variant="Variant.Filled"
           Loading="@_emailVerifying"
           Disabled="@(string.IsNullOrWhiteSpace(_model.EmailAddress) ||  ValidateEmailFormat(_model.EmailAddress) != null)"
           OnClick="OnVerifyEmailClicked"
           Class="verify-button">

    <div class="verify-container">
        @if (_emailVerifying)
        {
            <MudProgressCircular Indeterminate="true"
                                 Size="Size.Small"
                                 Color="Color.Inherit"
                                 Class="mx-3 verify-progress-circular" />
        }
        else
        {
            <MudText Typo="Typo.button"  Class="verify-button-text">Verify</MudText>
        }
    </div>
</MudButton>
        }

    </div>
</MudPaper>

        <MudText Typo="Typo.body1"  Class="label-text">
        Phone Number
        </MudText>
<MudPaper Class="pa-4 custom-paper" Elevation="0">
    <div class="phone-flex">
       <MudSelect T="CountryModel"
                   @bind-Value="SelectedCountry"
                   Class="country-select"
                   DisableUnderline="true"
                   Searchable="true">
            <MudSelectItem Value="@SelectedCountry">
                <img src="@SelectedCountry.Flag" Class="selected-country-flag" />
                @SelectedCountry.Code
            </MudSelectItem>
            @foreach (var country in countryList)
            {
               <MudSelectItem Value="@country">
                <div Class="country-option">
                    <img src="@country.Flag"
                        alt="flag"
                        Class="country-flag" />
                    <span Class="country-code-text">@country.Code</span>
                </div>
            </MudSelectItem>
            }
        </MudSelect>

        <MudTextField T="string"
                      For="@(() => _model.MobileNumber)"
                      @bind-Value="_model.MobileNumber"
                      Validation="ValidatePhone"
                      @ref="_mobileFieldRef"
                      MaxLength="15"
                      FullWidth="true"
                      StartAdornment="@SelectedCountry.Code"
                      Immediate="true"
                      Class="mobile-input"/>
        
        @if (showMobileVerificationSuccess && !isEmail)
        {
            <MudText Typo="Typo.body1"  Class="success-text">
                Verified
            </MudText>
        }
        else
        {
            <MudButton Variant="Variant.Filled"
                       Loading="@_phoneVerifying"
                       Disabled="@(string.IsNullOrWhiteSpace(_model.MobileNumber) || ValidatePhone(_model.MobileNumber) != null)"
                       OnClick="OnVerifyPhoneClicked"
                       Class="verify-button">
                <div class="verify-container">
                    @if (_phoneVerifying)
                    {
                        <MudProgressCircular Indeterminate="true"
                                             Size="Size.Small"
                                             Color="Color.Inherit"
                                             Class="mx-3 verify-progress-circular" />
                    }
                    else
                    {
                        <MudText Typo="Typo.button" Class="verify-button-text">Verify</MudText>
                    }
                </div>
            </MudButton>
        }
    </div>
</MudPaper>


        <MudText Typo="Typo.body1"  Class="label-text">
        Date of Birth
        </MudText>
              <MudDatePicker @bind-Date="_dateOfBirth"
               T="DateTime?"
               Label="Date of Birth"
               Variant="Variant.Outlined"
               Required="true"
               style="background-color: var(--color-background)"
               RequiredError="Date of Birth is required"
               PickerVariant="PickerVariant.Inline"
               Class="mt-4" />
        <MudText Typo="Typo.body1"  Class="label-text">
        Nationality
        </MudText>
        <MudSelect T="string"
           Label="Nationality"
           Placeholder="Choose"
           Variant="Variant.Outlined"
           Dense="false"
           FullWidth="true"
           style="background-color: var(--color-background)"
           @bind-Value="_model.Nationality"
           DisableUnderline="true"
           Class="mt-4">
    @foreach (var country in countryList)
    {
        <MudSelectItem T="string" Value="@country.Name">@country.Name</MudSelectItem>
    }
</MudSelect>
<MudText Typo="Typo.body1"  Class="label-text">
        Language
        </MudText>
<MudSelect T="string"
           Label="Language"
           Placeholder="Choose"
           Variant="Variant.Outlined"
           Dense="false"
           style="background-color: var(--color-background)"
           FullWidth="true"
           @bind-Value="_model.LanguagePreferences"
           DisableUnderline="true"
           Class="mt-4">
    @foreach (var country in languageOptions)
    {
        <MudSelectItem T="string" Value="@country">@country</MudSelectItem>
    }
</MudSelect>


<MudText Typo="Typo.body1"  Class="label-text">
        Password
</MudText>
<MudTextField T="string"
              Label="Password"
              Variant="Variant.Outlined"
              MaxLength="50"
              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
              FullWidth="true"
              Class="password-input"
              OnInput="@OnPasswordInput"
              @bind-Value="_model.Password"
              Immediate="true"
              style="background-color: var(--color-background)"
              Required="true"
              For="@(() => _model.Password)"
              Adornment="Adornment.End"
              AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
              OnAdornmentClick="TogglePasswordVisibility"
              AdornmentColor="Color.Default" />
    <PasswordStrengthIndicator Password="@_model.Password" />


<MudText Typo="Typo.body1"  Class="label-text">
        Comnfirm Password
</MudText>
              <MudTextField T="string"
              Label="Confirm Password"
              Variant="Variant.Outlined"
              Immediate="true"
              MaxLength="50"
              InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
              FullWidth="true"
              Class="mt-4 "
              style="background-color: var(--color-background)"
              @bind-Value="_confirmPassword"
              Validation="ValidateConfirmPassword"
              For="@(() => _confirmPassword)"
              Adornment="Adornment.End"
              AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
              OnAdornmentClick="ToggleConfirmVisibility"
              AdornmentColor="Color.Default" />
        <MudCheckBox @bind-Value="_model.AggreeToTerms" Label=""   Class="custom-checkbox" >
        <LabelContent>
            I agree to the 
            <MudText Link="true" Class="ml-1 mr-1 d-inline terms-link">Terms and Conditions</MudText>
            and 
            <MudText Link="true" Class="ml-1 d-inline terms-link">Privacy Policy</MudText>
        </LabelContent>

    </MudCheckBox>
    @if (showAgreeTermsError)
{
    <MudText Color="Color.Error" Class="mt-2" Typo="Typo.caption">
        You must agree to the terms and conditions to proceed.
    </MudText>
}
    <MudCheckBox T="bool" Label="Enable Two-Factor Authentication" Class="mt-3" @bind-Checked="EnableTwoFactor" />
    <MudCheckBox T="bool" Label="I want to receive marketing emails and offers" Class="mt-2" @bind-Checked="MarketingOptIn" />
    <CustomButton 
    BackgroundColor="#FF7F38"
    TextColor="#FFFFFF"
    Text="Sign In"
    Disabled="_loading"
    Loading="_loading"
    OnClick="@SubmitSignup"
    Class="mt-4" />
    <div class="d-flex align-center my-4">
        <div class="divider-line"></div>
        <MudText Typo="Typo.caption" Class="mx-2">Or continue with</MudText>
        <div class="divider-line"></div>
    </div>

    <MudText Align="Align.Center" Class="mt-4 d-flex justify-center">
    Already have an account? 
    <NavLink href="/login" Class="terms-link" >Sign In</NavLink>
</MudText>
</MudForm>
 </div>
</div>


@code {
    private MudForm _form;
    private MudTextField<string> _mobileFieldRef;
    private SignupModel _model = new();
    private bool _loading = false;
    private bool _showOtp = false;
    public bool isEmail { get; set; } = false;
    public string email  { get; set; } = string.Empty;
    private string _confirmPassword = "";
    private string _otp = "";
    private string _firstName_error = "";
    private string _lastName_error = "";
    private string _username_error = "";
    private string _email_error = "";
    private string _phone_error = "";
    private string _password_error = "";
    private string _confirmPassword_error = "";
    private bool EnableTwoFactor { get; set; } = false;
    private Func<Task> SelectedVerificationMethod;

    [Required(ErrorMessage = "You must accept the Terms and Conditions.")]
    private bool AcceptedTerms { get; set; }
    private bool MarketingOptIn { get; set; }

    private bool showEmailVerificationBox { get; set; } = false;
    private bool showPhoneVerificationBox { get; set; } = false;
    private DateTime? _dateOfBirth;
    private List<string> _validationErrors = new();
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private bool _showVerificationPopup = false;
    private bool showVerificationSuccess = false;
    private bool showMobileVerificationSuccess = false;
    private bool signUpSucesss = false;
    private bool showAgreeTermsError = false;
    private bool _emailVerifying = false;
    private bool _phoneVerifying = false;
    private List<CountryModel> countryList = new List<CountryModel>();
    
    protected override async Task OnInitializedAsync()
    {
        countryList = await FetchCountriesAsync();
    }
    
    private CountryModel SelectedCountry { get; set; } = new CountryModel
    {
        Name = "Qatar",
        Code = "+974",
        Flag = "https://flagcdn.com/w40/qa.png"
    };
    private void OnPasswordInput(ChangeEventArgs e)
{
    _model.Password = e?.Value?.ToString() ?? string.Empty;
    StateHasChanged(); 
}
    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
    private void ToggleConfirmVisibility()
    {
        _showConfirmPassword = !_showConfirmPassword;
    }
    
    private List<string> languageOptions = new() { "English", "Arabic", "French", "German" }; 


    private async Task SubmitSignup()
    {
        _loading = true;
        await _form.Validate();
        if (!_model.AggreeToTerms)
        {
            showAgreeTermsError = true;
            _loading = false;
            return;
        }
        else
        {
            showAgreeTermsError = false;
        }
        if (!_form.IsValid)
        {
            _loading = false;
            return;
        }   
         var payload = new
        {
            username = _model.UserName,
            firstName = _model.FirstName,
            lastname = _model.LastName,
            dateofbirth = _dateOfBirth?.ToString("yyyy-MM-dd"), 
            gender = "male",
            mobileOperator = "vodofone",
            mobilenumber = _model.MobileNumber,
            emailaddress = _model.EmailAddress,
            nationality = _model.Nationality,
            password = _model.Password,
            languagepreferences = _model.LanguagePreferences,
            location = "location"
        }; 

        try
        {
            Console.WriteLine(payload); 
            var response = await Api.PostAsync<object, ResponseModel<object> >("auth/register", payload); 
                Console.WriteLine(response.Status);
                Console.WriteLine(response.Message);
            if (response.StatusCode == 200)
            {
                UserState.Email = _model.EmailAddress;
                UserState.mobileNumber = _model.MobileNumber;
                var body = new
                {
                    emailorPhoneNumber = _model.MobileNumber,
                    enable = EnableTwoFactor
                };
                if (EnableTwoFactor)
                {
                    body = new
                    {
                        emailorPhoneNumber = _model.MobileNumber,
                        enable = EnableTwoFactor
                    };
                    var result = await Api.PostAsync<object, ResponseModel<object> >("auth/manage/2fa", body);
                    if (result?.StatusCode == 200)
                    {
                        Console.WriteLine("2FA enabled successfully");
                    }
                    else
                    {
                        Snackbar.Add(result?.Message);
                    }
                }
                signUpSucesss = true;
            }
            else
            {
                 Snackbar.Add(response.Message, Severity.Error);
            } 
        }
        catch (Exception ex)
        {
           Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task OnVerifyEmailClicked()
    {
        _emailVerifying = true;
        isEmail = true;
        email = _model.EmailAddress;
        Console.WriteLine("Email verification clicked");        
        var payload = new
        {  
            email = email,
        }; 
        try
        {
            Console.WriteLine(payload); 
            var response = await Api.PostAsync<object, object >("auth/verify-email-request", payload); 
             if (response?.StatusCode == 200)
            {
                Snackbar.Add(response?.Message, Severity.Success);
                SelectedVerificationMethod = OnVerifyEmailClicked;
                _showVerificationPopup = true;
                 await InvokeAsync(StateHasChanged); 
            }
            else
            {
                Snackbar.Add(response?.Message, Severity.Error);
            }  
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Verification failed: {ex.Message}");
        }
        finally{
            _emailVerifying = false;
        }
    }

    private async Task OnVerifyPhoneClicked()
    {
        _phoneVerifying = true;
        isEmail = false;
        email = _model.MobileNumber; 
        var payload = new
        {  
            phoneNumber = email,
        }; 
        try
        {
            var response = await Api.PostAsync<object, object>("auth/verify-phone-request", payload); 
            if (response?.StatusCode == 200)
            {
                Snackbar.Add(response?.Message, Severity.Success);
                SelectedVerificationMethod = OnVerifyPhoneClicked;
                _showVerificationPopup = true;
                 await InvokeAsync(StateHasChanged); 
            }
            else
            {
                    Snackbar.Add(response?.Message, Severity.Error);
            } 
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Verification failed: {ex.Message}");
        }
        finally{
             _phoneVerifying = false;
        }
    } 
    private void CloseVerificationPopup()
{
    _showVerificationPopup = false;
}
private void ShowVerificationSuccessPopup()
{
    @if (isEmail){
        showVerificationSuccess = true;
    }
    else{
        showMobileVerificationSuccess = true;
    }
}


private void CloseSuccessPopup()
{
    signUpSucesss = false;
    NavManager.NavigateTo("/login");

}
    public class SignupModel
{
    [Required(ErrorMessage = "Username is required.")]
    public string UserName { get; set; }

    [Required(ErrorMessage = "First name is required.")]
    [RegularExpression("^[A-Za-z]+$", ErrorMessage = "First name must contain only alphabets.")]
    public string FirstName { get; set; }

    [Required(ErrorMessage = "Last name is required.")]
    [RegularExpression("^[A-Za-z]+$", ErrorMessage = "Last name must contain only alphabets.")]
    public string LastName { get; set; }

    [Required(ErrorMessage = "Email address is required.")]
    public string EmailAddress { get; set; }

     [Required(ErrorMessage = "Mobile number is required.")]
    public string MobileNumber { get; set; }

    public string Gender { get; set; }

    [Required(ErrorMessage = "Date of birth is required.")]
    public DateTime? DateOfBirth { get; set; } = DateTime.Today;

    [Required(ErrorMessage = "Password is required.")]
    [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$", 
        ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number, one special character, and no whitespace.")]
    public string Password { get; set; }

    [Required(ErrorMessage = "Nationality is required.")]
    public string Nationality { get; set; }

    public string LanguagePreferences { get; set; }

    public string Location { get; set; }

    public bool AggreeToTerms { get; set; } = false;
}

    public class TokenResponse
    {
        public string JwtToken { get; set; }
        public string RefreshToken { get; set; }
    }
    private async Task<List<CountryModel>> FetchCountriesAsync()
    {
        try
        {
            var response = await Http.GetStringAsync("https://restcountries.com/v3.1/all");

            var countriesJson = JsonSerializer.Deserialize<List<JsonElement>>(response);

            foreach (var country in countriesJson)
{
    if (country.TryGetProperty("name", out var nameDict) &&
        nameDict.TryGetProperty("common", out var nameElement))
    {
        string name = nameElement.GetString();
        string code = "N/A";
        string flag = "";

        if (country.TryGetProperty("idd", out var idd))
        {
            if (idd.TryGetProperty("root", out var rootElement) &&
                idd.TryGetProperty("suffixes", out var suffixesElement))
            {
                var root = rootElement.GetString();
                var suffix = suffixesElement[0].GetString();
                if (root != null && suffix != null)
                {
                    code = root + suffix;
                }
            }
        }

        if (country.TryGetProperty("flags", out var flags) &&
            flags.TryGetProperty("png", out var flagElement))
        {
            flag = flagElement.GetString();
        }

        countryList.Add(new CountryModel
        {
            Name = name,
            Code = code,
            Flag = flag ?? ""
        });
    }
}
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching countries: " + ex.Message);
        }

        return countryList.OrderBy(c => c.Name).ToList();;
    }
    private string ValidatePhone(string value)
{
    if (string.IsNullOrWhiteSpace(value))
        {
            return "Phone number is required.";
        }
        else if (!ValidationHelper.IsValidPhoneNumber(value))
        {
            return "Please enter a valid phone number.";
        }
        return null;
}
private string ValidateEmailFormat(string email)
    {
        return ValidationHelper.IsValidEmail(email) ? null : "Invalid email address.";
    }
private string ValidateConfirmPassword(string value)
{
    if (string.IsNullOrWhiteSpace(value))
        return "Please confirm your password.";

    if (value != _model.Password) 
        return "Passwords do not match.";

    return null;
}

}

<style>
    .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; 
}
.phone-flex {
    display: flex;
    align-items: flex-start;
    gap: 16px; 
}
.form-container {
    width: 100%;
    background-color: var(--color-secondary-background);
    padding: 32px 16px;
}

.form-wrapper {
    max-width: 400px;
    margin: 0 auto;
}
.heading-text {
    font-weight: 700;
}
.label-text {
    font-weight: 400;
}
.custom-textfield {
    background-color: var(--color-secondary-background);
}
.custom-paper {
    border: 1px solid #ccc;
    border-radius: 8px;
}
.success-text {
    font-weight: 400;
    color: #079455;
}
.verify-button {
    background-color:var(--color-accent);
    color: white;
    min-width: 50px;
}

.verify-button:disabled {
    opacity: 0.5;  
}
.verify-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}
.verify-progress {
    color: var(--color-accent);
}
.verify-text {
    text-transform: capitalize;
}
.verify-progress-circular {
    color: var(--color-accent);
}
.verify-button-text {
    text-transform: capitalize;
}
.country-select {
    width: 120px;
}
.selected-country-flag {
    width: 20px;
    height: 14px;
    margin-right: 5px;
}
.country-option {
    display: flex;
    align-items: center;
}
.country-flag {
    width: 20px;
    height: 14px;
    object-fit: cover;
    margin-right: 8px;
}
.country-code-text {
    white-space: nowrap;
    font-size: 14px;
}
.mobile-input {
    text-transform: capitalize;
}
.date-picker {
    background-color:var(--color-text-white);
}
.password-input {
    background-color: var(--color-secondary-background);
}
.terms-link {
    color: var(--color-accent);
}
.divider-line {
    flex-grow: 1;
    height: 1px;
    background-color: #ccc;
}
</style>