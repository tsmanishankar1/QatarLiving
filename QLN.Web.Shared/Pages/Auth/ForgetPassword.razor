@page "/forgot-password"
@inject NavigationManager NavManager
@inject ApiService Api
@inject ISnackbar Snackbar
@using MudBlazor
@using MudBlazor.Components
@using QLN.Web.Shared.Services
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Helpers
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using static QLN.Web.Shared.Helpers.HttpErrorHelper
@rendermode InteractiveServer

@if (ShowSuccess)
{
    <ModalDialog Title="Password Reset Link Sent"
        Description="We have sent a link to your email, please follow the steps in the email to create a new password."
        ButtonName="Back to Login" StatusType="Success" OnClick="CloseVerificationPopup" />
}

<div class="reset-password-container">
    <div class="reset-password-inner">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="login-heading">Reset Password</MudText>

            <MudText Typo="Typo.caption" Align="Align.Center" Class="login-description">
                Enter your email address and we'll send you a link to reset your password
            </MudText>
            <MudText Typo="Typo.body1" Class="label-text">
                Email Address
            </MudText>
            <MudForm @ref="_form">
                <MudTextField T="string" Label="Email Address" Variant="Variant.Outlined" FullWidth="true"
                    Immediate="true" For="@(() => Email)" @bind-Value="Email" MaxLength="50" Required="true"
                    RequiredError="Email is required." Validation="@ValidateEmailFormat"
                    style="background-color: var(--color-text-white)" Size="Size.Small" InputAttributes="@(new Dictionary<string, object>
              {
                  { "id", "email-input" },
                  { "data-testid", "email-input" }
              })" />

                <MudPaper Class="captcha-box d-flex flex-column px-4 py-2 mt-2">
                    <div class="d-flex align-center">
                        <MudCheckBox T="bool" @bind-Value="IsRobotChecked" For="@(() => IsRobotChecked)" Required="true"
                            RequiredError="Please confirm you are not a robot." DisableRipple="true"
                            Color="Color.Default" 
                            InputAttributes="@(new Dictionary<string, object>
             {
                 { "id", "not-a-robot-checkbox" },
                 { "data-testid", "not-a-robot-checkbox" }
             })"/>
                        <MudText Class="ml-2 captcha-label">I'm not a robot</MudText>
                        <MudSpacer />
                        <MudImage Src="/images/recapcha.svg" Alt="Verification" Class="captcha-image" />
                    </div>
                </MudPaper>

                <CustomButton BackgroundColor="#FF7F38" TextColor="#FFFFFF" Text="Send Reset Link" Disabled="@IsLoading"
                    Loading="@IsLoading" OnClick="@HandleResetPassword" Class="reset-button" aria-label="Forget Password Button"
    data-testid="forget-password-button"/>
            </MudForm>

            <MudPaper Class="back-to-login mud-clickable" Elevation="0" @onclick="NavigateToLogin">
                <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Inherit"
                    Class="back-to-login-icon" />
                <MudText Class="back-to-login-text" Attributes="@(new Dictionary<string, object>
         {
             { "id", "back-to-login-text" },
             { "data-testid", "back-to-login-text" }
         })">Back to Log in</MudText>
            </MudPaper>
        </MudStack>
    </div>
</div>
@code {
    private MudForm _form;
    private string Email { get; set; } = string.Empty;
    private bool IsRobotChecked { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowSuccess { get; set; } = false;

    private async Task HandleResetPassword()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        await ResetPasswordApiCall();
    }

    private async Task ResetPasswordApiCall()
    {
        try
        {
            IsLoading = true;
            var payload = new { email = Email };
            var response = await Api.PostAsync<object, object>("auth/forgot-password", payload);
            ShowSuccess = true;
        }
        catch (HttpRequestException ex)
        {
            HttpErrorHelper.HandleHttpException(ex, Snackbar);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string ValidateEmailFormat(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            return "Email Address is required.";
        }
        else
        {
            return ValidationHelper.IsValidEmail(email) ? null : "Enter valid email address.";
        }
    }
    private void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }
    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }
}


<style>
    .reset-password-container {
        width: 100%;
        background-color: var(--color-secondary-background);
        padding: 32px 16px;
    }

    .login-heading {
        font-weight: 600;
        font-size: 30px;
        font-family: 'Public Sans', sans-serif;
        text-align: center;
        color: var(--color-text-heading);
    }

    .reset-password-inner {
        max-width: 400px;
        margin: 0 auto;
    }

    .captcha-box {
        border: 1px var(--color-captcha-box);
        border-radius: 8px;
        width: 100%;
        background-color: var(--color-text-white);
    }

    .login-description {
        font-weight: 400;
        font-size: 16px;
        font-family: 'Public Sans', sans-serif;
        text-align: center;
        color: var(--color-text-descripton);
    }

    .captcha-label {
        color: #555;
        font-size: 15px;
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
    }

    .captcha-image {
        width: 40px;
        height: 40px;
    }

    .reset-button {
        margin-top: 1rem;
    }

    .back-to-login {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
        background-color: transparent;
        cursor: pointer;
    }

    .label-text {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 14px;
        color: var(--color-text-heading);
    }

    .back-to-login-icon {
        color: var(--color-accent);
        font-size: 20px;
        margin-right: 4px;
    }

    .back-to-login-text {
        color: var(--color-accent);
        font-family: 'Public Sans', sans-serif;
        font-weight: 500;
        font-size: 14px;
    }
</style>