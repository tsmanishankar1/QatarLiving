@page "/blazormarkdown"
@using System.Text
@using QLN.ContentBO.WebUI.Components
@using QLN.ContentBO.WebUI.Interfaces
@using System.Net
@using QLN.ContentBO.WebUI.Models
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IFileUploadService fileUploadService
@inherits QLComponentBase   

<MudGrid Style="padding-top: 18px">
    <MudItem>
        <MudText Typo="Typo.h4">Blazor Markdown Editor with Image Paste</MudText>
        <div id="pasteTarget" @ref="divRef">
            Click here and press Ctrl + V to paste image
            <MarkdownEditor @bind-Value="@markdownValue" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />
        </div>
        <hr />
    </MudItem>
    <MudItem>
        @if (!string.IsNullOrEmpty(PastedImage))
        {
            <img src="@PastedImage" alt="Pasted" style="max-width: 300px;" />
        }
        <br />
        <h3>Result</h3>
        @((MarkupString)markdownHtml.ToString())
    </MudItem>
</MudGrid>


@if (!string.IsNullOrEmpty(base64Image))
{
    <h4>Preview:</h4>
    <img src="@base64Image" style="max-width:300px;" />
}

@code {

    private string? PastedImage;

    string markdownValue = "Test";
    StringBuilder markdownHtml = new();

    private ElementReference divRef;
    private DotNetObjectReference<TestComponent>? _objRef;
    private string base64Image = string.Empty;

    protected FileUploadModel fileUploadModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize any required services or data here
        await AuthorizedPage();
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("pasteImageHandler.register", "pasteTarget", _objRef);
        }
    }

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml.Append(value);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnImagePasted(string base64)
    {
        base64Image = base64;

        var ImageUrl = await UploadFile();
        if (ImageUrl != null)
        {
            PastedImage = ImageUrl;
            Guid guid = Guid.NewGuid();
            markdownHtml.AppendLine($"![image-{guid}]({ImageUrl})");

        }

        StateHasChanged();
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }



    protected async Task<string> UploadFile()
    {
        var response = await fileUploadService.UploadFileAsync(fileUploadModel);
        // Assuming the response contains the URL of the uploaded image
        PastedImage = await response.Content.ReadAsStringAsync();
        if (response != null && response.IsSuccessStatusCode)
        {
            fileUploadModel = new();
            StateHasChanged();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Snackbar.Add("Bad Request: Please check the file format or size");
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("You are unauthorized to perform this action");
        }
        else if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal API Error");
        }

        return string.Empty;
    }
}