@using QLN.Web.Shared.Pages.Content.Community.Components.PaginationFooter
@inherits CommentSectionBase
<div class="user-info">
    <p><strong>User:</strong> @Name (Name: @Name)</p>
    <p><strong>User:</strong> @CurrentUserId (ID: @CurrentUserId)</p>

</div>

@if (IsLoading)
{
    <div class="comment-list">
        <MudSkeleton Height="30px" Width="120px" Animation="Animation.Pulse" Class="mb-4" />

        <!-- Comment input skeleton -->
        <div class="comment-input-wrapper">
            <MudSkeleton Height="40px" Width="100%" Animation="Animation.Pulse" Variant="Variant.Text" />
        </div>

        <!-- Comment list skeletons -->
        @for (var i = 0; i < 3; i++)
        {
            <div class="comment-item" style="margin-top: 16px;">
                <div style="display: flex; gap: 0.75rem;">
                    <MudSkeleton Height="24px" Width="24px" Variant="Variant.Circle" Animation="Animation.Pulse" />
                    <div style="flex-grow: 1;">
                        <MudSkeleton Height="16px" Width="40%" Animation="Animation.Pulse" Class="mb-1" />
                        <MudSkeleton Height="14px" Width="60%" Animation="Animation.Pulse" Class="mb-2" />
                        <MudSkeleton Height="14px" Width="80%" Animation="Animation.Pulse" Class="mb-2" />
                        <MudSkeleton Height="14px" Width="100%" Animation="Animation.Pulse" />
                    </div>
                </div>
                <div class="comment-divider"></div>
            </div>
        }
    </div>
}
else
{
    

@if (!IsLoggedIn)
{
    <div class="comment-section-empty">
        <div class="comment-title">Comments</div>

        <div class="empty-state">
            <img src="qln-images/content/Message.svg" class="msg-icon" />
            <h6 class="empty-title">You must be logged in to comment</h6>
           
        </div>
    </div>
}
else{
@if (Comment.Comments == null || !Comment.Comments.Any())
{
    <div class="comment-section-empty">
        <div class="comment-title">Comments</div>

        <div class="comment-input-wrapper @(string.IsNullOrWhiteSpace(newComment) ? "" : "has-text")">

            <MudTextField T="string"
                          Value="@newComment"
                          ValueChanged="@(val => { newComment = val; StateHasChanged(); })"
                          Immediate="true"
                          Placeholder="Add a comment"
                          Variant="Variant.Text"
                          Underline="false"
                          AutoGrow
                          Class="comment-input no-underline"
                          @ref="multilineReference"
                          OnAdornmentClick="@(() => multilineReference.SelectAsync())" />

            @if (!string.IsNullOrWhiteSpace(newComment))
            {
                <MudButton Class="comment-post-btn" OnClick="PostComment">Post</MudButton>
            }
        </div>

        <div class="empty-state">
            <img src="qln-images/content/Message.svg" class="msg-icon" />

            <h6 class="empty-title">Be the first to comment</h6>
            <p class="empty-description">
                Nobody’s responded to this post yet. Add your thoughts and get the conversation going.
            </p>
        </div>
    </div>
}
else
{
    <div class="comment-list">
        <div class="comment-title">Comments</div>

        <div class="comment-input-wrapper @(string.IsNullOrWhiteSpace(newComment) ? "" : "has-text")">
            <MudTextField T="string"
                          Value="@newComment"
                          ValueChanged="@(val => { newComment = val; StateHasChanged(); })"
                          Immediate="true"
                          Placeholder="Add a comment"
                          Variant="Variant.Text"
                          Underline="false"
                          AutoGrow
                          Class="comment-input no-underline"
                          @ref="multilineReference"
                          OnAdornmentClick="@(() => multilineReference.SelectAsync())" />
            @if (!string.IsNullOrWhiteSpace(newComment))
            {
                <MudButton Class="comment-post-btn" OnClick="PostComment">Post</MudButton>
            }
        </div>



        @foreach (var c in PagedComments)
        {
            <div class="comment-item @(c.IsByCurrentUser ? "my-comment" : "other-comment")">
                <img src="@("/qln-images/default_logo.svg")" alt="User Avatar" class="post-footer-comment-avatar" />

                <div class="comment-content">
                    <div class="comment-header">
                        <div class="comment-meta">
                            <span class="created-by">@c.CreatedBy</span>  •
                            <span class="created-at">@c.CreatedAt.ToString("g")</span>
                        </div>

                        <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft"
                                 @bind-IsOpen="@isMenuOpen" TransformOrigin="Origin.TopRight">
                            <ActivatorContent>
                                <MudIconButton DisableRipple="true" Class="menu-icon-button">
                                    <img src="qln-images/content/Menu.svg"
                                         alt="Menu"
                                         class="@($"menu-icon {(isMenuOpen ? "menu-open" : "")}")" />
                                </MudIconButton>
                            </ActivatorContent>

                            <ChildContent>
                                <MudMenuItem Class="report-menu-item" OnClick="@OnReport">Report</MudMenuItem>
                            </ChildContent>
                        </MudMenu>

                    </div>
                    <div class="comment-description">@c.Description</div>
                    @*  
                        <div class="post-icons-comment-section">

    <div class="comment-wrapper" @onclick="ToggleLikeAsync">

                            <img src="@($"qln-images/content/{(IsLiked ? "LikeFilled.svg" : "Like.svg")}")" class="comment-interaction-icon" />
                           <span class="icon-text">@c.LikeCount</span></div>

 *@

                    @*  <div class="comment-wrapper">

                            <img src="qln-images/content/Dislike.svg" class="comment-interaction-icon" />
                            <span class="icon-text">@c.LikeCount</span>
                        </div>
                                            </div>
*@
                </div>

            </div>
            <div class="comment-divider"></div>

        }
        <div class="pagination-container">
            <PaginationFooter TotalItems="10"
                              CurrentPage="@CurrentPage"
                              PageSize="@PageSize"
                              OnPageChange="HandlePageChange"
                              OnPageSizeChange="HandlePageSizeChange" />
        </div>


    </div>

}
}
}
<style>
    .comment-section-empty, .comment-list {
        padding: 1rem;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 0 4px rgba(0,0,0,0.1);
        margin-top: 10px;
    }

    .comment-input-wrapper {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 0.5rem;
        gap: 0.5rem;
        background-color: #fff;
        transition: border-color 0.2s ease;
        margin-top: 16px;
    }

        .comment-input-wrapper.has-text {
            border-color: #FF7F38;
        }

    .comment-input {
        flex: 1;
        border: none;
        outline: none;
        font-size: 1rem;
        margin-top: 10px;
        line-height: 1.5;
        max-height: calc(1.5em * 3);
        min-height: calc(1.5em * 1.5);
        overflow-y: auto;
        overflow-y: auto;
        resize: none;
        background: transparent;
    }

    .no-underline .mud-input-slot {
        border-bottom: none !important;
        box-shadow: none !important;
    }

    .comment-post-btn {
        background-color: #FF7F38;
        color: white;
        min-width: 70px;
        height: 36px;
        padding: 0 1rem;
        text-transform: none;
    }

    .post-icons-comment-section {
        display: flex;
        align-items: center;
        gap: 4px;
        padding: 2px 4px;
        margin-top: 10px;
    }

    .empty-state {
        text-align: center;
        color: #888;
        margin-top: 10px;
    }

    .icon-text {
        color: #00426D
    }

    .comment-icon {
        background-color: #eef;
        margin-bottom: 0.5rem;
    }

    .comment-item {
        display: flex;
        gap: 0.75rem;
        margin-top: 16px;
    }

    .my-comment {
        background-color: white;
    }

    .other-comment {
        background-color: white;
    }

    .comment-divider {
        height: 1px;
        background-color: #F0F0F0;
        margin: 14px 8px;
        width: 100%;
    }

    .comment-content {
        flex-grow: 1;
    }

    .comment-header {
        font-size: 0.9rem;
        color: #555;
        display: flex;
        justify-content: space-between;
    }

    .comment-actions {
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.8rem;
    }

    .post-footer-comment-avatar {
        width: 24px;
        height: 24px;
        border-radius: 200px;
        border: 1.5px solid #F0F0F0;
        object-fit: cover;
        margin-top: 12px;
    }

    .comment-meta {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 8px;
        flex-wrap: wrap;
    }

    .created-by {
        font-family: 'Public Sans', sans-serif;
        font-weight: 600;
        font-size: 15px;
        line-height: 26px;
        letter-spacing: 0;
        color: #00426D;
    }

    .created-at {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 12px;
        line-height: 18px;
        letter-spacing: 0;
        color: #1C1C1C;
    }

    .comment-description {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 16px;
        margin-top: -6px;
        color: #242424;
    }

    .comment-title {
        font-family: 'Public Sans', sans-serif;
        font-weight: 500;
        font-size: 22px;
        color: #242424;
        margin-top: 6px;
    }

    .comment-wrapper {
        background-color: #F4F4FA;
        padding: 8px;
        display: inline-flex;
        align-items: center;
        border-radius: 16px;
        gap: 6px;
    }

    comment-interaction-icon {
        width: 14px;
        height: 14px;
    }

    .msg-icon {
        width: 48px;
        height: 48px;
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 2rem;
        gap: 0.5rem;
    }

    .empty-title {
        font-family: 'Public Sans', sans-serif;
        font-weight: 600;
        font-size: 16px;
        line-height: 20px;
        letter-spacing: 0%;
        color: #242424;
        margin: 0.5rem 0 0;
    }

    .empty-description {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 14px;
        line-height: 22px;
        letter-spacing: 0%;
        color: #4B4B4B;
        max-width: 360px;
        margin: 0;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        padding: 1rem 0;
        background-color: #fff;
        width: 100%;
        padding: 0px 30px;
    }

    .menu-icon {
        width: 20px;
        height: 20px;
    }

        .menu-icon:hover {
            background: none !important;
            filter: brightness(0) saturate(100%) invert(48%) sepia(86%) saturate(2087%) hue-rotate(4deg) brightness(101%) contrast(102%);
        }


    menu-icon-button:active .menu-icon {
        filter: brightness(0) saturate(100%) invert(48%) sepia(86%) saturate(2087%) hue-rotate(4deg) brightness(101%) contrast(102%);
    }

    .menu-icon-button {
        background-color: transparent !important;
        box-shadow: none !important;
    }

        .menu-icon-button:hover,
        .menu-icon-button:active,
        .menu-icon-button:focus {
            background-color: transparent !important;
            box-shadow: none !important;
        }


            /* Active/Open state (overrides hover) */
            .menu-icon.menu-open,
            .menu-icon-button:hover .menu-icon.menu-open {
                filter: brightness(0) saturate(100%) invert(48%) sepia(86%) saturate(2087%) hue-rotate(4deg) brightness(101%) contrast(102%) !important;
            }

    .report-menu-item {
        width: 76px;
        height: 48px;
        padding-top: 4px;
        padding-bottom: 4px;
    }

        .report-menu-item:hover {
            background-color: transparent !important;
        }

</style>