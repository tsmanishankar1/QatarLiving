@page "/forgot-password"
@inject NavigationManager NavManager
@inject ApiService Api
@inject UserState UserState
@inject ISnackbar Snackbar
@using MudBlazor
@using MudBlazor.Components
@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Models
@using QLN.Blazor.Base.Helpers
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@rendermode InteractiveServer

@if (ShowSuccess)
{
    <ModalDialog
        Title="Password Reset Link Sent"
        Description="We have sent a link to your email, please follow the steps in the email to create a new password."
        ButtonName="Back to Login"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
}

<div class="reset-password-container">
    <div class="reset-password-inner">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Align="Align.Center">Reset Password</MudText>

            <MudText Typo="Typo.caption" Align="Align.Center">
                Enter your email address and we'll send you a link to reset your password
            </MudText>

            <MudForm @ref="_form">
                <MudTextField T="string"
                              Label="Email Address"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Immediate="true"
                              For="@(() => Email)"
                              @bind-Value="Email"
                              MaxLength="50"
                              Required="true"
                              RequiredError="Email is required."
                              Validation="@ValidateEmailFormat"
                              style="background-color: var(--color-background)"
                              Size="Size.Small"
                              Class="email-input" />

                <MudPaper Class="captcha-box d-flex flex-column px-4 py-2 mt-2">
                    <div class="d-flex align-center">
                        <MudCheckBox T="bool"
                                     @bind-Value="IsRobotChecked"
                                     For="@(() => IsRobotChecked)"
                                     Required="true"
                                     RequiredError="Please confirm you are not a robot."
                                     DisableRipple="true"
                                     Color="Color.Primary" />
                        <MudText Class="ml-2 captcha-label">I'm not a robot</MudText>
                        <MudSpacer />
                        <MudImage Src="/images/recapcha.svg" Alt="Verification" Class="captcha-image" />
                    </div>
                </MudPaper>

                <CustomButton
                    BackgroundColor="#FF7F38"
                    TextColor="#FFFFFF"
                    Text="Send Reset Link"
                    Disabled="@IsLoading"
                    Loading="@IsLoading"
                    OnClick="@HandleResetPassword"
                    Class="reset-button" />
            </MudForm>

            <MudPaper Class="back-to-login mud-clickable"
                      Elevation="0"
                      @onclick="NavigateToLogin">
                <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowLeft"
                         Color="Color.Inherit"
                         Class="back-to-login-icon" />
                <MudText Class="back-to-login-text">Back to Log in</MudText>
            </MudPaper>
        </MudStack>
    </div>
</div>
@code {
    private MudForm _form;
    private string Email { get; set; } = string.Empty;
    private bool IsRobotChecked { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowSuccess { get; set; } = false;

    private async Task HandleResetPassword()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        await ResetPasswordApiCall();
    }

    private async Task ResetPasswordApiCall()
    {
        try
        {
            IsLoading = true;

            var payload = new { email = Email };
            Console.WriteLine(payload); 
            var response = await Api.PostAsync<object, object>("auth/forgot-password", payload);

            if (response?.StatusCode == 200)
            {
                ShowSuccess = true;
            }
            else
            {
                Snackbar.Add(response?.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

   private string ValidateEmailFormat(string email)
    {
        return ValidationHelper.IsValidEmail(email) ? null : "Invalid email address.";
    }

    private void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }

    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }
}


<style>
.reset-password-container {
    width: 100%;
    background-color: #F5F6FA;
    padding: 32px 16px;
}

.reset-password-inner {
    max-width: 400px;
    margin: 0 auto;
}
.captcha-box {
    border: 2px solid #CCCCCC;
    border-radius: 8px;
    width: 100%;
    background-color: #FFFFFF;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.captcha-label {
    color: #555;
    font-size: 14px;
}

.captcha-image {
    width: 40px;
    height: 40px;
}

.reset-button {
    margin-top: 1rem; 
}

.back-to-login {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    background-color: transparent;
    cursor: pointer;
}

.back-to-login-icon {
    color: #FF7F38;
    font-size: 20px;
    margin-right: 4px;
}

.back-to-login-text {
    color: #FF7F38;
}
</style>