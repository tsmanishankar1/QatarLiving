@using Microsoft.Extensions.Options
@using QLN.ContentBO.WebUI.Models
@using QLN.ContentBO.WebUI.Pages.Auth
@inject IOptions<NavigationPath> NavigationPath

<CascadingAuthenticationState>
    <AuthorizeView Policy="AdminOnly">
        <Authorized>
            <Router AppAssembly="@typeof(App).Assembly">
                <Found Context="routeData">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                </Found>
                <NotFound>
                    <PageTitle>Not found</PageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p role="alert">Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </Authorized>
        <NotAuthorized>
            @if (context.User.Identity?.IsAuthenticated ?? false)
            {
                <!-- User is logged in but missing role -->
                <RedirectToAccessDenied />
            }
            else
            {
                <p>You are not authorized</p>
                <!-- User not logged in at all -->
                @if (!NavigationPath.Value.IsLocal)
                {
                    <RedirectToLogin />
                }
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private AuthenticationState context = default!;
    protected override async Task OnInitializedAsync()
    {
        context = await authenticationStateTask;
    }
}