@using QLN.Common.Infrastructure.DTO_s
@using QLN.Web.Shared.Components.QLAnalytics
@using Microsoft.Extensions.Logging
@inject ILogger<BannerHero> Logger
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div id="banner-hero" class="banner-wrapper">
    <div class="hero-carousel-container">
        <div class="hero-slides-wrapper" style="transform: translateX(-@($"{CurrentIndex * 100}%"))">
            @foreach (var (banner, index) in BannersToRender.Select((b, i) => (b, i)))
            {
                var id = $"banner-{banner.Code}-{index}";
                <div class="carousel-slide" id="@id" data-code="@banner.Code" data-duration="@banner.Duration">
                    @if (!string.IsNullOrWhiteSpace(banner.Link))
                    {
                        <a href="@banner.Link" target="_blank" rel="noopener noreferrer">
                            <img class="banner-image"
                                 src="@banner.ImageDesktop"
                                 data-mobile="@banner.ImageMobile"
                                 data-desktop="@banner.ImageDesktop"
                                 alt="@banner.Alt"
                                 @onclick="@(() => TriggerBannerAnalytics(banner, "click"))" />
                        </a>
                    }
                    else
                    {
                        <img class="banner-image"
                             src="@banner.ImageDesktop"
                             data-mobile="@banner.ImageMobile"
                             data-desktop="@banner.ImageDesktop"
                             alt="@banner.Alt" />
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (AnalyticsProps != null)
{
    <QLAnalytics @key="AnalyticsKey" AnalyticsProps="@AnalyticsProps" />
}

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = new();
    [Parameter] public bool Loading { get; set; }

    private List<BannerItem> BannersToRender => BannerItems.Count == 1
        ? new() { BannerItems[0], BannerItems[0] }
        : BannerItems;

    private int CurrentIndex = 0;
    private QLAnalyticsCallProps? AnalyticsProps;
    private string AnalyticsKey = Guid.NewGuid().ToString();
    private DotNetObjectReference<BannerHero>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupBannerTracking", _dotNetRef);
        }
    }

    [JSInvokable]
    public Task TriggerBannerAnalytics(string bannerCode, string? duration, string eventType)
    {
        Logger.LogInformation("Triggering banner analytics: {EventType}, {BannerCode}, Duration: {Duration}",
            eventType, bannerCode, duration ?? "N/A");

        AnalyticsProps = new QLAnalyticsCallProps
        {
            Action = eventType == "view" ? "AutoBannerImpression" : "AutoBannerClick",
            AnalyticType = eventType == "view"
                ? (int)AnalyticType.VIEW_BANNER_IMPRESSION
                : (int)AnalyticType.BANNER_CLICK,
            Url = new Uri(NavigationManager.Uri).AbsolutePath,
            Lead = AnalyticsLead.SMS_REVEAL,
            VerticalTag = (int)VerticalTag.CONTENT,
            AdditionalTag = new Dictionary<string, string>
            {
                { "BannerCode", bannerCode },
                { "Duration", duration ?? "N/A" }
            }
        };

        AnalyticsKey = Guid.NewGuid().ToString();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void TriggerBannerAnalytics(BannerItem banner, string eventType)
    {
        _ = TriggerBannerAnalytics(banner.Code!, banner.Duration, eventType);
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

