@implements IDisposable
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using QLN.Web.Shared.Components.NewCustomSelect
@inject IJSRuntime JSRuntime

@if (IsVisible || IsClosing)
{
    <div class="modal-backdrop @(IsVisible ? "show" : "") @(IsClosing ? "closing" : "")" @onclick="BackdropClick"
        tabindex="0" @onkeydown="OnKeyDown">
        <div class="modal-dialog" @onclick:stopPropagation="true" @ref="ModalDiv">
            <div class="icon-circle">
                <img src="/qln-images/calendar_image.svg" alt="Calendar Icon" class="calendar-icon-image" />
            </div>

            <h3 class="title">Event Reminder</h3>
            <p class="subtitle">@Message</p>

            <NewCustomSelect TItem="SelectOption" Items="@CalendarOptions" Label="Calendar*" Placeholder="Choose"
                SelectedId="@SelectedCalendarId" SelectedIdChanged="id => SelectedCalendarId = id" GetLabel="x => x.Label"
                GetId="x => x.Id" BorderRadius="8px" Padding="8px 10px" />

            <button
                class="calendar-button-model @(string.IsNullOrEmpty(SelectedCalendarId) ? "disabled-state" : "active-state")"
                @onclick="Confirm">
                Add to Calendar
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Message { get; set; } = "You will be notified 1 day ahead of this event";
    [Parameter] public EventCallback<string> OnConfirm { get; set; }

    private bool IsClosing = false;
    private ElementReference ModalDiv;
    private string SelectedCalendarId;

    private bool scrollLockRequested;
    private bool isFirstRender = true;

    private List<SelectOption> CalendarOptions = new()
{
new SelectOption { Id = "google", Label = "Google Calendar" },
new SelectOption { Id = "outlook", Label = "Outlook Calendar" },
new SelectOption { Id = "webapp", Label = "Outlook Web App" },
new SelectOption { Id = "yahoo", Label = "Yahoo Calendar" }
};

    public class SelectOption
    {
        public string Id { get; set; }
        public string Label { get; set; }
    }

    private async Task Confirm()
    {
        await OnConfirm.InvokeAsync(SelectedCalendarId);
        await CloseModal();
    }

    private async Task BackdropClick()
    {
        await CloseModal();
    }

    private async Task CloseModal()
    {
        if (!IsClosing)
        {
            IsClosing = true;
            UpdateScrollLock(); // lock scroll for closing animation
            StateHasChanged();
            await Task.Delay(300); // wait for animation to finish
            IsClosing = false;

            SelectedCalendarId = null;
            await IsVisibleChanged.InvokeAsync(false);
            UpdateScrollLock(); // unlock scroll
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && IsVisible)
        {
            await CloseModal();
        }
    }

    protected override void OnParametersSet()
    {
        UpdateScrollLock(); // request scroll state update after param changes
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFirstRender)
        {
            isFirstRender = false;
            return;
        }

        if (scrollLockRequested)
        {
            scrollLockRequested = false;
            bool shouldLockScroll = IsVisible || IsClosing;
            await JSRuntime.InvokeVoidAsync("toggleBodyScroll", shouldLockScroll);
        }
    }

    private void UpdateScrollLock()
    {
        scrollLockRequested = true;
        StateHasChanged(); // ensure OnAfterRenderAsync runs
    }

    public void Dispose()
    {
        // Optional: You could trigger scroll unlock from here if needed
        // But CloseModal already handles it
    }
}


<style>
    .modal-backdrop {
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        transition: background-color 0.3s ease;
    }

    .modal-backdrop.show {
        display: flex;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-backdrop.closing {
        background-color: rgba(0, 0, 0, 0);
    }

    .modal-dialog {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        background: white;
        padding: 24px;
        border-radius: 16px;
        max-width: 360px;
        width: 90vw;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        animation: fadeInScale 0.3s ease forwards;
        font-family: 'Public Sans';
    }

    .modal-backdrop.closing .modal-dialog {
        animation: fadeOutScale 0.3s ease forwards;
    }

    @@keyframes fadeInScale {
        0% {
            opacity: 0;
            transform: scale(0.9);
        }

        100% {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes fadeOutScale {
        0% {
            opacity: 1;
            transform: scale(1);
        }

        100% {
            opacity: 0;
            transform: scale(0.9);
        }
    }

    /* Existing styles from your dialog content */

    .icon-circle {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 12px;
    }

    .calendar-icon-image {
        width: 48px;
        height: 48px;
    }


    .title {
        font-size: 18px;
        font-weight: 600;
        margin: 0;
        margin-bottom: 6px;
        text-align: center;
        color: var(--color-text-heading)
    }

    .subtitle {
        font-size: 14px;
        font-weight: 400;
        color: var(--color-text-descripton);
        margin-bottom: 18px;
        text-align: center;
    }

    .calendar-button-model {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px 18px;
        margin-top: 18px;
        border-radius: 8px;
        width: 100%;
        transition: background-color 0.3s ease, opacity 0.3s ease;
    }

    .active-state {
        background-color: var(--color-accent);
        color: var(--color-text-white);
        opacity: 1;
    }

    .disabled-state {
        background-color: #F2F4F7;
        color: #98A2B3;
        opacity: 0.6;
        cursor: not-allowed;
    }
</style>
