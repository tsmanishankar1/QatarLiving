@page "/login"
@inject ApiService Api
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject UserState UserState

@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Helpers
@using MudBlazor
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using System.Diagnostics
@using System.ComponentModel.DataAnnotations
@using System.Net

<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Log in to your account</MudText>

        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Typo="Typo.body1" Align="Align.Center">
                Welcome back! Please enter your details.
            </MudText>
        </MudStack>

            <MudForm @ref="_form">
          

            <MudText Typo="Typo.body1" Style="font-weight: 400;">Email or Phone Number</MudText>
            <MudTextField T="string"
                          Label="Email or Username"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Class="mud-text-field-custom"
                          Required="true"
                          RequiredError="Email is required."
                          Immediate="true"
                          For="@(() => _username)"
                          Validation="@ValidateEmailFormat" />

            <MudText Typo="Typo.body1" Style="font-weight: 400;">Password</MudText>
            <MudTextField T="string"
                          Label="Password"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                          Class="mud-text-field-custom mt-4"
                          Required="true"
                          RequiredError="Password is required."
                          Immediate="true"
                          For="@(() => _password)"
                          Validation="@ValidatePassword"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentColor="Color.Default"
                        />

            <div style="display: flex; justify-content: space-between; align-items: center; margin: 8px 0;">
                <MudCheckBox T="bool" Label="Remember me" DisableMargins="true" />
                <MudLink Href="/forgot-password" Style="color: #FF7F38; text-decoration: none;">Forgot Password?</MudLink>
            </div>

            <CustomButton BackgroundColor="var(--color-secondary)"
                          TextColor="#FFFFFF"
                          Text="Sign In"
                          Disabled="_isLoading"
                          Loading="_isLoading"
                          OnClick="@HandleSubmit"
                          Class="mt-4" />
        </MudForm>

        <div class="d-flex align-center my-4">
            <div style="flex-grow: 1; height: 1px; background-color: #ccc;"></div>
            <MudText Typo="Typo.caption" Class="mx-2">Or continue with</MudText>
            <div style="flex-grow: 1; height: 1px; background-color: #ccc;"></div>
        </div>

        <MudGrid Justify="Justify.SpaceEvenly" GutterSize="12px" Class="mt-4">
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/google.svg" alt="Google" style="height: 24px;" />
                </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/microsoft.svg" alt="Microsoft" style="height: 24px;" />
                </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/facebook.svg" alt="Facebook" style="height: 24px;" />
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Align="Align.Start" Class="mt-4">
                Don't have an account?
                <MudLink Href="/signup" Class="ml-1" Style="color: #FF7F38;">Sign Up</MudLink>
            </MudText>
        </MudStack>
    </div>
</div>

@code {
    private MudForm _form;

    private string _username { get; set; } = string.Empty;
    private string _password { get; set; } = string.Empty;
    private bool _isLoading = false;
    private bool _showPassword = false;
    private string _usernameError = string.Empty;
    private string _passwordError = string.Empty;


    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private string ValidateEmailFormat(string _username)
    {
        return ValidationHelper.IsValidEmail(_username) ? null : "Invalid email address.";
    }

    private string ValidatePassword(string password)
    {
        var result = ValidationHelper.ValidatePassword(password);
        return string.IsNullOrEmpty(result) ? null : result;
    }

    private async Task HandleSubmit()
    {
        
        try
        {
            _isLoading = true;

            await _form.Validate();

            if (!_form.IsValid)
                return;

            var payload = new { usernameOrEmailOrPhone = _username, password = _password };

            var result = await Api.PostAsync<object, ResponseModel<LoginResponseData>>("auth/login", payload);

            if (result?.Body?.Status == true)
            {
                var data = result.Body.Data;
                UserState.Email = data.Emailaddress;
                UserState.mobileNumber = data.Mobilenumber;
                StateHasChanged();

                if (data.IsTwoFactorEnabled)
                {
                    Snackbar.Add($"Logged in as {data.Emailaddress}", Severity.Success);
                    NavManager.NavigateTo("/select-verification");
                }
                else
                {
                    Snackbar.Add($"Logged in as {data.Emailaddress}", Severity.Success);
                    NavManager.NavigateTo("/");
                }
            }
           
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error: " + ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class LoginResponseData
    {
        public string ?Username { get; set; }
        public string ?Mobilenumber { get; set; }
        public string ?Emailaddress { get; set; }
        public string ?AccessToken { get; set; }
        public string ?RefreshToken { get; set; }
        public bool IsTwoFactorEnabled { get; set; }
    }
}
