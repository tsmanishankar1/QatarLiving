@using QLN.Common.Infrastructure.DTO_s
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="swiper banner-swiper">
    <div class="swiper-wrapper">
        @if (BannerItems?.Any() == true)
        {
            foreach (var banner in BannerItems)
            {
                <div class="swiper-slide">
                    <a href="@banner.Link" target="_blank" rel="noopener noreferrer">
                        <img class="banner-image" src="@banner.ImageDesktop"
                            srcset="@banner.ImageMobile 600w, @banner.ImageDesktop 1024w"
                            sizes="(max-width: 768px) 600px, 100vw" alt="Banner" />
                    </a>
                </div>
            }
        }
    </div>

    <div class="swiper-pagination"></div> <!-- Required for pagination -->
</div>

<style>
    .banner-swiper {
        width: 100%;
    }

    .banner-image {
        width: 100%;
        object-fit: cover;
        display: block;
    }

    /* Height settings for responsive banners */
    @@media (max-width: 768px) {
        .banner-image {
            height: 150px;
        }
    }

    @@media (min-width: 769px) {
        .banner-image {
            height: 250px;
        }
    }
</style>

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = [];

    [Parameter] public bool Loading { get; set; } = false;

    private bool _bannerInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_bannerInitialized && !Loading && BannerItems?.Any() == true)
        {
            _bannerInitialized = true;
            await JS.InvokeVoidAsync("initBannerSwiper", BannerItems.Count);
        }
    }
}
