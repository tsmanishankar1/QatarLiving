@page "/reset-password"
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ApiService Api
@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Components
@inject UserState UserState
@using MudBlazor
@using MudBlazor.Components
@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using System.Text.RegularExpressions;
@inject IDialogService DialogService
@using System.Text.RegularExpressions;
@using QLN.Web.Shared.Components.ModalDialog
@using Microsoft.AspNetCore.WebUtilities
@using QLN.Web.Shared.Components.PasswordStrengthIndicator

@if (ShowSuccess){
    <div class="popup-overlay">
       <ModalDialog
        Title="New Password Set" 
        Description="You have successfully created a new password, click on back to login and enter your credentials."
        ButtonName="Back to Login"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
    </div> 
}


<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">    
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5" Align="Align.Center">Password Reset</MudText>
<MudText Typo="Typo.body1"  Style="font-weight: 400;">
        Password
</MudText>
<MudTextField T="string"
              Label="Password"
              Variant="Variant.Outlined"
              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
              FullWidth="true"
              Class="mt-4"
              MaxLength="50"
              @bind-Value="newPassword"
              Style="background-color: #FFFFFF;"
              Required="true"
              For="@(() => newPassword)"
              Error="@(newPassword != null && PasswordStrengthCategory == "Weak")"
              ErrorText="Password is too weak"
              Adornment="Adornment.End"
              AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
              OnAdornmentClick="TogglePasswordVisibility"
              AdornmentColor="Color.Default" />

<PasswordStrengthIndicator Password="@newPassword" />

<MudText Typo="Typo.body1"  Style="font-weight: 400;">
        Confirm Password
</MudText>


              <MudTextField T="string"
              Label="Confirm Password"
              Variant="Variant.Outlined"
              MaxLength="50"
              InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
              FullWidth="true"
              Class="mt-4"
              @bind-Value="confirmPassword"
              Style="background-color: #FFFFFF;"
              Required="true"
              RequiredError="Please confirm your password"
              For="@(() => confirmPassword)"
              Adornment="Adornment.End"
              AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
              OnAdornmentClick="ToggleConfirmVisibility"
              AdornmentColor="Color.Default" />

        <CustomButton 
    BackgroundColor="#FF7F38"
    TextColor="#FFFFFF"
    Text="Continue"
    Disabled="_isLoading"
    Loading="_isLoading"
    OnClick="@ResetPasswordMethod"
    Class="mt-4" />
    </MudStack>
    </div>
</div>
@code {
    private string? ResetCode;
    private string? emailDecoded;
    private bool _isLoading = false;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private List<string> _validationErrors = new();
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;

    private int PasswordScore => CalculatePasswordScore(newPassword);

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code))
        {
            ResetCode = code;
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            emailDecoded = System.Net.WebUtility.UrlDecode(email); 
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private void ToggleConfirmVisibility()
    {
        _showConfirmPassword = !_showConfirmPassword;
    }

    private void RemoveError(string error)
    {
        _validationErrors.Remove(error);
    }

    private Color GetStrengthBlockColor(int index)
    {
        if (PasswordScore == 0)
            return Color.Default;

        if (index < PasswordScore)
        {
            return PasswordStrengthCategory switch
            {
                "Weak" => Color.Error,
                "Medium" => Color.Warning,
                "Strong" => Color.Success,
                _ => Color.Default
            };
        }
        else
        {
            return Color.Default;
        }
    }

    private string PasswordStrengthCategory
    {
        get
        {
            if (PasswordScore <= 1) return "Weak";
            if (PasswordScore == 2) return "Medium";
            return "Strong";
        }
    }

    private int CalculatePasswordScore(string password)
    {
        if (string.IsNullOrEmpty(password))
            return 0;

        int score = 0;

        if (password.Length >= 8) score++;
        if (password.Any(char.IsUpper)) score++;
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(c => !char.IsLetterOrDigit(c))) score++;

        return score;
    }

    private bool ShowSuccess = false;

    private async Task ResetPasswordMethod()
    {
        _isLoading = true;
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            Snackbar.Add("Enter new password", Severity.Warning);
            _isLoading = false;
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Warning);
            _isLoading = false;
            return;
        }

        try
        {
            var payload = new { email = emailDecoded , newPassword = newPassword, resetCode = ResetCode };
            var response = await Api.PostAsync<object, object>("auth/reset-password", payload);

            if (response?.StatusCode == 200)
            {
                ShowSuccess = true;
            }
            else
            {
                Snackbar.Add(response?.Message, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }

    private double GetProgressValue(int index)
    {
        // Return different progress values based on password strength
        return (index + 1) * 25;
    }
}

<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px); 
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; 
    }
</style>