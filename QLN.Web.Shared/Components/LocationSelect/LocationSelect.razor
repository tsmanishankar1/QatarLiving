@typeparam TItem

<div class="location-select-wrapper" @onfocusout="HideDropdown">
    <div class="location-input-area" @onclick="FocusInput"
        style="@($"border-color:{(ShowSuggestions ? "#FF7F38" : "#D0D5DD")}; padding:{Padding}; {CustomStyle}")">
        <div class="chip-wrapper">
            @if (SelectedItems.Count > 0)
            {
                <div class="chip">
                    <span>@ShortLabel(SelectedItems[0])</span>
                    <button type="button" @onclick="(e) => RemoveLocation(SelectedItems[0])">×</button>
                </div>

                @if (SelectedItems.Count > 1)
                {
                    <div class="chip muted">
                        <span>+ @(SelectedItems.Count - 1) more</span>
                    </div>
                }
            }

            <input @ref="SearchInputRef" type="text" class="search-box" value="@SearchTerm" @oninput="OnInputChanged"
                @onfocus="ShowDropdown" @onkeydown="HandleKeyDown"
                placeholder="@(SelectedItems.Count == 0 ? "Location" : (SelectedItems.Count == 1 ? "+ Add" : ""))"
                disabled="@(SelectedItems.Count >= MaxSelectableItems)" />

        </div>

        <div class="location-icon">
            <MudIcon Icon="@Icons.Material.Rounded.LocationOn" Class="location-right-icon" />
        </div>
    </div>

    @if (ShowSuggestions && (FilteredItems.Any() || SelectedItems.Any()))
    {
        <div class="dropdown-list animate-dropdown" @onmousedown="() => IsClickingDropdown = true"
            @onmouseup="() => IsClickingDropdown = false" @onmouseleave="() => IsClickingDropdown = false">

            @* <div class="dropdown-top-fixed">
                @if (SelectedItems.Any())
                {
                    @foreach (var item in SelectedItems)
                    {
                        <div class="dropdown-item selected">
                            @GetLabel(item)
                            <button class="remove-btn" @onclick="() => RemoveLocation(item)">×</button>
                        </div>
                    }
                    <div class="dropdown-header">Recent searches</div>
                }
            </div> *@

            @foreach (var item in FilteredItems)
            {
                var isDisabled = SelectedItems.Count >= MaxSelectableItems;

                <div class="dropdown-item @(isDisabled ? "disabled" : "")"
                    @onclick="@(isDisabled ? null : (() => SelectLocation(item)))">
                    @GetLabel(item)
                </div>
            }

        </div>
    }
</div>
@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public Func<TItem, string> GetLabel { get; set; }
    [Parameter] public Func<TItem, string> GetId { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public int MaxSelectableItems { get; set; } = 1;
    [Parameter] public string Padding { get; set; } = "10px";
    [Parameter] public EventCallback<List<TItem>> OnLocationUpdated { get; set; }

    [Parameter] public string CustomStyle { get; set; } = string.Empty;

    private List<TItem> SelectedItems = new();
    private List<TItem> FilteredItems = new();
    private string SearchTerm = string.Empty;
    private bool ShowSuggestions = false;
    private bool IsClickingDropdown = false;
    private ElementReference SearchInputRef;

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        var newValue = e?.Value?.ToString() ?? "";

        if (string.IsNullOrEmpty(newValue) && string.IsNullOrEmpty(SearchTerm) && SelectedItems.Any())
        {
            // Backspace triggers removal of last chip
            RemoveLocation(SelectedItems.Last());
        }

        SearchTerm = newValue;
        await SearchLocations();
    }

    private async Task SearchLocations()
    {
        await OnSearch.InvokeAsync(SearchTerm);

        FilteredItems = Items
        .Where(x => GetLabel(x).Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
        && !SelectedItems.Any(s => GetId(s) == GetId(x)))
        .ToList();

        ShowSuggestions = true;
    }

    private async void SelectLocation(TItem item)
    {
        if (SelectedItems.Count >= MaxSelectableItems)
            return;

        if (!SelectedItems.Any(x => GetId(x) == GetId(item)))
        {
            SelectedItems.Add(item);
            await SelectedItemsChanged.InvokeAsync(SelectedItems);
        }

        SearchTerm = string.Empty;
        FilteredItems.Clear();

        // Delay needed to allow focus event to settle

        await Task.Delay(100);
        ShowSuggestions = false;
        StateHasChanged();
    }


    private async void RemoveLocation(TItem item)
    {
        SelectedItems.RemoveAll(x => GetId(x) == GetId(item));
        await SelectedItemsChanged.InvokeAsync(SelectedItems); // ← already done

        // API Call or Callback after change
        await OnLocationUpdated.InvokeAsync(SelectedItems);

        ShowSuggestions = true;
    }
    private void ShowDropdown()
    {
        ShowSuggestions = true;
        FilteredItems = Items
        .Where(x => !SelectedItems.Any(s => GetId(s) == GetId(x)))
        .ToList();
    }

    private async void HideDropdown(FocusEventArgs _)
    {
        await Task.Delay(150); // allow any in-progress clicks to complete

        if (!IsClickingDropdown)
        {
            ShowSuggestions = false;
            StateHasChanged();
        }

        IsClickingDropdown = false;
    }


    private async void FocusInput()
    {
        ShowDropdown();
        await Task.Yield(); // wait for DOM render
        await SearchInputRef.FocusAsync();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace" && string.IsNullOrEmpty(SearchTerm) && SelectedItems.Any())
        {
            RemoveLocation(SelectedItems.Last());
        }
    }

    private string ShortLabel(TItem item)
    {
        var full = GetLabel(item);
        return full.Length > 5 ? full.Substring(0, 5) + "…" : full;
    }
}


<style>
    .location-select-wrapper {
        position: relative;
        width: 100%;
        font-family: 'Public Sans';
    }

    .location-input-area {
        display: flex;
        align-items: center;
        background: #fff;
        cursor: text;
        position: relative;
        gap: 6px;
        border: 1px solid #ccc;
        padding: 10px;
        font-size: 14px;
        height: 56px;
        justify-content: space-between;
    }

    .location-input-area.focused {
        border-color: #FF7F38;
    }

    .dropdown-item.disabled {
        cursor: not-allowed;
        pointer-events: none;
    }

    .chip-wrapper {
        display: flex;
        flex-wrap: nowrap;
        align-items: center;
        flex: 1;
        overflow: hidden;
        gap: 6px;
        padding: 0;
        min-width: 0;
    }

    .search-box {
        border: none;
        outline: none;
        font-size: 14px;
        min-width: 10px;
        flex: 1;
        background: transparent;
        width: auto;
        max-width: 100%;
        color: var(--color-text-descripton);
        font-weight: 400;
        font-size: 14px;
    }

    .location-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888;
        padding-left: 8px;
        flex-shrink: 0;
    }

    .search-box::placeholder {
        color: var(--color-background-grey);
        /* or any color you want */
        font-weight: 400;
        font-size: 14px;
    }


    .chip {
        background-color: #f0f0f0;
        border-radius: 6px;
        padding: 4px 8px;
        display: flex;
        align-items: center;
        color: var(--color-text-descripton);
        font-weight: 400;
        font-size: 14px;
        white-space: nowrap;
    }

    .chip.muted {
        background-color: #eee;
        color: #666;
    }

    .chip span {
        margin-right: 4px;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100px;
    }

    .chip button {
        background: none;
        border: none;
        font-size: 14px;
        cursor: pointer;
    }

    .dropdown-list {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);
        max-height: 300px;
        overflow-y: auto;
        z-index: 1000;
        padding: 5px;
        margin-top: 4px;
    }

    .animate-dropdown {
        animation: slideDown 0.25s ease-out;
    }

    .location-right-icon {
        font-size: 20px;
        color: var(--color-accent);
    }

    @@keyframes slideDown {
        from {
            transform: translateY(-8px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .dropdown-top-fixed {
        position: sticky;
        top: 0;
        background: white;
        z-index: 1;
        padding: 6px 0;
        border-bottom: 1px solid #eee;
    }

    .dropdown-item {
        padding: 10px 12px;
        font-weight: 400;
        font-size: 15px;
        color: var(--color-text-heading) cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: normal;
    }

    .dropdown-item:hover {
        background-color: #f8f8f8;
    }

    .dropdown-item.selected {
        font-weight: bold;
        background-color: #e6e6e6;
    }

    .dropdown-header {
        font-weight: 600;
        padding: 8px 12px;
        background: #f9f9f9;
        font-size: 13px;
        color: #666;
    }

    .remove-btn {
        background: none;
        border: none;
        font-size: 16px;
        cursor: pointer;
        margin-left: 8px;
    }
</style>
