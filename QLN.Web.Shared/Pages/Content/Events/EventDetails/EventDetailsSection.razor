@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using QLN.Common.Infrastructure.DTO_s
@using QLN.Web.Shared.Helpers

<MudGrid Class="py-4" GutterSize="16px">
    <!-- Main Content -->
    <MudItem xs="12" md="8">
        <div class="event-card">
            <div class="event-header">
<<<<<<< HEAD
                <h2 class="event-title">@Item.Title</h2>
            </div>

            <div class="event-image-container">
                <img src="@(!string.IsNullOrWhiteSpace(Item?.ImageUrl) ? Item.ImageUrl : "/images/not_found.svg")"
                    alt="Event Image" class="event-image" />


                <div class="event-info-bar">
                    @if (!string.IsNullOrWhiteSpace(Item?.EventVenue))
                    {
                        <div class="location">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" class="location-icon" />
                            <span class="location-text">@Item.EventVenue</span>
                        </div>
                    }

=======
                <h2 class="event-title">@Event.Title</h2>
            </div>

            <div class="event-image-container">
                <img src="@Event.ImageUrl" alt="@Event.Title" class="event-image" />

                <div class="event-info-bar">
                    <div class="location">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" class="location-icon" />
                        <span class="location-text">@Event.Location</span>
                    </div>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
                    <div class="icons">
                        @* <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Class="icons-color" /> *@
                        <MudMenu OffsetY="true" CloseOnClick="true" Class="custom-share-menu">
                            <ActivatorContent>
                                <MudIconButton Icon="@Icons.Material.Filled.Share" Class="icons-color" />
                            </ActivatorContent>
                            <ChildContent>
                                @foreach (var item in shareMenuItems)
                                {
                                    <MudMenuItem Href="@item.Route" Target="@(item.OpenInNewTab ? "_blank" : "_self")">
                                        <img src="@item.ImageSrc" alt="@item.Text" class="share-icon" />
                                    </MudMenuItem>
                                }
                            </ChildContent>
                        </MudMenu>

                    </div>
                </div>
            </div>

            <!-- Mobile Info -->
            <div class="event-mobile-info">
                @EventInfoBlock()

<<<<<<< HEAD
                @* Register/Calendar Buttons *@
                @* @ActionButtons() *@
            </div>

            @if (!string.IsNullOrWhiteSpace(Item?.Description))
            {
                <div class="event-description mt-4">
                    @((MarkupString)Item.Description)
                </div>
            }

=======
                @ActionButtons()
            </div>

            <div class="event-description mt-4">
                <p>
                    @Event.Description
                </p>
            </div>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
        </div>
    </MudItem>

    <!-- Sidebar -->
    <MudItem xs="12" md="4">
        <div class="card-container">
            <div class="card-desktop-only">
<<<<<<< HEAD
                @if (!string.IsNullOrWhiteSpace(Item?.EventCategory) || !string.IsNullOrWhiteSpace(Item?.Category))
                {
                    <h3 class="section-title">
                        @(!string.IsNullOrWhiteSpace(Item?.EventCategory)
                                            ? Item.EventCategory
                                            : Item.Category )
                </h3>
                                }

=======
                <h3 class="section-title">@Event.SectionTitle</h3>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
                @EventInfoBlock()
                @* @ActionButtons() *@
            </div>

            <!-- Always visible map & ad -->
            <div class="map-container">
<<<<<<< HEAD
                @if (!string.IsNullOrWhiteSpace(Item?.EventLat) && !string.IsNullOrWhiteSpace(Item?.EventLong))
                {
                    <span class="map-access-name">Location:</span>
                    <iframe frameborder="0" scrolling="no" marginheight="0" marginwidth="0"
                        src="https://www.openstreetmap.org/export/embed.html?bbox=@Item.EventLong,@Item.EventLat,@Item.EventLong,@Item.EventLat&layer=mapnik&marker=@Item.EventLat,@Item.EventLong"
                        class="map-frame">
                    </iframe>
                }
=======
                <span class="map-access-name">Location:</span>
                <iframe frameborder="0" scrolling="no" marginheight="0" marginwidth="0"
                    src="@Event.MapLocation"
                    class="map-frame">
                </iframe>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
            </div>
            <img src="/qln-images/classifieds/detail_ad.svg" alt="Ad" class="ad-banner" />
        </div>
    </MudItem>
</MudGrid>

@code {
    private bool IsModalOpen { get; set; } = false;

<<<<<<< HEAD
    [Parameter] public ContentEvent Item { get; set; }
    private List<MenuItem> shareMenuItems => new()
{
new MenuItem {
ImageSrc = "/images/facebook_share_icon.svg",
Route = SocialShareHelper.GetFacebookUrl(CurrentUrl),
OpenInNewTab = true
},
new MenuItem {
ImageSrc = "/images/whatsApp_share_icon.svg",
Route = SocialShareHelper.GetWhatsAppUrl(CurrentUrl),
OpenInNewTab = true
}
};
    public class MenuItem
    {
        public string Text { get; set; }
        public string ImageSrc { get; set; }
        public string Route { get; set; }
        public bool OpenInNewTab { get; set; } = false;
    }

    private string CurrentUrl => Navigation.ToAbsoluteUri(Navigation.Uri).ToString();

    private void OnCalendarConfirmed()
=======
    private EventInfo Event = new EventInfo
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
    {
        Title = "Beach Volleyball Championship",
        Location = "Al Mayassa Hall, QNCC, Doha",
        Description = "Experience the thrill of the Beach Volleyball Championship! Watch top teams compete in an electrifying tournament. Enjoy the sun, sand, and sporting spirit with friends and family.",
        SectionTitle = "Sports & Activities",
        ImageUrl = "/qln-images/event_image.svg",
        Date = "12 Dec 2025 to 13 Jan 2026",
        Time = "12:00 PM",
        Fees = "250 - 3,500 QAR",
        MapLocation = "https://www.openstreetmap.org/export/embed.html?bbox=51.505%2C25.295%2C51.515%2C25.305&layer=mapnik&marker=25.300%2C51.510"
    };

    private async Task OnCalendarConfirmed(string calendarId)
    {
        var title = Uri.EscapeDataString(Event.Title);
        var description = Uri.EscapeDataString(Event.Description);
        var location = Uri.EscapeDataString(Event.Location);

        DateTime startDate = DateTime.TryParse(Event.Date.Split("to")[0].Trim(), out var dt) ? dt : DateTime.Now;
        DateTime endDate = startDate.AddHours(2);

        string startUtc = startDate.ToUniversalTime().ToString("yyyyMMddTHHmmssZ");
        string endUtc = endDate.ToUniversalTime().ToString("yyyyMMddTHHmmssZ");

        string url = "";

        switch (calendarId)
        {
            case "google":
                url = $"https://calendar.google.com/calendar/render?action=TEMPLATE&text={title}&dates={startUtc}/{endUtc}&details={description}&location={location}";
                break;
            case "outlook":
                url = $"https://outlook.live.com/calendar/0/deeplink/compose?subject={title}&body={description}&startdt={startDate:yyyy-MM-ddTHH:mm:ss}&enddt={endDate:yyyy-MM-ddTHH:mm:ss}&location={location}";
                break;
            case "webapp":
                url = $"https://outlook.office.com/calendar/0/deeplink/compose?subject={title}&body={description}&startdt={startDate:yyyy-MM-ddTHH:mm:ss}&enddt={endDate:yyyy-MM-ddTHH:mm:ss}&location={location}";
                break;
            case "yahoo":
                url = $"https://calendar.yahoo.com/?v=60&title={title}&st={startUtc}&et={endUtc}&desc={description}&in_loc={location}";
                break;
            default:
                return;
        }

        await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
    }

    RenderFragment EventInfoBlock() => __builder =>
    {
        <div class="info-section">
<<<<<<< HEAD
            @if (!string.IsNullOrWhiteSpace(Item?.EventStart) || !string.IsNullOrWhiteSpace(Item?.EventEnd))
            {
                <div class="info-item">

                    <img src="/images/events_date_icon.svg" alt="Date Icon" class="info-icon" />
                    <span class="info-text">
                        @if (!string.IsNullOrWhiteSpace(Item?.EventStart))
                        {
                            @DateHelper.FormatDate(Item.EventStart)
                        }
                        @if (!string.IsNullOrWhiteSpace(Item?.EventStart) && !string.IsNullOrWhiteSpace(Item?.EventEnd))
                        {
                            <text> to </text>
                        }
                        @if (!string.IsNullOrWhiteSpace(Item?.EventEnd))
                        {
                            @DateHelper.FormatDate(Item.EventEnd)
                        }
                    </span>
                </div>
            }

            @* <div class="info-item">
                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Style="color: #555;" />
                <span class="info-text">12:00 PM</span>
            </div> *@
=======
            <div class="info-item">
                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Style="color: #555;" />
                <span class="info-text">@Event.Date</span>
            </div>
            <div class="info-item">
                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Style="color: #555;" />
                <span class="info-text">@Event.Time</span>
            </div>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
        </div>

        @* <div class="info-Access">
            <span class="access-name">Access Fees:</span>
<<<<<<< HEAD
            <span class="price-text">250 - 3,500 <span class="qar">QAR</span></span>
        </div> *@


        @if (!string.IsNullOrWhiteSpace(Item?.EventVenue))
        {
            <div class="location-secondary">
                <MudIcon Icon="@Icons.Material.Filled.LocationOn" class="location-icon" />
                <span class="location-text">@Item.EventVenue</span>
            </div>
        }

=======
            <span class="price-text">@Event.Fees</span>
        </div>

        <div class="location-secondary">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" class="location-icon" />
            <span class="location-text">@Event.Location</span>
        </div>
>>>>>>> 06c1154b6e409d8ff2a9b3f6a2ff23c55d3bbdd1
    };

    RenderFragment ActionButtons() => __builder =>
    {
        <button class="register-button">
            Register Now
            <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Style="margin-right: 6px; color:white" />
        </button>
        <button class="calendar-button" @onclick="() => IsModalOpen = true">
            Add to Calendar
            <MudIcon Icon="@Icons.Material.Filled.Event" Style="margin-right: 6px;" />
        </button>

        <AddToCalendarDialog @bind-IsVisible="IsModalOpen" Message="You will be notified 1 day ahead of this event"
            OnConfirm="OnCalendarConfirmed" />
    };
}


<style>
    .event-card {
        background-color: white;
        border-radius: 6px;
        padding: 24px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        font-family: 'Public Sans';
    }

    .custom-share-menu .mud-popover {
        border-radius: 40px !important;
        overflow: hidden;
    }


    .share-icon {
        margin: 0;
        width: 20px;
        height: 20px;
        margin-right: 8px;
    }

    .event-title {
        font-size: 25px;
        font-weight: 600;
        margin-bottom: 10px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .event-image-container {
        width: 100%;
        border-radius: 12px;
        overflow: hidden;
        border: 1px solid #F0F0F0;
    }

    .event-image {
        width: 100%;
        max-height: 421.88px;
        object-fit: cover;
        display: block;
    }

    .event-info-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px 10px;
        background: #ffffff;
    }

    .location {
        display: flex;
        align-items: center;
        color: var(--color-primary);
    }

    .info-icon {
        width: 20px;
        height: 20px;
        margin-right: 8px;
        vertical-align: middle;
    }

    .location-secondary {
        display: none;
        align-items: center;
        color: var(--color-primary);
    }


    .icons-item {
        border-radius: 50px;
        padding: 10px;
        border: 1px solid var(--color-secondary-grey-container);
        color: var(--color-accent)
    }

    .icons-color {
        background-color: white;
        border-radius: 30px;
        border: 1px solid var(--color-secondary-grey-container);
        padding: 5px;
        font-size: 14px;
        color: var(--color-accent)
    }

    .location-icon {
        font-size: 14px;
        color: var(--color-primary);
    }

    .location-text {
        margin-left: 6px;
        font-weight: 500;
        font-size: 13px;
        color: var(--color-primary)
    }

    .icons {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .event-description a {
        word-break: break-word;
        overflow-wrap: break-word;
        color: var(--color-primary);
        text-decoration: underline;
        display: inline-block;
        max-width: 100%;
    }

    .event-description {
        overflow-wrap: break-word;
        word-break: break-word;
        max-width: 100%;
    }

    .event-description p {
        margin-bottom: 1rem;
    }

    .event-description img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 1rem auto;
        border-radius: 8px;
    }

    .card-container {
        background-color: white;
        border-radius: 6px;
        padding: 24px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        font-family: 'Public Sans';
    }

    .card-desktop-only {
        display: block;
    }

    .section-title {
        margin: 0;
        font-size: 12px;
        color: #2A6BA0;
        font-weight: 500;
        padding: 2px 6px;
        border-radius: 3px;
        border: 1px solid #E8F2FE;
    }

    .info-section {
        margin: 10px 0;
    }

    .info-item {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #E8F2FE;
    }

    .info-Access {
        display: flex;
        align-items: flex-start;
        justify-content: center;
        flex-direction: column;
        padding: 10px 0;
    }

    .info-text {
        font-size: 14px;
        line-height: 26px;
        letter-spacing: 0;
        color: var(--color-text-heading);
        font-weight: 500;
    }

    .price-text {
        font-size: 25px;
        font-weight: 600;
        color: var(--color-text-heading);
    }

    .access-name {
        font-size: 14px;
        font-weight: 500;
        color: var(--color-text-heading);
    }

    .map-access-name {
        font-size: 14px;
        font-weight: 500;
        line-height: 26px;
        letter-spacing: 0;
        padding: 10px 0;
        color: var(--color-text-heading);
    }


    .qar {
        font-size: 14px;
        font-weight: 500;
        color: var(--color-text-heading);
    }

    .register-button,
    .calendar-button {
        display: flex;
        align-items: center;
        gap: 6px;
        width: 100%;
        margin-bottom: 12px;
        padding: 8px 10px;
        border-radius: 8px;
        font-weight: bold;
        border: none;
        cursor: pointer;
    }

    .register-button {
        background-color: var(--color-accent);
        color: white;
    }

    .calendar-button {
        background-color: transparent;
        color: var(--color-accent);
        border: 1px solid var(--color-accent);
    }

    .map-container {
        margin-top: 24px;
    }

    .map-frame {
        width: 100%;
        height: 200px;
        border: none;
        border-radius: 8px;
    }

    .ad-banner {
        margin-top: 24px;
        width: 100%;
    }

    /* Responsive styles */
    .event-mobile-info {
        display: none;
    }

    @@media (max-width: 768px) {
        .event-image-container {
            position: relative;
        }

        .event-info-bar {
            position: absolute;
            top: 12px;
            left: 12px;
            right: 12px;
            background: transparent;
            padding: 0;
            justify-content: flex-end;
            pointer-events: none;
        }

        .icons {
            gap: 8px;
            pointer-events: auto;
        }

        .icons-item {
            border: none;
        }

        .card-container {
            margin-top: 16px;
        }

        .card-desktop-only {
            display: none;
        }

        .location {
            display: none;
        }

        .event-mobile-info {
            display: block;
            padding: 10px 5px;
        }

        .event-info-bar {
            top: 8px;
            right: 8px;
        }

        .location-secondary {
            display: flex;
            padding: 5px 0;
        }
    }
</style>
