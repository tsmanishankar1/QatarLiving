@inject IJSRuntime JS

<div class="file-upload-container">

    <div class="file-upload-wrapper">
        <input type="file"
               @ref="fileInput"
               style="display:none"
               @onchange="OnFileSelected"
               accept=".pdf,.png,.jpg,.jpeg" />

        <div class="file-input-box">
            <span class="@(!string.IsNullOrEmpty(FileName) ? "file-name" : "placeholder-text")">
                @(!string.IsNullOrEmpty(FileName) ? FileName : LabelText)
            </span>
        </div>

        <button class="upload-btn" @onclick="TriggerFileUpload">
            Upload
            <img src="/qln-images/Classifieds/cloudUpload_icon.svg" style="width: 24px; margin-right: 6px;" />
        </button>
    </div>

    <div class="file-note">Supported file formats: PDF, PNG and JPG. Maximum file size: 10MB.</div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600 text-sm mt-1">@ErrorMessage</div>
    }
</div>

@code {
    private ElementReference fileInput;
    private string FileName = string.Empty;
    private string ErrorMessage;

    [Parameter] public EventCallback<string> OnFileUploaded { get; set; }
    [Parameter] public string LabelText { get; set; } = "Certificate / Warranty*";

    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("FileUploader.triggerFileInput", fileInput);
    }

    private async Task OnFileSelected(ChangeEventArgs e)
    {
        try
        {
            ErrorMessage = string.Empty;

            var fileData = await JS.InvokeAsync<string>("FileUploader.readFileAsBase64", fileInput);
            FileName = await JS.InvokeAsync<string>("FileUploader.getFileName", fileInput);

            if (!string.IsNullOrEmpty(fileData))
            {
                await OnFileUploaded.InvokeAsync(fileData);
            }
        }
        catch (JSException ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}


<style>
 .file-upload-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    margin-bottom: 12px;
}

.upload-label-warn {
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 4px;
    color: #344054;
}

.file-upload-wrapper {
    display: flex;
    align-items: center;
    border: 1px solid #D0D5DD;
    border-radius: 8px;
    padding: 8px 12px;
    background-color: white;
}

.file-input-box {
    flex-grow: 1;
    padding-right: 10px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

.placeholder-text {
    color: #A1A1A1;
    font-size: 14px;
}

.file-name {
    color: #242424;
    font-size: 14px;
    font-weight: 600;
}

.upload-btn {
    display: flex;
    align-items: center;
    background-color: #FF7F2A;
    color: white;
    border: none;
    border-radius: 100px;
    padding: 6px 16px;
    font-weight: 500;
    font-size: 14px;
    cursor: pointer;
}

.file-note {
    font-size: 12px;
    color: #667085;
    margin-top: 4px;
}

</style>