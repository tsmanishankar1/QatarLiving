@page "/login"
@inject ApiService Api
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@using QLN.Web.Shared.Services
@using QLN.Web.Shared.Helpers
@using MudBlazor
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using static QLN.Web.Shared.Helpers.HttpErrorHelper
@using System.Text.RegularExpressions;
@using QLN.Common.DTO_s;
@inject IJSRuntime JS

<div style="width: 100%; background-color: var(--color-secondary-background); padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4 login-heading">Log in to your account</MudText>
        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Typo="Typo.body1" Align="Align.Center" Class="login-description">
                Welcome back! Please enter your details.
            </MudText>
        </MudStack>
        <MudText Typo="Typo.body1" Class="label-text">
            Email or Phone number </MudText>
        <MudTextField T="string" Label="Email or Phone number" Variant="Variant.Outlined" FullWidth="true"
            InputType="InputType.Text" style="background-color: var(--color-background)" MaxLength="50" Required="true"
            Error="@(!string.IsNullOrEmpty(_usernameError))" ErrorText="@_usernameError" Immediate="true"
            ValueChanged="OnEmailChanged" ValueExpression="(() => _username)" OnBlur="@ValidateUsername" />
        <MudText Typo="Typo.body1" Class="label-text">
            Password
        </MudText>
        <MudTextField T="string" Label="Password" MaxLength="50" Variant="Variant.Outlined"
            InputType="@(_showPassword? InputType.Text: InputType.Password)" FullWidth="true" Class="mt-4"
            style="background-color: var(--color-background)" Required="true" Adornment="Adornment.End"
            AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
            OnAdornmentClick="TogglePasswordVisibility" AdornmentColor="Color.Default"
            Error="@(!string.IsNullOrEmpty(_passwordError))" ErrorText="@_passwordError" Immediate="true"
            ValueChanged="OnPasswordChanged" ValueExpression="(() => _password)" OnBlur="ValidatePassword" />


        <div style="display: flex; justify-content: space-between; align-items: center; margin: 8px 0;">
            <MudCheckBox T="bool" Label="Remember me" DisableMargins="true" />
            <NavLink href="/forgot-password" style="color: var(--color-accent)"> Forgot Password?</NavLink>
        </div>

        <CustomButton BackgroundColor="var(--color-accent)" TextColor="#FFFFFF" Text="Sign In" Disabled="_isLoading"
            Loading="_isLoading" OnClick="@PerformLogin" Class="mt-4" />


        <div class="d-flex align-center my-4">
            <div style="flex-grow: 1; height: 1px; background-color: var(--color-secondary-grey-container)"></div>
            <MudText Typo="Typo.caption" Class="mx-2">Or continue with</MudText>
            <div style="flex-grow: 1; height: 1px; background-color: var(--color-secondary-grey-container)"></div>
        </div>

        <MudGrid Justify="Justify.SpaceEvenly" GutterSize="12px">
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/google.svg" alt="Google" style="height: 24px;" />
                </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/apple.svg" alt="Google" style="height: 24px;" />
                </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">
                    <img src="/images/microsoft.svg" alt="Microsoft" style="height: 24px;" />
                </MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Outlined" Class="social-login-button">

                    <img src="/images/facebook.svg" alt="Facebook" />
                </MudButton>
            </MudItem>
        </MudGrid>
        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Align="Align.Start" Class="mt-4 label-text">
                Don't have an account?
                <NavLink href="/signup" style="color: var(--color-accent)">Sign Up</NavLink>
            </MudText>
        </MudStack>
    </div>
</div>

@code {
    [CascadingParameter] public GlobalAppState? AppState { get; set; }
    private string _username = string.Empty;
    private string _password = string.Empty;
    private bool _isLoading = false;
    private bool _showPassword = false;
    private ModalData modalData = new();
    private bool loginSucesss = false;
    private string _usernameError = string.Empty;
    private string _passwordError = string.Empty;


    private async Task OnEmailChanged(string value)
    {
        _username = value;
        ValidateUsername();
    }


    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }


    private void ValidateUsername()
    {
        _usernameError = string.Empty;
        if (string.IsNullOrWhiteSpace(_username))
        {
            _usernameError = "Please enter your email or phone number";
        }
        if (_username.Contains("@"))
        {
            if (!ValidationHelper.IsValidEmail(_username))
                _usernameError = "Enter valid email address.";
        }
        else if (_username.Any(char.IsDigit))
        {
            if (!ValidationHelper.IsValidPhoneNumber(_username))
                _usernameError = "Enter valid phone number";
        }

        StateHasChanged();
    }
    private async Task OnPasswordChanged(string value)
    {
        _password = value;
        ValidatePassword();
    }

    private void ValidatePassword()
    {
        _passwordError = ValidationHelper.ValidatePassword(_password);
        StateHasChanged();
    }
    private async Task PerformLogin()
    {
        _usernameError = string.Empty;
        _passwordError = string.Empty;

        bool hasError = false;

        if (string.IsNullOrWhiteSpace(_username))
        {
            _usernameError = "Please enter your email or phone number.";
            hasError = true;
        }
        else if (!ValidationHelper.IsValidEmail(_username) && !ValidationHelper.IsValidPhoneNumber(_username))
        {
            _usernameError = "Please enter a valid email or phone number.";
            hasError = true;
        }
        _passwordError = ValidationHelper.ValidatePassword(_password);
        if (!string.IsNullOrEmpty(_passwordError))
        {
            hasError = true;
        }

        if (hasError)
        {
            StateHasChanged();
            return;
        }
        _isLoading = true;
        var payload = new { usernameOrEmailOrPhone = _username, password = _password };
        try
        {
                var response = await Api.PostAsync<object, LoginResponse>("auth/login", payload);
                await JS.InvokeVoidAsync("sessionStorage.setItem", "token", response.AccessToken);
                await JS.InvokeVoidAsync("sessionStorage.setItem", "username", response.Username);
                AppState!.Username = response.Username;
                AppState.Email = response.Emailaddress;
                AppState.MobileNumber = response.Mobilenumber;
                AppState.Token = response.AccessToken;
                AppState.NotifyStateChanged();
                StateHasChanged();
               if (response.IsTwoFactorEnabled.HasValue && response.IsTwoFactorEnabled.Value)
                {
                    NavManager.NavigateTo("/select-verification");
                    return;
                }
                else if (response.IsTwoFactorEnabled.HasValue && !response.IsTwoFactorEnabled.Value)
                {
                    Snackbar.Add($"Logged in as {response.Emailaddress}", Severity.Success);
                    NavManager.NavigateTo("/classifieds");
                }
        }
        catch (HttpRequestException ex)
        {
            HttpErrorHelper.HandleHttpException(ex, Snackbar);
        }
        finally
        {
            _isLoading = false;
        }
    }





    public class LoginResponseData
    {
        public string Username { get; set; }
        public string Mobilenumber { get; set; }
        public string Emailaddress { get; set; }
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
        public bool IsTwoFactorEnabled { get; set; }
    }


    private class LoginResult
    {
        public bool Success { get; set; }
        public MessageContent Message { get; set; }
    }

    private class MessageContent
    {
        public string JwtToken { get; set; }
        public string RefreshToken { get; set; }
    }
}



<style>
    .login-heading {
        font-weight: 500;
        font-size: 30px;
        font-family: 'Public Sans', sans-serif;
        margin-bottom: 1.5rem;
        text-align: center;
        color: var(--color-text-heading);
    }

    .login-description {
        font-weight: 400;
        font-size: 16px;
        font-family: 'Public Sans', sans-serif;
        text-align: center;
        color: var(--color-text-descripton);
    }

    .label-text {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 14px;
        color: var(--color-text-heading);
    }
</style>