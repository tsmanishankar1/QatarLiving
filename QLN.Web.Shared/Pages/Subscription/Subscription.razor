@page "/subscription"
@page "/subscription/{type}"
@inject IDialogService DialogService
@using QLN.Web.Shared.Components.ModalDialog
@using QLN.Web.Shared.Components.BreadCrumb
@using QLN.Web.Shared.Models
@using MudBlazor

@if (signUpSucesss){
    <div class="popup-overlay">
       <ModalDialog
        Title="Payment Success!"
        Description="Payment was successful"
        ButtonName="Continue"
        StatusType="Success"
        OnClick="CloseSuccessPopup" />
    </div>
}
<MudContainer MaxWidth="MaxWidth.Large" Class="py-6 px-4" Style="background-color: #F2F4F7;">
    <!-- Breadcrumb + Title -->
    <Breadcrumb Items="breadcrumbItems" />
      
             
    <div style="width: 100%;">
            <div style="text-align: center; margin-bottom: 24px;">
                <MudText Typo="Typo.h5" Class="font-semibold mb-1" Style="color:#242424;">
                    Classifieds Subscriptions
                </MudText>
                <MudText Typo="Typo.subtitle1" Class="mb-4" Style="color:#646464;">
                    Promote smarter. Sell quicker. Stay visible longer
                </MudText>
                <div class="custom-tabs">
                    <div class="tabs-toolbar">
                        <div class="tab @( _activeVerticalTabIndex == 0 ? "active" : "" )" @onclick="() => SetVeritcalTab(0)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Properties.svg" class="tab-icon" alt="Deals">
                                <span class="tab-text">Properties</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeTabIndex == 1 ? "active" : "" )" @onclick="() => SetVeritcalTab(1)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Vehicles.svg" class="tab-icon" alt="Stores">
                                <span class="tab-text">Vehicles</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeVerticalTabIndex == 2 ? "active" : "" )" @onclick="() => SetVeritcalTab(2)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Classifieds.svg" class="tab-icon" alt="Preloved">
                                <span class="tab-text">Classified</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeVerticalTabIndex == 3 ? "active" : "" )" @onclick="() => SetVeritcalTab(3)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Services.svg" class="tab-icon" alt="Preloved">
                                <span class="tab-text">Services</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeVerticalTabIndex == 4 ? "active" : "" )" @onclick="() => SetVeritcalTab(4)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Jobs.svg" class="tab-icon" alt="Preloved">
                                <span class="tab-text">Jobs</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeVerticalTabIndex == 5 ? "active" : "" )" @onclick="() => SetVeritcalTab(5)">
                            <div style="display:flex;flex-direction:column;gap:10px;align-items:center">

                                <img src="/images/subscription/Rewards.svg" class="tab-icon" alt="Preloved">
                                <span class="tab-text">Rewards</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                    </div>
                </div>
            </div>
            </div>

       

    <MudGrid GutterSize="4">

        <!-- LEFT SECTION -->
        <MudItem xs="12" md="9">
            <div style="max-width: 800px; margin: 0 auto;">
             

                <div class="custom-tabs">
                    <div class="tabs-toolbar">
                        <div class="tab @( _activeTabIndex == 0 ? "active" : "" )" @onclick="() => SetTab(0)">
                            <div style="display:flex;flex-direction:row;gap:10px">
                                
                            <img src="/images/subscription/Deals.svg" class="tab-icon" alt="Deals">
                            <span class="tab-text">Deals</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeTabIndex == 1 ? "active" : "" )" @onclick="() => SetTab(1)">
                            <div style="display:flex;flex-direction:row;gap:10px">

                            <img src="/images/subscription/Stores.svg" class="tab-icon" alt="Stores">
                            <span class="tab-text">Stores</span>
                           </div>
                            <div class="tab-indicator"></div>
                        </div>
                        <div class="tab @( _activeTabIndex == 2 ? "active" : "" )" @onclick="() => SetTab(2)">
                            <div style="display:flex;flex-direction:row;gap:10px">

                            <img src="/images/subscription/PreLoved.svg" class="tab-icon" alt="Preloved">
                            <span class="tab-text">Preloved</span>
                            </div>
                            <div class="tab-indicator"></div>
                        </div>
                    </div>
                </div>


                <!-- In subscription.razor (parent) -->
                <MudGrid GutterSize="4">
                    @foreach (var p in GetFilteredPlans())
                    {
                        var plan = p; 
                        <MudItem Style="margin-top:20px" xs="12" sm="6" md="4">
                            <SubscriptionCard Plan="plan"
                                              IsSelected="_selectedPlan?.Flyers == plan.Flyers &&
            _selectedPlan?.Price == plan.Price &&
            _selectedPlan?.Duration == plan.Duration"
                                              OnSelect="() => SelectPlan(plan)" />
                        </MudItem>
                    }
                </MudGrid>
            </div>
        </MudItem>

        <!-- RIGHT SECTION -->
        <MudItem xs="12" md="3">
            <!-- Summary Card -->
            <MudPaper   Style="@CardStyle" Elevation="2">
                <MudText Typo="Typo.h6" Class="mb-2">Summary</MudText>
                @if (_selectedPlan != null)
                {
                    <MudText>Plan: @_selectedPlan.Duration</MudText>
                    <MudText>Price: @_selectedPlan.Price</MudText>
                }
                else
                {
                    <MudText>No plan selected.</MudText>
                }

                <MudDivider Class="my-2" />
                <MudText Class="font-bold mt-2">Total: @(_selectedPlan?.Price ?? "0")</MudText>

        <MudBox Class="mt-4" Style="width: 100%;display: flex; justify-content:center;align-items:center">
                    <MudButton Disabled="_selectedPlan == null"
                               OnClick="OpenPaymentDialog"
                               Class="font-semibold"
                               Style="@(_selectedPlan == null ?
               "background-color: #E0E0E0; color: white; width: 200px;" :
               "background-color: #F26D1E; color: white; width: 200px;")">
                        Pay Now
                    </MudButton>
            </MudBox>

                @if (_isPaymentDialogOpen)
                {
                    <MudOverlay Visible="true" Style="z-index: 1300; background-color: rgba(0,0,0,0.6);">
                        <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
                            <MudPaper Elevation="8"
                                      Style="width: 100%; max-width: 480px; background-color: white; border-radius: 16px; padding: 32px;">

                                <MudStack Spacing="3">
                                    <MudText Typo="Typo.h6" Style="color: #242424;">Card Details</MudText>

                                    <MudTextField T="string"
                                                  Label="Card Number"
                                                  Variant="Variant.Outlined"
                                                  Placeholder="1234 5678 9012 3456"
                                                  Style="border-radius: 8px;" />

                                    <MudGrid GutterSize="2">
                                        <MudItem xs="6">
                                            <MudTextField T="string"
                                                          Label="Expiry"
                                                          Variant="Variant.Outlined"
                                                          Placeholder="MM/YY"
                                                          Style="border-radius: 8px;" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField T="string"
                                                          Label="CVV"
                                                          Variant="Variant.Outlined"
                                                          Placeholder="123"
                                                          Style="border-radius: 8px;" />
                                        </MudItem>
                                    </MudGrid>

                                    <MudTextField T="string"
                                                  Label="Card Holder Name"
                                                  Variant="Variant.Outlined"
                                                  Placeholder="John Doe"
                                                  Style="border-radius: 8px;" />

                                    <MudStack Row Spacing="2" Class="justify-end mt-4">
                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Default"
                                                   OnClick="() => _isPaymentDialogOpen = false">
                                            Cancel
                                        </MudButton>

                                        <MudButton Variant="Variant.Filled"
                                                   Style="background-color: #F26D1E; color: white;"
                                                   OnClick="SubmitMockCardPayment">
                                            Pay ₹@_selectedPlan?.Price
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </div>
                    </MudOverlay>
                }


            </MudPaper>

         
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int _activeTabIndex;
    private int _activeVerticalTabIndex;

    private SubscriptionPlan? _selectedPlan;
    private bool _isPaymentDialogOpen = false;
    private bool signUpSucesss = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }
    private List<QLN.Web.Shared.Components.BreadCrumb.BreadcrumbItem> breadcrumbItems = new();
    private void SetVeritcalTab(int index)
    {
        _activeVerticalTabIndex = index;
    }
    private void SetTab(int index)
    {
        _activeTabIndex = index;
        _selectedPlan = null; 
    }
    private void OpenPaymentDialog()
    {
        _isPaymentDialogOpen = true;
        StateHasChanged();

    }

    protected override void OnInitialized()
    {
        breadcrumbItems = new()
        {
            new() { Label = Type ?? "Classifieds", Url = $"/{Type}" },
            new() { Label = "Subscriptions", Url = "/Subscriptions", IsLast = true },
        };

    }


   
    private List<SubscriptionPlan> _plans = new()
    {
        new() { Flyers = 1, Price = "50", Duration = "1 day" },
        new() { Flyers = 2, Price = "150", Duration = "1 Week" },

        new() { Flyers = 3, Price = "250", Duration = "2 Week" },
        new() { Flyers = 4, Price = "1,500", Duration = "1 Month" },
        new() { Flyers = 12, Price = "3,500", Duration = "3 Months" },
        new() { Flyers = 24, Price = "6,000", Duration = "6 Months" },
        new() { Flyers = 48, Price = "10,000", Duration = "12 Months" },
    };

    private IEnumerable<SubscriptionPlan> GetFilteredPlans()
    {
        return _activeTabIndex switch
        {
            0 => _plans.Take(3),     // Deals
            1 => _plans.Skip(3).Take(1), // Stores
            2 => _plans.Skip(4),     // Preloved
            _ => _plans
        };
    }
    private void CloseSuccessPopup()
    {
        signUpSucesss = false;
    }

    private void SelectPlan(SubscriptionPlan plan)
    {
        // Find matching plan from the main list
        _selectedPlan = _plans.FirstOrDefault(p =>
            p.Duration == plan.Duration &&
            p.Price == plan.Price &&
            p.Flyers == plan.Flyers);

        Console.WriteLine($"Selected: {_selectedPlan?.Duration}");
        StateHasChanged();
    }

   
    private void SubmitMockCardPayment()
    {
        // Hardcoded value test
        Console.WriteLine("Mock payment submitted with hardcoded card details.");
        signUpSucesss = true;

        _isPaymentDialogOpen = false;

    }

    private void ConfirmPayment()
    {
        _isPaymentDialogOpen = false;

        // TODO: Redirect or trigger payment logic
        Console.WriteLine($"Proceeding with payment for: {_selectedPlan?.Duration}, Price: {_selectedPlan?.Price}");
    }
    private string CardStyle =>
       $"width: 258px; height: 200px; border-radius: 8px; padding: 12px 20px; border: 1px solid #E0E0E0; background-color: white;";
    private string CardStyle1 =>
       $"width: 258px; height: 160px; border-radius: 8px; padding: 12px 20px; border: 1px solid #E0E0E0; background-color: white;";
}

}


