@inherits LayoutComponentBase
@using Microsoft.Extensions.Options
@using QLN.Web.Shared.Components.FooterFolder
@inject CookieAuthStateProvider CookieAuthenticationStateProvider;
@inject NavigationManager NavManager
@using System.Security.Claims;
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Components.MobileMenu
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Http;
@using QLN.Web.Shared.Services
@inject IOptions<NavigationPath> options;

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@CustomTheme"/>
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider Position="SnackbarPosition.BottomLeft" />
<MobileMenu IsOpen="@showMobileMenu" OnClose="@ToggleMobileMenu" GoToProfile="@GoToProfile" GoToRegister="@GoToRegister"
    GoToLogin="@GoToLogin" GoToLogout="@GoToLogout" OnPostAdClicked="@OnPostAdClicked" IsLoggedIn="@IsLoggedIn"
    Name="@Name" Email="@Email" HandleProfileMenuClick="HandleProfileMenuClick"
    ProfileMenuItems="@profileMenuItems"
    NestedProfileMenuItems="@nestedProfileMenuItems" />


<header class="site-header mud-elevation-1">
    <div class="header-container">

        <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleMobileMenu" Class="mobile-menu-button" />

        <div class="header-left">
            <NavLink href="/content/daily">
                <MudImage id="logoImage" Src="/qln-images/dark_mode_logo.svg" Alt="Qatar Living" Class="logo-img" />
            </NavLink>
        </div>
        <div class="nav-main-conainer">
            <div class="nav-container">
                    <NavLink id="propertiesLink" href=@{
                    navigationPath.Properties
                                        }
 class="nav-link">Properties
                    </NavLink>
                    <NavLink id="vehiclesLink" href=@{
                                        navigationPath.Vehicles
                                        }
 class="nav-link">Vehicles</NavLink>
                    <NavLink id="classifiedsLink" href=@{
                                        navigationPath.Classifieds
                                        }
 class="nav-link">Classifieds
                    </NavLink>
                    <NavLink id="servicesLink" href=@{
                                        navigationPath.Services
                                        }
 class="nav-link">Services</NavLink>
                    <NavLink id="jobsLink" href=@{
                                        navigationPath.Jobs
                                        }
 class="nav-link">Jobs</NavLink>
                    <NavLink id="rewardsLink" href=@{
                                        navigationPath.Rewards
                                        }
 class="nav-link">Rewards</NavLink>
            </div>

            <div class="post-button-wrapper">
                <MudMenu OffsetY="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudButton id="headerPostButton" Variant="Variant.Filled"
                            Style="background-color: #FF7F38; color: white;" Size="Size.Medium"
                            StartIcon="@Icons.Material.Filled.Add" Class="post-ad-btn desktop-post-btn"
                            @onclick="OnPostAdClicked">
                            <span class="post-ad-text">Post Ad</span>
                        </MudButton>
                    </ActivatorContent>
                </MudMenu>
            </div>
        </div>

        <div class="header-right">
             @if (IsLoggedIn)
        {
            <MudAvatar Size="Size.Medium" Class="fav-avatar-custom" @onclick="() => GoToFavourites()">
            <img id="favouriteIcon" src="/qln-images/header/favourite_icon.svg" alt="Favourite" class="avatar-icon" />
        </MudAvatar> 
        <img src="/qln-images/header/fav_icon_mobile.svg" alt="Post" class="fav-avatar-icon"
                   @onclick="() => GoToFavourites()" />
             }

                   <img src="/qln-images/header/add_post_svg.svg" alt="Post" class="mobile-post-icon"
                    @onclick="OnPostAdClicked" />
        <MudMenu OffsetY="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <div id="userIcon" style="display: flex; align-items: center; gap: 0.5rem;" class="cursor-pointer">
                        <MudAvatar Size="Size.Medium" Class="avatar-custom">
                            <img src="/qln-images/header/account.svg" alt="Account" class="avatar-icon" />
                        </MudAvatar>
                    </div>
                </ActivatorContent>
                <ChildContent>
                    <div class="vertical-button-group">
                        @if (IsLoggedIn)
                        {
                            <!-- Username -->
                                <span class="menu-username"title="@Name">
                                    @((Name?.Length > 20) ? Name.Substring(0, 20) + "..." : Name)
                                </span>

                                @foreach (var item in profileMenuItems)
                            {
                                var isDashboard = item.Text == "Dashboards";

                                if (isDashboard)
                                {
                                    <MudMenu OffsetY="true" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight">
                                        <ActivatorContent>
                                        <MudMenuItem Class="menu-item">
                                                <div class="nested-menu-item-content" style="width: 212px">
                                                <img src="@item.ImageSrc" alt="@item.Text" class="menu-item-icon" />
                                                <span class="menu-item-text">@item.Text</span>
                                            </div>
                                            </MudMenuItem>
                                        </ActivatorContent>
                                        <ChildContent>
                                            @foreach (var nested in nestedProfileMenuItems)
                                            {
                                                <MudMenuItem Class="menu-item">
                                                    <MudLink Href="@nested.Route" Underline="Underline.None">
                                                        <div class="nested-menu-item-list-content">
                                                            <img src="@nested.ImageSrc" alt="@nested.Text" class="menu-item-icon nested-icon-color" />
                                                            <span class="menu-item-text">@nested.Text</span>
                                                        </div>
                                                    </MudLink>
                                                </MudMenuItem>
                                            }
                                        </ChildContent>
                                    </MudMenu>
                                }
                                else
                                {
                                    <MudMenuItem OnClick="@(() => HandleProfileMenuClick(item))" Class="menu-item">
                                        <div class="menu-item-content">
                                            <img src="@item.ImageSrc" alt="@item.Text" class="menu-item-icon" />
                                            <span class="menu-item-text @(item.Text == "Logout" ? "logout-item" : "")">@item.Text</span>
                                        </div>
                                    </MudMenuItem>
                                }
                            }
                        }
                        else
                        {
                        <MudButton id="loginButton" Variant="Variant.Outlined" Color="Color.Warning"
                                        StartIcon="@Icons.Material.Filled.Login"
                                        Style="margin: 8px 12px 8px 12px; color: #ff7b00; border-color: #ff7b00; width: calc(100% - 24px); font-weight: bold;text-transform: capitalize;"
                                        OnClick="@GoToLogin" Class="no-capitalize">
                                        Login
                                    </MudButton>

                                    <MudButton id="SignupButton" Variant="Variant.Filled" Color="Color.Warning"
                                        StartIcon="@Icons.Material.Filled.PersonAdd"
                                        Style="margin: 8px 12px; background-color: #ff7b00; color: white; width: calc(100% - 24px); font-weight: bold;text-transform: capitalize;"
                                        OnClick="@GoToRegister" Class="no-capitalize">
                                        Sign Up
                                    </MudButton>
                        }
                    </div>
                </ChildContent>
            </MudMenu>
        </div>
    </div>
</header>

<main class="main-content">
    @Body
    <Footer DarkMode="@_isDarkMode" />
</main>


@code {
    private bool showMobileMenu = false;
    public string Name { get; set; } = String.Empty;
    public string Email { get; set; } = String.Empty;
    public string Alias { get; set; } = String.Empty;
    public bool IsLoggedIn { get; set; } = false;
    public int CurrentUserId { get; set; }
    private bool showDashboards = false;
    private NavigationPath navigationPath;
    private List<MenuItem> profileMenuItems = new();
    private List<MenuItem> nestedProfileMenuItems = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    // Menu Items with UserID
    public string ClassifiedsProfileMenuUrl { get; set; } = string.Empty;
    public string JobsProfileMenu { get; set; } = string.Empty;
    public string MyProfileMenu { get; set; } = string.Empty;
    public string MySavedAdsProfileMenu { get; set; } = string.Empty;
    public string ManageMyAdsProfileMenu { get; set; } = string.Empty;
    private MudTheme CustomTheme;

    // Menu items with Alias
    public string ServicesProfileMenu { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        var customLightPalette = new PaletteLight()
        {
            Primary = "#FF7F38"
        };

        var customDarkPalette = new PaletteDark()
        {
            Primary = "#FF7F38"
        };

        CustomTheme = new MudTheme()
        {
            PaletteLight = customLightPalette,
            PaletteDark = customDarkPalette,
        };
        navigationPath = options.Value;

        var authState = await CookieAuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            var user = authState.User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                Name = user.FindFirst(ClaimTypes.Name)?.Value;
                Email = user.FindFirst(ClaimTypes.Email)?.Value ?? user.FindFirst("email")?.Value;
                Alias = user.FindFirst("alias")?.Value;
                CurrentUserId = int.TryParse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value, out var uid) ? uid : 0;
                IsLoggedIn = true;
                SetProfileMenu();
            }
        }

        // Nested dashboard items
        nestedProfileMenuItems = new List<MenuItem>
    {
        new MenuItem { Text = "Properties", ImageSrc = "/qln-images/post-icons/ad_properties.svg", Route = navigationPath.PropertiesProfileMenu },
        new MenuItem { Text = "Vehicles", ImageSrc = "/qln-images/post-icons/ad_vehicles.svg", Route = navigationPath.VehiclesProfileMenu },
        new MenuItem { Text = "Classifieds", ImageSrc = "/qln-images/post-icons/ad_classifieds.svg", Route = ClassifiedsProfileMenuUrl },
        new MenuItem { Text = "Services", ImageSrc = "/qln-images/post-icons/ad_services.svg", Route = ServicesProfileMenu },
        new MenuItem { Text = "Jobs", ImageSrc = "/qln-images/post-icons/ad_jobs.svg", Route = JobsProfileMenu },
        new MenuItem { Text = "Rewards", ImageSrc = "/qln-images/post-icons/ad_rewards.svg", Route = navigationPath.RewardsProfileMenu }
    };

        // Top-level profile items
        profileMenuItems = new List<MenuItem>
    {
        new MenuItem { Text = "My account", ImageSrc = "/qln-images/header/my_account_icon.svg", Route = MyProfileMenu },
        new MenuItem { Text = "My saved ads", ImageSrc = "/qln-images/header/my_saved_ad_icon.svg", Route = MySavedAdsProfileMenu },
        new MenuItem { Text = "My saved searches", ImageSrc = "/qln-images/header/my _saved_searches_icon.svg", Route = MySavedAdsProfileMenu },
        new MenuItem { Text = "Dashboards", ImageSrc = "/qln-images/header/dashboards_icon.svg", Route = null },
        new MenuItem { Text = "Manage my ads", ImageSrc = "/qln-images/header/manage_my_ads_icon.svg", Route = ManageMyAdsProfileMenu },
        new MenuItem { Text = "Logout", ImageSrc = "/qln-images/header/logout_icon.svg", Route = null }
    };

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
            // return; // may be the login bug as this would exist out of running anything else in the method.
        }

        var authState = await CookieAuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null)
        {
            var user = authState.User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                Name = user.FindFirst(ClaimTypes.Name)?.Value;
                Email = user.FindFirst(ClaimTypes.Email)?.Value ?? user.FindFirst("email")?.Value;
                Alias = user.FindFirst("alias")?.Value;
                CurrentUserId = int.TryParse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value, out var uid) ? uid : 0;
                IsLoggedIn = true;
                SetProfileMenu();
            }
            else
            {
                IsLoggedIn = false;
            }
        }
        else
        {
            IsLoggedIn = false;
        }
        StateHasChanged();
    }

    private void ToggleMobileMenu()
    {
        showMobileMenu = !showMobileMenu;
    }

    private void GoToFavourites()
    {
        // Get WishList Url from AppSettings.Json
        string wishListURLBase = navigationPath.WishlistBase;
        // Replace UserID with Current UserID
        string wishListURL =  wishListURLBase.Replace("<USER_ID>", $"{CurrentUserId}");
        // Navigate
        NavManager.NavigateTo(wishListURL, forceLoad: true);
    }

    private void GoToProfile()
    {
        NavManager.NavigateTo(navigationPath.Profile, forceLoad: true);
    }

    private void GoToRegister()
    {
        var destination = GetDestination();

        NavManager.NavigateTo($"{navigationPath.Register}?destination={destination}", forceLoad: true);
    }

    private void GoToLogin()
    {
        var destination = GetDestination();

        NavManager.NavigateTo($"{navigationPath.Login}?destination={destination}", forceLoad: true); // true = force reload
    }

    public void GoToLogout()
    {
        // CookieAuthenticationStateProvider.LogoutUser();
        Name = string.Empty;
        Email = string.Empty;
        CurrentUserId = 0;
        IsLoggedIn = false;

        var destination = GetDestination();

        NavManager.NavigateTo($"{navigationPath.Logout}?destination={destination}", forceLoad: true);
    }

    private string GetDestination()
    {
        // string the first value which is always a "/"
        var destination = new Uri(NavManager.Uri).AbsolutePath.Substring(1);

        if (string.IsNullOrEmpty(destination)) return "content/daily"; // default to this value

        return destination;
    }

    private void OnPostAdClicked()
    {
        if (IsLoggedIn)
        {

            NavManager.NavigateTo(navigationPath.PostAd, forceLoad: true);
        }
        else
        {

            GoToLogin();
        }

    }

    private void HandleProfileMenuClick(MenuItem item)
    {
        if (item.Text == "Logout")
        {
            GoToLogout(); // No navigation
        }
        else if (!string.IsNullOrEmpty(item.Route))
        {
            NavManager.NavigateTo(item.Route, forceLoad: true);
        }
    }


    private void SetProfileMenu()
    {
        // Replace UserID
        MyProfileMenu = ReplaceUrlWithUserID(navigationPath.MyProfileMenu, CurrentUserId);
        MySavedAdsProfileMenu = ReplaceUrlWithUserID(navigationPath.MySavedAdsProfileMenu, CurrentUserId);
        ManageMyAdsProfileMenu = ReplaceUrlWithUserID(navigationPath.ManageMyAdsProfileMenu, CurrentUserId);
        JobsProfileMenu = ReplaceUrlWithUserID(navigationPath.JobsProfileMenu, CurrentUserId);

        // Replace Alias
        ServicesProfileMenu = ReplaceUrlWithAlias(navigationPath.ServicesProfileMenu, Alias);
        ClassifiedsProfileMenuUrl =  ReplaceUrlWithAlias(navigationPath.ClassifiedsProfileMenu, Alias);
    }

    private string ReplaceUrlWithUserID(string url,int userID)
    {
        return url.Replace("<USER_ID>", $"{userID}");
    }

    private string ReplaceUrlWithAlias(string url, string alias)
    {
        return url.Replace("<ALIAS>", $"{alias}");
    }
}

<style>
    .mobile-menu-button {
        display: none;
        color: white;
    }

    .desktop-post-btn {
        display: inline-flex;
    }

    .post-button-wrapper {
        margin: 0
    }

    .header-container {
        max-width: 1170px;
        margin: 0 auto;
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative
    }

    .mobile-post-icon {
        display: none;
        width: 25px;
        height: 25px;
        cursor: pointer;
    }

    .menu-item {
        padding: 0;
        min-height: 40px;
    }

    .menu-item-content {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 16px;
        font-family: public-sans, sans-serif;
        border-bottom: 1px solid #EAECF0;
        padding: 8px 30px;
        width: 100%;
    }

      .nested-menu-item-content {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        gap: 16px;
        font-family: public-sans, sans-serif;
        border-bottom: 1px solid #EAECF0;
        padding: 8px 30px;
        width: 100%;
    }
    .nested-menu-item-list-content{
         display: flex;
        justify-content: flex-start;
        align-items: ;
        gap: 16px;
        font-family: public-sans, sans-serif;
        border-bottom: 1px solid #EAECF0;
        padding: 8px 50px 8px 20px;
        width: 100%;
    }

    .menu-item:last-child .menu-item-content {
        border-bottom: none;
    }
    .menu-item:last-child .nested-menu-item-list-content {
        border-bottom: none;
    }

    .menu-item-icon {
        width: 22px;
        height: 22px;
        object-fit: contain;
    }
    .nested-icon-color {
           filter: brightness(0) saturate(100%) invert(38%) sepia(10%) saturate(1192%) hue-rotate(174deg) brightness(91%) contrast(86%);
    }
    .menu-item-text {
        font-size: 13px;
        font-weight: 500;
        color: var(--color-text-heading);
        flex-grow: 1;
    }
    .vertical-button-group {
    display: flex;
    flex-direction: column;
    }

    .post-ad-text {
        text-decoration: none;
        font-weight: 600;
        font-size: 14px;
        letter-spacing: 0.5px;
        text-transform: none !important;
    }

    .nav-link {
        color: white;
        text-decoration: none;
        font-size: 14px;
        font-weight: 500;
        font-family: 'Public Sans', sans-serif;
    }

    .nav-link.active {
        color: #FF7F38;
    }

    .avatar-custom {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2px;
        background-color: #D6E8F2;
    }
   .fav-avatar-custom{
     display: flex;
        justify-content: center;
        align-items: center;
        padding: 2px;
        background-color: #D6E8F2;
   }

    .fav-avatar-icon{
         width: 24px;
        height: 24px;
        display: none;
    }

    .avatar-icon {
        width: 24px;
        height: 24px;
    }

    .logo-img {
        width: 126px;
        height: 48px;
    }
    .nav-main-conainer{
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .nav-container{
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-direction: row;
    }
    .logout-item {
    color: #F04438 !important;
}


.menu-username {
    font-weight: 600;
    padding: 12px 16px 5px 20px;
    font-size: 14px;
    color: #101828;
    width: 100%;
}
    /* Responsive media query: shrink avatar icons on larger screens (>450px) */
    @@media (max-width: 450px) {
        .avatar-icon {
            width: 20px;
            height: 20px;
        }

        .logo-img {
            width: 80px;
            height: 30px;
        }
    }


    @@media (max-width: 1000px) {
        .desktop-post-btn {
            display: none !important;
        }
        .nav-main-conainer{
            display: none !important;
        }
        .fav-avatar-icon{
            display:  inline-block !important;
        }
        .mobile-post-icon {
            display: inline-block !important;
        }
        .fav-avatar-custom{
            display: none !important;
        }
        #userIcon {
            display: none !important;

        }

        .mobile-menu-button {
            display: block;
        }


        .nav-container {
            display: none !important;
        }
 

    }
</style>
