@using QLN.Web.Shared.Components.NewCustomSelect
@using MudBlazor
@using QLN.Web.Shared.Contracts
<MudDialog MaxWidth="MaxWidth.Small" FullWidth="true"
           CloseOnEscapeKey="true" CloseOnBackdropClick="true"
           Style="min-height: 220px; max-height: 220px;">
    <TitleContent>
        Create Forum Post
    </TitleContent>
    <DialogContent>
 <NewCustomSelect TItem="SelectOption"
                             Items="@CategorySelectOptions"
                             Label="Category"
                             Placeholder="Choose"
                             SelectedId="@SelectedCategoryId"
                             SelectedIdChanged="@OnCategoryChange"
                             GetLabel="x => x.Label"
                             GetId="x => x.Id"
                             BorderRadius="0px" />

        <div style="margin-top:24px; width:100%; display:flex; justify-content:flex-end; gap:8px;">
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="RedirectToPostPage">Post</MudButton>
        </div>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Inject] protected ISnackbar Snackbar { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }
    [Parameter] public EventCallback<Dictionary<string, object>> OnSearchCompleted { get; set; }
    [Parameter] public EventCallback<string> OnCategoryChanged { get; set; }



    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
    protected string selectedCategory;
    protected bool loading = false;

    protected string SelectedCategoryId { get; set; }

    protected List<SelectOption> CategorySelectOptions { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            CategorySelectOptions = await CommunityService.GetForumCategoriesAsync();
            
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load categories", Severity.Error);
            Console.WriteLine(ex.Message);
            CategorySelectOptions = new List<SelectOption>();
        }
    }


    protected void OnCategoryChange(string newId)
    {
        SelectedCategoryId = newId;
        Console.WriteLine($"Category changed: {SelectedCategoryId}");
        OnCategoryChanged.InvokeAsync(newId);
    }

    protected async Task RedirectToPostPage()
    {
        if (!string.IsNullOrEmpty(SelectedCategoryId))
        {
            var success = await CommunityService.PostSelectedCategoryAsync(SelectedCategoryId);

            if (success)
            {
                Snackbar.Add("Post was successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to post the selected category.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please select a category before continuing.", Severity.Warning);
        }
    }


}
