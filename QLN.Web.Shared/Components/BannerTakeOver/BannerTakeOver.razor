@using QLN.Common.Infrastructure.DTO_s
@using QLN.Web.Shared.Components.QLAnalytics
@using QLN.Web.Shared.Services
@using Microsoft.Extensions.Logging
@inject ILogger<BannerTakeOver> Logger
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div id="banner-take" class="banner-wrapper">
    <div class="take-carousel-container">
        <div class="take-slides-wrapper" style="transform: translateX(-@($"{CurrentIndex * 100}%"))">
            @foreach (var (banner, index) in BannersToRender.Select((b, i) => (b, i)))
            {
                var id = $"banner-{banner.Code}-{index}";
                <div class="take-carousel-slide" id="@id" data-code="@banner.Code" data-duration="@banner.Duration">
                    @if (!string.IsNullOrWhiteSpace(banner.Link))
                    {
                        <a href="@banner.Link"
                           target="_blank"
                           rel="noopener noreferrer"
                           @onmouseenter="PauseRotation"
                           @onmouseleave="ResumeRotation">
                            <img class="banner-image @(NoBorder ? "no-border" : "")"
                                 src="@banner.ImageDesktop"
                                 data-mobile="@banner.ImageMobile"
                                 data-desktop="@banner.ImageDesktop"
                                 alt="@banner.Alt"
                                 @onclick="@(() => TriggerBannerAnalytics(banner, "click"))" />
                        </a>
                    }
                    else
                    {
                        <img class="banner-image @(NoBorder ? "no-border" : "")"
                             src="@banner.ImageDesktop"
                             data-mobile="@banner.ImageMobile"
                             data-desktop="@banner.ImageDesktop"
                             alt="@banner.Alt"
                             @onclick="@(() => TriggerBannerAnalytics(banner, "click"))" />
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (AnalyticsProps != null)
{
    <QLAnalytics @key="AnalyticsKey" AnalyticsProps="@AnalyticsProps" />
}

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = new();
    [Parameter] public bool Loading { get; set; }

    private List<BannerItem> BannersToRender => BannerItems.Count == 1
        ? new() { BannerItems[0], BannerItems[0] }
        : BannerItems;

    private int CurrentIndex = 0;
    private QLAnalyticsCallProps? AnalyticsProps;
    private string AnalyticsKey = Guid.NewGuid().ToString();
    private DotNetObjectReference<BannerTakeOver>? _dotNetRef;
    private System.Threading.Timer? _rotationTimer;
    private bool _isPaused = false;

    [Parameter]
    public bool NoBorder { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && BannersToRender.Any())
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setupTakeOverBannerTracking", _dotNetRef);
            ScheduleNextSlide();
        }
    }

    private void ScheduleNextSlide()
    {
        var currentBanner = BannersToRender[CurrentIndex];
        if (!int.TryParse(currentBanner.Duration, out int seconds) || seconds <= 0)
        {
            seconds = 5;
        }

        _rotationTimer?.Dispose();
        _rotationTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                CurrentIndex = (CurrentIndex + 1) % BannersToRender.Count;
                StateHasChanged();
                ScheduleNextSlide();
            });
        }, null, seconds * 1000, Timeout.Infinite);
    }

    private void PauseRotation()
    {
        _rotationTimer?.Dispose();
        _rotationTimer = null;
        _isPaused = true;
    }

    private void ResumeRotation()
    {
        if (!_isPaused) return;
        _isPaused = false;
        ScheduleNextSlide();
    }

    [JSInvokable("TrackBannerTakeOver")]
    public Task TrackBannerEvent(string bannerCode, string? duration, string eventType)
    {
        @* Logger.LogInformation("Triggering banner analytics: {EventType}, {BannerCode}, Duration: {Duration}",
            eventType, bannerCode, duration ?? "N/A"); *@

        AnalyticsProps = new QLAnalyticsCallProps
        {
            Action = eventType == "view" ? "AutoBannerImpression" : "AutoBannerClick",
            AnalyticType = eventType == "view"
                ? (int)AnalyticType.VIEW_BANNER_IMPRESSION
                : (int)AnalyticType.BANNER_CLICK,
            Url = new Uri(NavigationManager.Uri).AbsolutePath,
            Lead = AnalyticsLead.SMS_REVEAL,
            VerticalTag = (int)VerticalTag.VEHICLES, // Hot Fix You need to send vertical = 1 always so that it should store into vehicles stats server for now
            AdditionalTag = new Dictionary<string, string>
            {
                { "BannerCode", bannerCode },
                { "Duration", duration ?? "N/A" }
            }
        };

        AnalyticsKey = Guid.NewGuid().ToString();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void TriggerBannerAnalytics(BannerItem banner, string eventType)
    {
        _ = TrackBannerEvent(banner.Code!, banner.Duration, eventType);
    }

    public void Dispose()
    {
        _rotationTimer?.Dispose();
        _dotNetRef?.Dispose();
    }
}

<style>
.take-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    height: 150px;
}

.take-slides-wrapper {
    display: flex;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    width: 100%;
    height: 100%;
}

.take-carousel-slide {
    flex: 0 0 100%;
    height: 100%;
}

.banner-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 3px;
}

    .no-border {
        border: none !important;
        border-radius: 0 !important;
    }

@@media (max-width: 768px) {
    .take-carousel-container {
        height: 150px;
    }

    .banner-image {
        height: auto;
        max-height: 220px;
    }
    
}

</style>
