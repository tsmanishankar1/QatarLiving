@using MudBlazor 
@using QLN.Web.Shared.Components.NewCustomSelect
@using QLN.Web.Shared.Components.CustomInput
@using QLN.Common.DTO_s;
@using MudExRichTextEditor
@typeparam TItem

<div class="form-section">
    <h3 class="form-heading">Ad Category</h3>
    <div class="form-group">
       <NewCustomSelect TItem="OptionItem"
            Items="@categoryOptions"
            SelectedId="@selectedVertical"
            SelectedIdChanged="OnVerticalChanged"
            GetId="x => x.Id"
            GetLabel="x => x.Label"
            Label="Subvertical"
            Placeholder="Choose" />

    </div>
</div>

@if (!string.IsNullOrEmpty(selectedVertical))
{
    var selectedCategory = CategoryTrees.FirstOrDefault(x => x.Id.ToString() == selectedCategoryId);
    var selectedSubcategory = selectedCategory?.Children?.FirstOrDefault(x => x.Id.ToString() == selectedSubcategoryId);
    var selectedSubSubcategory = selectedSubcategory?.Children?.FirstOrDefault(x => x.Id.ToString() == selectedSubSubcategoryId);
    var fields = selectedSubSubcategory?.Fields ?? selectedSubcategory?.Fields ?? selectedCategory?.Fields;

    var allowedFields = new[] { "Condition", "Ram", "Model", "Capacity", "Processor", "Brand", "Storage", "Colour", "Gender", "Resolution", "Coverage" };

    <div class="form-section">
        <h6 class="form-heading">Ad Information</h6>
        <div class="form-group">
             <NewCustomSelect TItem="CategoryTreeDto"
                     Items="@CategoryTrees"
                     GetId="x => x.Id.ToString()"
                     GetLabel="x => x.Name"
                     Label="Category"
                     Placeholder="Choose"
                     SelectedId="@selectedCategoryId"
                     SelectedIdChanged="OnCategoryChanged" />
        </div>
            @if (selectedCategory?.Children?.Any() == true)
            {
                <div class="form-group">
                    <NewCustomSelect TItem="CategoryTreeDto"
                                    Items="@selectedCategory.Children"
                                    GetId="x => x.Id.ToString()"
                                    GetLabel="x => x.Name"
                                    Label="Subcategory"
                                    Placeholder="Choose"
                                    SelectedId="@selectedSubcategoryId"
                                    SelectedIdChanged="OnSubcategoryChanged" />
                </div>
            }

            @if (selectedSubcategory?.Children?.Any() == true)
            {
                <div class="form-group">
                    <NewCustomSelect TItem="CategoryTreeDto"
                                    Items="@selectedSubcategory.Children"
                                    GetId="x => x.Id.ToString()"
                                    GetLabel="x => x.Name"
                                    Label="Sub Subcategory"
                                    Placeholder="Choose"
                                    SelectedId="@selectedSubSubcategoryId"
                                    SelectedIdChanged="OnSubSubcategoryChanged" />
                </div>
            }

        @if (fields != null)
        {
            @foreach (var field in fields)
            {
                if (allowedFields.Contains(field.Name))
                {
                    <div class="form-group">
                        <NewCustomSelect TItem="OptionItem"
                                          Items="field.Options.Select(opt => new OptionItem { Id = opt, Label = opt }).ToList()"
                                          GetId="x => x.Id"
                                          GetLabel="x => x.Label"
                                          Label="@field.Name"
                                          Placeholder="Choose" />
                    </div>
                }
            }
        }
    </div>
  <div class="form-section">
        <h6 class="form-heading">Description and Features</h6>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Title" @bind-Value="title" />
        </div>
      
            <div class="form-group">
            <CustomInput TItem="string" Placeholder="Certificate / Warranty" @bind-Value="certificate" />

        </div>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Battery Percentage" @bind-Value="batteryPercentage" TextRight="%" />
        </div>
         <MudExRichTextEdit @bind-Value="itemDescription"
                                       Height="300"
                                       Class="description-input no-underline"
                                       Placeholder="Write your business description..." />
    </div>

    <div class="form-section">
        <h6 class="form-heading">Contact Details</h6>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Phone Number" @bind-Value="phone" />
        </div>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="WhatsApp Number" @bind-Value="whatsapp" />
        </div>
    </div>

    <div class="form-section">
        <h6 class="form-heading">Location</h6>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Zone" @bind-Value="zone" />
        </div>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Street Number" @bind-Value="streetNumber" />
        </div>
        <div class="form-group">
            <CustomInput TItem="string" Placeholder="Building Number" @bind-Value="buildingNumber" />
        </div>
          <div class="map-container">
            <iframe 
                class="map-frame"
                width="100%" 
                height="300" 
                frameborder="0" 
                scrolling="no" 
                marginheight="0" 
                marginwidth="0"
                src="https://www.openstreetmap.org/export/embed.html?bbox=51.5318%2C25.2840%2C51.5378%2C25.2880&layer=mapnik&marker=25.2860%2C51.5348">
            </iframe>
        </div>

         <div class="checkbox-section">
        <div class="checkbox-left">
            <MudCheckBox @bind-Value="isAgreed" Color="Color.Primary" />
        </div>
        <div class="checkbox-right">
            <span>
                I agree to the 
                <a href="https://www.qatarliving.com/rules" target="_blank">Rules for Advertising</a> 
                on Qatar Living and the 
                <a href="https://www.qatarliving.com/terms" target="_blank">Terms of Use</a>.
            </span>
        </div>
    </div>
    </div>
}

@code {
    public string selectedVertical, selectedCategoryId, selectedSubcategoryId, selectedSubSubcategoryId;
    public string certificate,batteryPercentage,title, description, phone, whatsapp, zone, streetNumber, buildingNumber;

    [Parameter] public List<CategoryTreeDto> CategoryTrees { get; set; }
    [Parameter] public EventCallback<string> CategoryChanged { get; set; }

 private bool isAgreed;
 private string itemDescription;
   private async Task OnVerticalChanged(string newValue)
{
    selectedVertical = newValue;
    await CategoryChanged.InvokeAsync(newValue);
}

private async Task OnCategoryChanged(string newValue)
{
    selectedCategoryId = newValue;
    selectedSubcategoryId = null; // Reset sub-levels
    selectedSubSubcategoryId = null;
}

private async Task OnSubcategoryChanged(string newValue)
{
    selectedSubcategoryId = newValue;
    selectedSubSubcategoryId = null; // Reset child level
}

private async Task OnSubSubcategoryChanged(string newValue)
{
    selectedSubSubcategoryId = newValue;
}

    public class OptionItem
    {
        public string Id { get; set; }
        public string Label { get; set; }
    }

    public List<OptionItem> categoryOptions = new()
    {
        new OptionItem { Id = "items", Label = "Items" },
        new OptionItem { Id = "preloved", Label = "Preloved" },
        new OptionItem { Id = "collectables", Label = "Collectables" },
        new OptionItem { Id = "deals", Label = "Deals" }
    };
}

<style>
    .form-section {
        margin-bottom: 2rem;
        font-family: 'Public Sans', sans-serif;
    }

    .form-heading {
        color: var(--color-primary);
        font-size: 18px;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .form-group {
        margin-bottom: 1rem;
    }
    .map-container {
        width: 100%;
        overflow: hidden;
        border: 1px solid #D0D5DD;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }


.map-frame {
    width: 100%;
    height: 300px;
    border: none;
}

    .checkbox-section {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .checkbox-left {
        flex-shrink: 0;
    }

    .checkbox-right {
        font-size: 14px;
        color: #444;
    }

    .checkbox-right a {
        color: #F37021;
        text-decoration: none;
        font-weight: 500;
    }

    .checkbox-right a:hover {
        text-decoration: underline;
    }


    /* Optional: Responsive spacing or alignment */
    @@media (min-width: 768px) {
        .form-group {
            max-width: 500px;
        }
    }
</style>
