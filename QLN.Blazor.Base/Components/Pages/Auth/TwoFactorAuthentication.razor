@page "/two-factor-authentication"
@inject NavigationManager NavManager
@using MudBlazor
@inject ISnackbar Snackbar
@inject ApiService Api
@using QLN.Blazor.Base.Services
@inject UserState UserState
@using MudBlazor.Components
@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog

@if (VerificationSucesss){
    <div class="popup-overlay">
       <ModalDialog
        Title="Verification Successful" 
        Description="Your email has been successfully verified."
        ButtonName="Continue"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
    </div> 
}
<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
    
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5" Align="Align.Center">Two-Factor Authentication</MudText>

        <MudText Typo="Typo.caption" Align="Align.Center">
            We've sent a verification code to your mail ending in @UserState.Email
        </MudText>

        <MudTextField T="string"
              Label="Verification Code"
              Variant="Variant.Outlined"
              FullWidth="true"
              InputType="InputType.Text"
              MaxLength="6"
              @bind-Value="_code"
              Style="background-color: #FFFFFF;"
              Required="true"
               />

        
         <CustomButton 
    BackgroundColor="#FF7F38"
    TextColor="#FFFFFF"
    Text="Verify"
    Disabled="_isLoading"
    Loading="_isLoading"
    OnClick="@VerifyCode"
    Class="mt-4" />



        <MudText Align="Align.Center" Class="mt-4">
Didn't receive a code?
<MudLink Href="/signup" Class="ml-1" Style="color: #FF7F38;">Resend</MudLink>
    </MudText>
        <MudText Align="Align.Center"
                 Class="mud-clickable mt-2"
                 Style="color: #FF7F38; cursor: pointer;" 
                 @onclick="NavigateToForgotPassword">
                 Use another verification method
        </MudText>
    </MudStack>
</div>
</div>
@code {
    private string _input = string.Empty;
    private string _code = string.Empty;
    private bool _isLoading = false;
    private bool _checked;
    private bool VerificationSucesss = false;
    [Parameter] public EventCallback OnClose { get; set; }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
    

    private void NavigateToForgotPassword()
    {
        NavManager.NavigateTo("/login");
    }
    private void RestrictToDigits(ChangeEventArgs e)
{
    string input = e.Value?.ToString() ?? "";
    if (input.All(char.IsDigit) && input.Length <= 6)
    {
        _code = input;
    }
}

    private bool _hasError = false;
private string _errorMessage = string.Empty;

private async Task VerifyCode()
{
    _isLoading = true;
    _hasError = false;
    _errorMessage = string.Empty;

    if (string.IsNullOrWhiteSpace(_code))
    {
        _hasError = true;
        _errorMessage = "Please enter the verification code.";
        _isLoading = false;
        return;
    }

    try
    {
        var payload = new { usernameOrEmailOrPhone = UserState.Email, twoFactorCode = _code };
        var res = await Api.PostAsync<object, ResponseModel<object>>("auth/verify-2fa", payload);

        if (res?.Status == true)
        {
            VerificationSucesss = true;
            @* Snackbar.Add("Signup successful!", Severity.Success); *@
            @* NavManager.NavigateTo("/"); *@
        }
        else
        {
            _hasError = true;
            _errorMessage = res?.Message ?? "Invalid verification code.";
            Snackbar.Add(_errorMessage, Severity.Warning);
        }
    }
    catch (Exception ex)
    {
        _hasError = true;
        _errorMessage = $"Signup failed: {ex.Message}";
        Snackbar.Add(_errorMessage, Severity.Error);
    }
    finally
    {
        _isLoading = false;
    }
}
private void CloseVerificationPopup()
{
    VerificationSucesss = false;
    NavManager.NavigateTo("/classifieds");
}
}

<style>
    .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; 
}

</style>