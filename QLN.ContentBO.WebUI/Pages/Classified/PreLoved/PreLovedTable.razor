@inherits PreLovedTableBase
@using QLN.ContentBO.WebUI.Components.ToggleTabs
@using MudBlazor
@using QLN.ContentBO.WebUI.Components.PaginationFooter
@using QLN.ContentBO.WebUI.Extensions
@using QLN.ContentBO.WebUI.Models
@using QLN.ContentBO.WebUI.Components.EmptyCard

<MudPaper Class="pa-4">

    <ToggleTabs Options="@tabOptions"
                ActiveValue="@_activeTab"
                OnChange="HandleTabChanged" />
    @if (IsLoading)
    {
        <MudSkeleton Height="40px" Width="100%" Count="10" />
    }
    else if (IsEmpty)
    {
        <div class="empty-card-wrapper">
            <EmptyCard Title="No p2p listing found" Subtitle="Please check back later " />
        </div>
    }
    else
    {

        <div class="tab-content">
            @if (SelectedListings.Count > 0)
            {
                <div class="action-buttons">
                    @if (SelectedTab == ((int)AdStatus.PendingApproval).ToString())
                    {
                        <MudButton Class="capitalize-button" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check"
                                   OnClick='() => ShowConfirmation("Approve Items", "Are you sure you want to approve selected Items?", "Approve", ApproveSelected)'>
                            Approve
                        </MudButton>
                    }
                    @if (SelectedTab == ((int)AdStatus.Published).ToString())
                    {
                        <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.VisibilityOff"
                                   OnClick='() => ShowConfirmation("Unpublish Items", "Are you sure you want to unpublish selected Items?", "Unpublish", UnpublishSelected)'>
                            Unpublish
                        </MudButton>
                        <MudButton Class="capitalize-button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Close"
                                   OnClick='() => ShowConfirmation("Remove Items", "Are you sure you want to remove selected Items?", "Remove", RemoveSelected)'>
                            Remove
                        </MudButton>
                    }
                    @if (SelectedTab == ((int)AdStatus.Unpublished).ToString())
                    {
                        <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.RemoveRedEye"
                                   OnClick='() => ShowConfirmation("Publish Items", "Are you sure you want to publish selected Items?", "Publish", PublishSelected)'>
                            Publish
                        </MudButton>
                        <MudButton Class="capitalize-button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Close"
                                   OnClick='() => ShowConfirmation("Remove Items", "Are you sure you want to remove selected Items?", "Remove", RemoveSelected)'>
                            Remove
                        </MudButton>
                    }

                    @if (SelectedTab == "promoted")
                    {
                        <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled"
                                   OnClick='() => ShowConfirmation("Unpromote Items", "Are you sure you want to unpromote selected Items?", "Unpromote", UnpromoteSelected)'>
                            Unpromote
                        </MudButton>
                    }

                    @if (SelectedTab == "featured")
                    {
                        <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled"
                                   OnClick='() => ShowConfirmation("Unfeature Items", "Are you sure you want to unfeature selected Items?", "Unfeature", UnfeatureSelected)'>
                            Unfeature
                        </MudButton>
                    }


                </div>

                <div class="alert-container">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" />
                    @($"{SelectedListings.Count} item(s) selected.")
                </div>
            }
        </div>

        <MudDataGrid T="P2pListingModal"
                     Items="@Listings"
                     Hover="true"
                     Bordered="true"
                     Elevation="0"
                     Dense="true"
                     Filterable="true"
                     MultiSelection="true"
                     RowCheckBoxVisible="true"
                     @bind-SelectedItems="SelectedListings"
                     Class="mud-table event-custom-table">

            <Columns>
                <TemplateColumn Title="S.No.">
                    <CellTemplate>
                        @(Listings.IndexOf(context.Item) + 1)
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Item Image">
                    <CellTemplate>
                        <img src="@context.Item.ImageUpload?.FirstOrDefault()?.Url"
                             style="width: 64px; height: 64px; object-fit: cover; border-radius: 4px;" />
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Ad ID">
                    <CellTemplate>
                        <MudLink Href="#"> @(string.IsNullOrWhiteSpace(context.Item.Id) ? "-" : context.Item.Id)</MudLink>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Ad Title">
                    <CellTemplate>
                        <MudLink Href="#"> @(string.IsNullOrWhiteSpace(context.Item.AdTitle) ? "-" : context.Item.AdTitle)</MudLink>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="User Id">
                    <CellTemplate>
                        @(string.IsNullOrWhiteSpace(context.Item.UserId) ? "-" : context.Item.UserId)
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.UserName" Title="User Name">
                    <CellTemplate>
                        @(string.IsNullOrWhiteSpace(context.Item.UserName) ? "-" : context.Item.UserName)
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Category" Title="Category">
                    <CellTemplate>
                        @(string.IsNullOrWhiteSpace(context.Item.Category) ? "-" : context.Item.Category)
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.SubCategory" Title="Sub Category">
                    <CellTemplate>
                        @(string.IsNullOrWhiteSpace(context.Item.SubCategory) ? "-" : context.Item.SubCategory)
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.Section" Title="Section">
                    <CellTemplate>
                        @(string.IsNullOrWhiteSpace(context.Item.Section) ? "-" : context.Item.Section)
                    </CellTemplate>
                </PropertyColumn>
                <TemplateColumn Title="Creation Date">
                    <CellTemplate>
                        @context.Item.CreationDate.ToQatarTime("dd-MM-yyyy")
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Date Published">
                    <CellTemplate>
                        @(context.Item.DatePublished?.ToQatarTime("dd-MM-yyyy") ?? "-")
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Date Expiry">
                    <CellTemplate>
                        @(context.Item.DateExpiry?.ToQatarTime("dd-MM-yyyy") ?? "-")
                    </CellTemplate>
                </TemplateColumn>

              
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudMenu Class="mud-table-menu" Icon="@Icons.Material.Filled.MoreVert" Dense="true" AnchorOrigin="Origin.BottomLeft"
                                 TransformOrigin="Origin.BottomLeft">
@*                             @if (SelectedTab != ((int)AdStatus.Published).ToString())
                            {
                                <MudMenuItem OnClick="() => OnEdit(context.Item)">
                                    <img src="/qln-images/edit_dark_icon.svg" class="menu-icon-style" alt="Ignore" />
                                    <span class="menu-text">Edit</span>
                                </MudMenuItem>
                                <MudMenuItem OnClick="() => OnPreview(context.Item)">
                                    <img src="/qln-images/preview_icon.svg" class="menu-icon-style" alt="Ignore" />
                                    <span class="menu-text">Preview</span>
                                </MudMenuItem>
                            } *@
                         

                            @if (SelectedTab == ((int)AdStatus.PendingApproval).ToString())
                            {
                                <MudMenuItem OnClick='() => ShowConfirmation("Approve Item", "Are you sure you want to approve this item?", "Approve", () => Approve(context.Item))'>
                                    <img src="/qln-images/approve_icon.svg" class="menu-icon-style" />
                                    <span class="menu-text">Approve</span>
                                </MudMenuItem>
                                <MudMenuItem OnClick='() => ShowConfirmation("Need Changes", "Request changes?", "Request", () => RequestChanges(context.Item))'>
                                    <img src="/qln-images/remove_icon.svg" class="menu-icon-style" />
                                    <span class="menu-text">Need Changes</span>
                                </MudMenuItem>
                            }

                            @if (SelectedTab == ((int)AdStatus.Published).ToString())
                            {
                                <MudMenuItem OnClick='() => ShowConfirmation("Unpublish Item", "Are you sure you want to unpublish this item?", "Unpublish", () => Unpublish(context.Item))'>
                                    <img src="/qln-images/eye_close_icon.svg" class="menu-icon-style" />
                                    <span class="menu-text">Unpublish</span>
                                </MudMenuItem>
                                <MudMenuItem OnClick='() => ShowConfirmation("Remove Item", "Are you sure you want to remove this item?", "Remove", () => OnRemove(context.Item))'
                                             Class="mud-text-error">
                                    <img src="/qln-images/remove_icon.svg" class="menu-icon-style" />
                                    <span class="menu-text">Remove</span>
                                </MudMenuItem>
                            }
                            @if (SelectedTab == ((int)AdStatus.Unpublished).ToString())
                            {
                                <MudMenuItem OnClick='() => ShowConfirmation("Publish Item", "Are you sure you want to publish this item?", "Publish", () => Publish(context.Item))'>
                                    <img src="/qln-images/eye_icon.svg" class="menu-icon-style" alt="Ignore" />
                                    <span class="menu-text">Publish</span>
                                </MudMenuItem>
                                <MudMenuItem OnClick='() => ShowConfirmation("Remove Item", "Are you sure you want to remove this item?", "Remove", () => OnRemove(context.Item))'
                                             Class="mud-text-error">
                                    <img src="/qln-images/remove_icon.svg" class="menu-icon-style" alt="Ignore" />
                                    <span class="menu-text">Remove</span>
                                </MudMenuItem>
                            }
                            @if (SelectedTab == "promoted" || SelectedTab == "featured")
                            {
                                <MudMenuItem OnClick='() => ShowConfirmation("Remove Item", "Are you sure you want to remove this item?", "Remove", () => OnRemove(context.Item))'
                                             Class="mud-text-error">
                                    <img src="/qln-images/remove_icon.svg" class="menu-icon-style" alt="Ignore" />
                                    <span class="menu-text">Remove</span>
                                </MudMenuItem>
                            }
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>

            </Columns>
        </MudDataGrid>

        <PaginationFooter TotalItems="@TotalCount" CurrentPage="@currentPage" PageSize="@pageSize"
                          OnPageChange="@HandlePageChange" OnPageSizeChange="@HandlePageSizeChange" />
    }
</MudPaper>
