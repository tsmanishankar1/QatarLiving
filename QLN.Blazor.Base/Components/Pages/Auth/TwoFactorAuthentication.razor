@page "/two-factor-authentication"
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject ApiService Api
@inject UserState UserState
@inject IJSRuntime JS

@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Blazor.Base.Services
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using System.Text.Json;

@if (VerificationSucesss)
{
    <div class="popup-overlay">
        <ModalDialog
            Title="Verification Successful"
            Description="Your email has been successfully verified."
            ButtonName="Continue"
            StatusType="Success"
            OnClick="CloseVerificationPopup" />
    </div>
}

<div class="auth-wrapper">
    <div class="auth-container">
        <h2 class="title">Two-Factor Authentication</h2>
        <p class="subtitle">We've sent a verification code to your mail ending in @UserState.Email</p>

        <div class="otp-container">
            @for (int i = 0; i < 6; i++)
            {
                var index = i;
                <input class="otp-box"
                       id="otp-@index"
                       maxlength="1"
                       value="@_otpDigits[index]"
                       @oninput="(e => OnOtpChanged(((ChangeEventArgs)e).Value?.ToString(), index))"
                       type="text"
                       inputmode="numeric"
                       pattern="[0-9]*" />
            }
        </div>

        <CustomButton
            BackgroundColor="#FF7F38"
            TextColor="#FFFFFF"
            Text="Verify"
            Disabled="_isLoading"
            Loading="_isLoading"
            OnClick="@VerifyCode"
            Class="verify-btn" />

        <p class="resend">Didn't receive a code? <NavLink href="/signup" style="color:var(--color-accent)" >Resend</NavLink></p>
        <p class="alternative" @onclick="NavigateToForgotPassword">Use another verification method</p>
    </div>
</div>

@code {
    private string[] _otpDigits = new string[6];
    private string _code = string.Empty;
    private bool _isLoading = false;
    private bool VerificationSucesss = false;
    private bool _hasError = false;
    private string _errorMessage = string.Empty;

    private async Task OnOtpChanged(string? value, int index)
    {
        if (!string.IsNullOrEmpty(value) && char.IsDigit(value[0]))
        {
            _otpDigits[index] = value.Substring(0, 1);

            if (index < 5)
            {
                await JS.InvokeVoidAsync("eval", $"setTimeout(() => {{ const el = document.getElementById('otp-{index + 1}'); if (el) el.focus(); }}, 10);");
            }
        }
        else
        {
            _otpDigits[index] = string.Empty;
        }
    }

    private async Task VerifyCode()
    {
        _isLoading = true;
        _hasError = false;
        _errorMessage = string.Empty;
        _code = string.Join("", _otpDigits);

        if (_code.Length != 6 || _otpDigits.Any(string.IsNullOrEmpty))
        {
            _hasError = true;
            _errorMessage = "Please enter all 6 digits.";
            _isLoading = false;
            return;
        }

        try
        {
            var payload = new { usernameOrEmailOrPhone = UserState.Email, twoFactorCode = _code };
            var response = await Api.PostAsync<object, object>("auth/verify-2fa", payload);

            if (response?.StatusCode == 200)
            {
                VerificationSucesss = true;
            }
            else
            {
                _hasError = true;
                _errorMessage = response?.Message ?? "Invalid verification code.";
                Snackbar.Add(_errorMessage, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _hasError = true;
            _errorMessage = ex.Message;
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToForgotPassword() => NavManager.NavigateTo("/select-verification");
    private void CloseVerificationPopup() => NavManager.NavigateTo("/classifieds");
}
<style>
.auth-wrapper {
    background-color: var(--color-secondary-background);
    padding: 48px 16px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.auth-container {
    max-width: 400px;
    width: 100%;
    padding: 32px;
    border-radius: 8px;
    text-align: center;
}

.title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 12px;
    color:var(--color-text-secondary)
}

.subtitle {
    font-size: 14px;
    color:var(--color-text-caption) ;
    margin-bottom: 24px;
}

.otp-container {
    display: flex;
    justify-content: space-between;
    gap: 8px;
    margin-bottom: 24px;
}

.otp-box {
    width: 48px;
    height: 48px;
    font-size: 20px;
    text-align: center;
    border: 1px solid var(--color-secondary-background);
    border-radius: 6px;
}

.verify-btn {
    margin-top: 16px;
    width: 100%;
}


.resend {
    font-size: 14px;
    margin-top: 16px;
    color: var(--color-text-secondary);
    cursor: pointer;
}
.alternative {
    font-size: 14px;
    margin-top: 16px;
    color:var(--color-accent);
    cursor: pointer;
}   
.otp-box:focus {
    border: 2px solid var(--color-accent);  /* Orange border on focus */
    outline: none;
    background-color: #FFF7F0;  /* Optional: light orange background */
}

</style>
