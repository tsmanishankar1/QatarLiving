@page "/add-subscription"
@inject ISnackbar Snackbar

@using MudBlazor
@using QLN.Web.Shared.Models

<div class="form-container">
    <div class="form-wrapper">
        <MudText Align="Align.Center" Class="mb-6 heading-text">
            Add Subscription
        </MudText>

    <MudForm Model="@subscriptionModel" @ref="form">
        <MudGrid>
            <!-- Subscription Name -->
            <MudItem xs="12" md="6" Class="pa-2">
                <MudTextField Label="Subscription Name*" 
                             @bind-Value="subscriptionModel.SubscriptionName"
                             Variant="Variant.Outlined"
                             For="@(() => subscriptionModel.SubscriptionName)"
                             Immediate="true"
                             Style="color: #242424;"
                             Class="mb-4"/>
            </MudItem>

            <!-- Price & Currency -->
            <MudItem xs="12" md="3" Class="pa-2">
                <MudTextField Label="Price*" 
                             @bind-Value="subscriptionModel.Price"
                             Variant="Variant.Outlined"
                             For="@(() => subscriptionModel.Price)"
                             Immediate="true"
                             Style="color: #242424;"
                             Class="mb-4"/>
            </MudItem>

            <MudItem xs="12" md="3" Class="pa-2">
                <MudSelect Label="Currency*" 
                          @bind-Value="subscriptionModel.Currency"
                          Variant="Variant.Outlined"
                          For="@(() => subscriptionModel.Currency)"
                          Immediate="true"
                          Style="color: #242424;"
                          Class="mb-4">
                    <MudSelectItem Value="@("QAR")">QAR</MudSelectItem>
                    <MudSelectItem Value="@("USD")">USD</MudSelectItem>
                    <MudSelectItem Value="@("EUR")">EUR</MudSelectItem>
                </MudSelect>
            </MudItem>

            <!-- Duration -->
            <MudItem xs="12" md="6" Class="pa-2">
                <MudSelect Label="Duration*" 
                          @bind-Value="subscriptionModel.Duration"
                          Variant="Variant.Outlined"
                          For="@(() => subscriptionModel.Duration)"
                          Immediate="true"
                          Style="color: #242424;"
                          Class="mb-4">
                    <MudSelectItem Value="@("Month")">1 Month</MudSelectItem>
                    <MudSelectItem Value="@("threeMonths")">3 Months</MudSelectItem>
                    <MudSelectItem Value="@("sixMonths")">6 Months</MudSelectItem>
                    <MudSelectItem Value="@("oneYear")">1 Year</MudSelectItem>
                </MudSelect>
            </MudItem>

            <!-- Vertical Type -->
            <MudItem xs="12" md="6" Class="pa-2">
                <MudSelect Label="Vertical Type*"
                           Variant="Variant.Outlined"
                           Value="@subscriptionModel.VerticalType"
                           ValueChanged="@(EventCallback.Factory.Create<string>(this, OnVerticalTypeChanged))"
                           Immediate="true"
                           Style="color: #242424;"
                           Class="mb-4">
                    <MudSelectItem Value="@("Classified")">Classified</MudSelectItem>
                    <MudSelectItem Value="@("Properties")">Properties</MudSelectItem>
                    <MudSelectItem Value="@("Vehicles")">Vehicles</MudSelectItem>
                    <MudSelectItem Value="@("Service")">Service</MudSelectItem>
                    <MudSelectItem Value="@("Jobs")">Jobs</MudSelectItem>
                    <MudSelectItem Value="@("Reward")">Reward</MudSelectItem>

                </MudSelect>
            </MudItem>

            <!-- Sub Category (Conditional) -->
            @if (showSubCategory)
            {
                <MudItem xs="12" md="6" Class="pa-2">
                    <MudSelect Label="Sub Category*" 
                              @bind-Value="subscriptionModel.SubCategory"
                              Variant="Variant.Outlined"
                              For="@(() => subscriptionModel.SubCategory)"
                              Immediate="true"
                              Style="color: #242424;"
                              Class="mb-4">
                        @foreach (var item in GetSubCategories())
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }

            <!-- Description -->
            <MudItem xs="12" Class="pa-2">
                <MudTextField Label="Description" 
                             @bind-Value="subscriptionModel.Description"
                             Variant="Variant.Outlined"
                             Lines="3"
                             Style="color: #242424;"
                             Class="mb-4"/>
            </MudItem>

        </MudGrid>

        <!-- Save Button -->
        <div class="mt-6" style="display: flex; justify-content: flex-end;">
            <MudButton Variant="Variant.Filled" 
                           Style="background-color: #FF7F38 ;color: white;"
                       OnClick="@(() => SaveSubscription())">
                Save
            </MudButton>
        </div>
    </MudForm>
</div></div>
@code {
    // private SubscriptionModel subscriptionModel = new();
    private SubscriptionModel subscriptionModel = new SubscriptionModel();

    private MudForm form;
    private bool showSubCategory = false;
    private void OnVerticalTypeChanged(string newValue)
    {
        subscriptionModel.VerticalType = newValue;
        showSubCategory = !string.IsNullOrEmpty(newValue);
        subscriptionModel.SubCategory = null;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            subscriptionModel.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == nameof(SubscriptionModel.VerticalType))
                {
                    showSubCategory = !string.IsNullOrEmpty(subscriptionModel.VerticalType);
                    subscriptionModel.SubCategory = null; 
                    StateHasChanged(); 
                }
            };
        }

        return Task.CompletedTask;
    }

    private List<string> GetSubCategories()
    {
        return subscriptionModel.VerticalType switch
        {
            "Classified" => new List<string> { "Deals", "Store", "Preloved" },
            "Properties" => new List<string> { "Residential", "Commercial", "Vacation" },
            "Vehicles" => new List<string> { "Cars", "Motorcycles", "Boats" },
            _ => new List<string>()
        };
    }

    private async Task SaveSubscription()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Console.WriteLine("Subscription saved: " + System.Text.Json.JsonSerializer.Serialize(subscriptionModel));
            Snackbar.Add("Subscription added successfully!", Severity.Success);
        }
    }

   
}

<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(120, 120, 120, 1);
        backdrop-filter: blur(8px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .phone-flex {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 16px;
    }

    .form-container {
        width: 100%;
        background-color: var(--color-secondary-background);
        padding: 32px 16px;
    }

    .form-wrapper {
        max-width: 400px;
        margin: 0 auto;
    }

    .heading-text {
        font-family: 'Public Sans', sans-serif;
        font-weight: 600;
        font-size: 30px;
    }

    .label-text {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 14px;
    }

    .custom-textfield {
        background-color: var(--color-secondary-background);
    }

    .custom-paper {
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    .error-border {
        border: 1px solid red !important;
        border-radius: 6px;
    }

    .custom-checkbox .label-text {
        color: inherit;
    }

    .success-text {
        font-weight: 400;
        color: var(--color-text-green);
    }

    .verify-button {
        background-color: var(--color-accent);
        color: white;
        min-width: 70px;
    }

        .verify-button:disabled {
            opacity: 0.5;
        }

    .verify-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .verify-progress {
        color: var(--color-accent);
    }

    .verify-text {
        text-transform: capitalize;
    }

    .verify-progress-circular {
        color: var(--color-accent);
    }

    .verify-button-text {
        text-transform: capitalize;
    }

    .country-select {
        width: 120px;
    }

    .selected-country-flag {
        width: 20px;
        height: 14px;
        margin-right: 5px;
    }

    .country-option {
        display: flex;
        align-items: center;
    }

    .country-flag {
        width: 20px;
        height: 14px;
        object-fit: cover;
        margin-right: 8px;
    }

    .country-code-text {
        white-space: nowrap;
        font-size: 14px;
    }

    .mobile-input {
        text-transform: capitalize;
    }

        .mobile-input .mud-input-root {
            border-bottom: none !important;
            box-shadow: none !important;
        }

        .mobile-input .mud-input-underline:before,
        .mobile-input .mud-input-underline:after {
            display: none !important;
        }

    .date-picker {
        background-color: var(--color-text-white);
    }

    .password-input {
        background-color: var(--color-secondary-background);
    }

    .terms-link {
        color: var(--color-accent);
    }

    .divider-line {
        flex-grow: 1;
        height: 1px;
        background-color: #ccc;
    }

    .label-text {
        font-family: 'Public Sans', sans-serif;
        font-weight: 400;
        font-size: 14px;
        margin-top: 20px;
    }

    .custom-progress-color circle {
        stroke: var(--color-accent);
        stroke-width: 4px;
    }

    .resend-code:hover {
        color: var(--color-accent);
    }
</style>
