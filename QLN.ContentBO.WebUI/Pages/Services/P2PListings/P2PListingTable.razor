@inherits P2PListingTableBase
@using MudBlazor
@using QLN.ContentBO.WebUI.Components.ToggleTabs
@using QLN.ContentBO.WebUI.Components.EmptyCard
@using QLN.ContentBO.WebUI.Components.PaginationFooter

<MudPaper Class="pa-4">
    <ToggleTabs Options="@tabOptions"
                ActiveValue="@selectedTab"
                OnChange="@OnTabChanged" />
    <div class="tab-content">
        @if (SelectedListings.Count > 0)
        {
            <div class="action-buttons">
                @if (selectedTab == "pendingApproval")
                {
                    <MudButton Class="capitalize-button" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check"
                               OnClick='() => ShowConfirmation("Approve Items", "Are you sure you want to approve selected Items?", "Approve", ApproveSelected)'>
                        Approve
                    </MudButton>
                }
                else if (selectedTab == "published")
                {
                    <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.VisibilityOff"
                               OnClick='() => ShowConfirmation("Unpublish Items", "Are you sure you want to unpublish selected Items?", "Unpublish", UnpublishSelected)'>
                        Unpublish
                    </MudButton>
                    <MudButton Class="capitalize-button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Close"
                               OnClick='() => ShowConfirmation("Remove Items", "Are you sure you want to remove selected Items?", "Remove", RemoveSelected)'>
                        Remove
                    </MudButton>
                }
                else if (selectedTab == "unpublished")
                {
                    <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.RemoveRedEye"
                               OnClick='() => ShowConfirmation("Publish Items", "Are you sure you want to publish selected Items?", "Publish", PublishSelected)'>
                        Publish
                    </MudButton>
                    <MudButton Class="capitalize-button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Close"
                               OnClick='() => ShowConfirmation("Remove Items", "Are you sure you want to remove selected Items?", "Remove", RemoveSelected)'>
                        Remove
                    </MudButton>
                }

                @if (selectedTab == "promoted")
                {
                    <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled"
                               OnClick='() => ShowConfirmation("Unpromote Items", "Are you sure you want to unpromote selected Items?", "Unpromote", UnpromoteSelected)'>
                        Unpromote
                    </MudButton>
                }

                @if (selectedTab == "featured")
                {
                    <MudButton Class="capitalize-button" Color="Color.Primary" Variant="Variant.Filled"
                               OnClick='() => ShowConfirmation("Unfeature Items", "Are you sure you want to unfeature selected Items?", "Unfeature", UnfeatureSelected)'>
                        Unfeature
                    </MudButton>
                }

                @if (selectedTab == "p2p" || selectedTab == "promoted" || selectedTab == "featured")
                {
                    <MudButton Class="capitalize-button" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Close"
                               OnClick='() => ShowConfirmation("Remove Items", "Are you sure you want to remove selected Items?", "Remove", RemoveSelected)'>
                        Remove
                    </MudButton>
                }
            </div>

            <div class="alert-container">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" />
                @($"{SelectedListings.Count} item(s) selected.")
            </div>
        }
    </div>
    @if(Listings == null || !Listings.Any()){

<EmptyCard Title="No Services Available" Subtitle="Please check back later or explore other categories." />

        
    }
    else{
        <MudTable Items="Listings"
          Hover="true"
          Bordered="true"
          Elevation="0"
          MultiSelection="true"
          RowCheckBoxVisible="true"
          @bind-SelectedItems="SelectedListings"
          Class="mud-table event-custom-table">

    <HeaderContent>
        <MudTh class="header-cell">Item Image</MudTh>
        <MudTh class="header-cell">Ad ID</MudTh>
        <MudTh class="header-cell" >User ID</MudTh>
        <MudTh class="header-cell">Ad Title</MudTh>
        <MudTh class="header-cell">User Name</MudTh>
        <MudTh class="header-cell">Category</MudTh>
        <MudTh class="header-cell">Sub Category</MudTh>
        <MudTh class="header-cell">Certification</MudTh>
        <MudTh class="header-cell">Creation Date</MudTh>
        <MudTh class="header-cell">Date Published</MudTh>
        <MudTh class="header-cell">Date Expiry</MudTh>
        <MudTh class="header-cell">Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>
            @if (context.ImageUpload?.FirstOrDefault()?.Url is string imageUrl)
            {
                <img src="@imageUrl" style="width: 136px; height: 61px; object-fit: cover; border-radius: 4px;" />
            }
            else
            {
                <div style="width: 136px; height: 61px; background-color: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
                    No Image
                </div>
            }
        </MudTd>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.UserId</MudTd>
        <MudTd title="@(string.IsNullOrWhiteSpace(context.AdTitle) ? "-" : context.AdTitle)" Class="truncate-text hover-title">@context.AdTitle</MudTd>
        <MudTd>@context.UserName</MudTd>
        <MudTd>@context.Category</MudTd>
        <MudTd>@context.SubCategory</MudTd>
        <MudTd>Id</MudTd>
        <MudTd>@context.CreationDate.ToString("dd-MM-yyyy hh:mm tt")</MudTd>
        <MudTd>@context.DatePublished?.ToString("dd-MM-yyyy hh:mm tt")</MudTd>
        <MudTd>@context.DateExpiry?.ToString("dd-MM-yyyy hh:mm tt")</MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem OnClick="() => OnEdit(context)">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" /> Edit
                </MudMenuItem>
                <MudMenuItem OnClick="() => OnPreview(context)">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" /> Preview
                </MudMenuItem>
                <MudMenuItem OnClick="() => OnRemove(context)" Class="mud-text-error">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" /> Remove
                </MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
</MudTable>

    }
     <PaginationFooter TotalItems="@TotalCount" CurrentPage="@currentPage" PageSize="@pageSize"
                OnPageChange="@HandlePageChange" OnPageSizeChange="@HandlePageSizeChange" />
</MudPaper>
