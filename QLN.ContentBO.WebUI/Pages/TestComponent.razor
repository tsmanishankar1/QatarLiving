@page "/blazormarkdown"
@using System.Text
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<MudGrid Style="padding-top: 18px">
    <MudItem>
        <MudText Typo="Typo.h4">Blazor Markdown Editor with Image Paste</MudText>
        <div id="pasteTarget" @ref="divRef">
            Click here and press Ctrl + V to paste image
            <MarkdownEditor @bind-Value="@markdownValue" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" />
        </div>
        <hr />
    </MudItem>
    <MudItem>
        @if (!string.IsNullOrEmpty(PastedImage))
        {
            <img src="@PastedImage" alt="Pasted" style="max-width: 300px;" />
        }
        <br />
        <h3>Result</h3>
        @((MarkupString)markdownHtml.ToString())
    </MudItem>
</MudGrid>


@if (!string.IsNullOrEmpty(base64Image))
{
    <h4>Preview:</h4>
    <img src="@base64Image" style="max-width:300px;" />
}

@code {

    private string? PastedImage;

    string markdownValue = "#Markdown Editor\nThis is a test";
    StringBuilder markdownHtml = new();

    private ElementReference divRef;
    private DotNetObjectReference<TestComponent>? _objRef;
    private string base64Image = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("pasteImageHandler.register", "pasteTarget", _objRef);
        }
    }

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml.Append(value);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public void OnImagePasted(string base64)
    {
        base64Image = base64;
        Guid guid = Guid.NewGuid();
        markdownHtml.AppendLine($"![image-{guid}]({base64})");
        StateHasChanged();
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}