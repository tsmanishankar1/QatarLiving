@page "/login"
@inject ApiService Api
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject UserState UserState
@using QLN.Blazor.Base.Services
@using MudBlazor

<div style="min-height: 100vh;" class="d-flex justify-center align-center">
    <div class="d-flex flex-column" style="max-width: 400px; padding: 32px; border: 1px solid #ccc; border-radius: 12px; box-shadow: 0px 4px 12px rgba(0,0,0,0.15); background: white;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-6" Style="font-weight: 600;">Log in</MudText>

        <MudTextField Label="Username" Required="true" FullWidth="true" @bind-Value="_username" />
        <MudTextField Label="Password" Required="true" FullWidth="true" Class="mt-4" InputType="InputType.Password" @bind-Value="_password" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true"
                   Class="mt-6"
                   Disabled="_isLoading"
                   Loading="_isLoading"
                   OnClick="PerformLogin"
                   Style="text-transform: none; font-weight: bold;">
            Log in
        </MudButton>

        <MudText Align="Align.Center" Class="my-4" Style="color: gray;">Or login with</MudText>

        <div class="d-flex justify-center gap-2">
            <MudButton Variant="Variant.Outlined" Color="Color.Default" Style="min-width: 140px;" OnClick="LoginWithFacebook">
                <img src="images/facebook.svg" style="width: 20px; height: 20px;" class="me-2" /> Facebook
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Default" Style="min-width: 140px;" OnClick="LoginWithGoogle">
                <img src="images/google.svg" style="width: 20px; height: 20px;" class="me-2" /> Google
            </MudButton>
        </div>
    </div>
</div>

@code {
    private string _username = string.Empty;
    private string _password = string.Empty;
    private bool _isLoading = false;

    private async Task PerformLogin()
    {
        _isLoading = true;
        var payload = new { name = _username, passwordOrOtp = _password };

        try
        {
            var result = await Api.PostAsync<object, LoginResult>("Auth/Login", payload);

            if (result?.Success == true)
            {
                var jwt = result.Message.JwtToken;
                var email = JwtHelper.GetEmailFromJwt(jwt);

                UserState.Email = email;
                UserState.Token = jwt;

                Snackbar.Add($"Logged in as {email}", Severity.Success);
                NavManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Login failed. Please check credentials.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error: " + ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoginWithFacebook() => Task.CompletedTask;
    private Task LoginWithGoogle() => Task.CompletedTask;

    private class LoginResult
    {
        public bool Success { get; set; }
        public MessageContent Message { get; set; }
    }

    private class MessageContent
    {
        public string JwtToken { get; set; }
        public string RefreshToken { get; set; }
    }
}
