@page "/reset-password"
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ApiService Api
@using QLN.Web.Shared.Services
@using QLN.Web.Shared.Components
@using QLN.Web.Shared.Helpers
@inject UserState UserState
@using MudBlazor
@using MudBlazor.Components
@rendermode InteractiveServer
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@using System.Text.RegularExpressions;
@inject IDialogService DialogService
@using System.Text.RegularExpressions;
@using QLN.Web.Shared.Components.ModalDialog
@using Microsoft.AspNetCore.WebUtilities
@using QLN.Web.Shared.Components.PasswordStrengthIndicator

@if (ShowSuccess){
    <div class="popup-overlay">
       <ModalDialog
        Title="New Password Set" 
        Description="You have successfully created a new password, click on back to login and enter your credentials."
        ButtonName="Back to Login"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
    </div> 
}
<div style="width: 100%; background-color: var(--color-secondary-background); padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">    
    <MudStack Spacing="3">
<MudForm @ref="_form">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5" Align="Align.Center">Password Reset</MudText>

        <MudText Typo="Typo.body1" Style="font-weight: 400;">Password</MudText>
        <MudTextField T="string"
                      Label="Password"
                      Variant="Variant.Outlined"
                      InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                      FullWidth="true"
                      MaxLength="50"
                      Immediate="true"
                      For="@(() => newPassword)"
                      @bind-Value="newPassword"
                      Style="background-color: var(--color-background);"
                      Required="true"
                      Validation="ValidateNewPassword"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                      OnAdornmentClick="TogglePasswordVisibility"
                      AdornmentColor="Color.Default" />
        <PasswordStrengthIndicator Password="@newPassword" />

        <MudText Typo="Typo.body1" Style="font-weight: 400;">Confirm Password</MudText>
        <MudTextField T="string"
                      Label="Confirm Password"
                      Variant="Variant.Outlined"
                      MaxLength="50"
                      InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                      FullWidth="true"
                      Immediate="true"
                      For="@(() => confirmPassword)"
                      @bind-Value="confirmPassword"
                      style="background-color: var(--color-background)"
                      Validation="ValidateConfirmPassword"
                      Required="true"
                      Adornment="Adornment.End"
                      AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                      OnAdornmentClick="ToggleConfirmVisibility"
                      AdornmentColor="Color.Default" />

        <CustomButton 
            BackgroundColor="#FF7F38"
            TextColor="#FFFFFF"
            Text="Continue"
            Disabled="_isLoading"
            Loading="_isLoading"
            OnClick="@ResetPasswordMethod"
            Class="mt-4" />
    </MudStack>
</MudForm>
    </MudStack>
    </div>
</div>
@code {
    private MudForm _form;
    private string? ResetCode;
    private string? emailDecoded;
    private bool _isLoading = false;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordError {get; set;}
    private string confirmPasswordError = string.Empty;
    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code))
        {
            ResetCode = code;
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            emailDecoded = System.Net.WebUtility.UrlDecode(email); 
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private void ToggleConfirmVisibility()
    {
        _showConfirmPassword = !_showConfirmPassword;
    }

    private bool ShowSuccess = false;

    private async Task ResetPasswordMethod()
    {
        _isLoading = true;
        await _form.Validate();
        if (!_form.IsValid)
        {
            _isLoading = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            Snackbar.Add("Enter new password", Severity.Warning);
            _isLoading = false;
            return;
        }
        if (newPassword != confirmPassword)
        {
            Snackbar.Add("Passwords do not match", Severity.Warning);
            _isLoading = false;
            return;
        }
        try
        {
            var payload = new { email = emailDecoded , newPassword = newPassword, resetCode = ResetCode };
            Console.WriteLine(payload);
            var response = await Api.PostAsync<object, object>("auth/reset-password", payload);

            if (response?.StatusCode == 200)
            {
                ShowSuccess = true;
            }
            else
            {
                Snackbar.Add(response?.Message, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }

    private string ValidateConfirmPassword(string value)
{
    if (string.IsNullOrWhiteSpace(confirmPassword))
        return "Please confirm your password";
    else if (confirmPassword != newPassword)
        return "Passwords do not match";
    else
        return string.Empty;
}
    private string ValidateNewPassword(string password)
    {
        return ValidationHelper.ValidatePassword(newPassword);
    }  
}

<style>
   .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(120, 120, 120, 1); 
    backdrop-filter: blur(8px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}
</style>