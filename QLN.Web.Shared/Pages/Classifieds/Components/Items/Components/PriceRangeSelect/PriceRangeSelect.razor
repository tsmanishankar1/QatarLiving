<div class="price-range-wrapper"
     tabindex="0"
     @onfocusin="HandleFocusIn"
     @onfocusout="HandleFocusOut"
     @onclick:stopPropagation>


  <div class="price-select-trigger @(IsDisabled ? "disabled" : "")" @onclick="() => { if (!IsDisabled) HandleToggleClick(); }">
    @DisplayText
    <span class="arrow">@((IsOpen) ? "▲" : "▼")</span>
</div>


    @if (IsOpen)
    {
        <div class="price-dropdown" @onfocus="KeepOpen" @onmousedown:stopPropagation>
            <div class="price-inputs">
                <div class="input-block">
                    <label>Minimum</label>
                    <input type="text" class="price-input" @bind="FormattedMin" @bind:event="oninput" @onfocus="KeepOpen" />
                </div>
                <div class="input-block">
                    <label>Maximum</label>
                    <input type="text" class="price-input" @bind="FormattedMax" @bind:event="oninput" @onfocus="KeepOpen" />
                </div>
            </div>

            <div class="price-actions">
                <button class="btn-reset" @onclick="ResetValues">Reset</button>
                <button class="btn-apply" @onclick="ApplyValues"> @if (IsLoading)
                    {
                         <MudProgressCircular Indeterminate="true" Style="color: white;width: 20px; height: 20px;" />
                    }
                    else
                    {
                        <span>Apply</span>
                    }</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public long? SelectedMin { get; set; }
    [Parameter] public long? SelectedMax { get; set; }
    [Parameter] public EventCallback<long?> SelectedMinChanged { get; set; }
    [Parameter] public EventCallback<long?> SelectedMaxChanged { get; set; }
 [Parameter] public bool IsDisabled { get; set; }
    // New: External apply/reset event callbacks
    [Parameter] public EventCallback OnApplyClicked { get; set; }
    [Parameter] public EventCallback OnResetClicked { get; set; }
    private void HandleToggleClick()
{
    if (IsDisabled) return;
    ToggleDropdown();
}
private int focusCount = 0;

private void HandleFocusIn(FocusEventArgs e)
{
    focusCount++; // Always track focus count

    if (IsDisabled) return; // Only block dropdown logic

    IsOpen = true;
}

private async void HandleFocusOut(FocusEventArgs e)
{
    // Delay gives time to check if focus moved to another internal element
    await Task.Delay(100);

    if (--focusCount <= 0)
    {
        IsOpen = false;
        StateHasChanged();
    }
}

    private bool IsOpen { get; set; }
    private long? MinValue;
    private long? MaxValue;

    private string FormattedMin
    {
        get => MinValue?.ToString("N0") ?? "";
        set => MinValue = ParseLong(value);
    }

    private string FormattedMax
    {
        get => MaxValue?.ToString("N0") ?? "";
        set => MaxValue = ParseLong(value);
    }

    private string DisplayText =>
    (MinValue.HasValue && MaxValue.HasValue)
    ? $"{FormatShort(MinValue)} - {FormatShort(MaxValue)}"
    : "Price";


    protected override void OnParametersSet()
    {
        MinValue = SelectedMin;
        MaxValue = SelectedMax;
    }

    private void ToggleDropdown() => IsOpen = !IsOpen;

    private void KeepOpen(FocusEventArgs e) => IsOpen = true;

   private bool IsLoading = false;

private async Task ApplyValues()
{
    IsLoading = true;
    try
    {
        await SelectedMinChanged.InvokeAsync(MinValue);
        await SelectedMaxChanged.InvokeAsync(MaxValue);
        await OnApplyClicked.InvokeAsync();  // Await the parent's async API call
        IsOpen = false;
    }
    finally
    {
        IsLoading = false;
    }
}


    private async void ResetValues()
    {
        MinValue = null;
        MaxValue = null;
        await OnResetClicked.InvokeAsync();
        IsOpen = false;
    }

    private long? ParseLong(string input)
    {
        if (long.TryParse(input.Replace(",", ""), out var result))
            return result;
        return null;
    }

    private string FormatShort(long? value)
    {
        if (!value.HasValue) return "";

        var val = value.Value;

        if (val >= 1_00_00_000) // Crore+
            return $"{val / 1_00_00_000.0:F1} Cr";
        if (val >= 1_00_000) // Lakh+
            return $"{val / 1_00_000.0:F1} L";
        if (val >= 1_000)
            return $"{val / 1_000.0:F1} K";

        return val.ToString("N0");
    }
}

<style>
    .price-range-wrapper {
        position: relative;
        width: 100%;
    }

    .price-select-trigger {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 10px;
        border: 1px solid #ccc;
        border-radius: 6px;
        background: #fff;
        cursor: pointer;
    }
.price-select-trigger.disabled {
    background-color: var(--color-background-secondary-grey-light);
    color: #A1A1A1;
    pointer-events: none;
    opacity: 0.6;
    cursor: not-allowed;
     pointer-events: none;
}

    .price-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        min-width: 350px;
        /* Set a wide dropdown */
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-top: 4px;
        padding: 16px;
        z-index: 100;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.25s ease forwards;
    }

    .price-inputs {
        display: flex;
        gap: 12px;
        margin-bottom: 16px;
    }.price-range-select.disabled {
    pointer-events: none;
    opacity: 0.6;
}

.price-range-select.disabled .selected-value {
    background-color: #e0e0e0; /* light grey background for disabled */
    cursor: not-allowed;
}


    .input-block {
        flex: 1;
        gap: 10px display: flex;
        flex-direction: column;
    }

    .price-input {
        padding: 8px;
        font-size: 14px;
        border: 1px solid #D0D5DD;
        border-radius: 6px;
        width: 100%;
        box-sizing: border-box;
        transition: border-color 0.2s ease;
    }

    .price-input:focus {
        border-color: #ff7f38;
        /* Brighter border color on focus */
        outline: none;
        /* Removes the default blue glow */
    }

    .price-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-reset {
        background: none;
        border: none;
        color: var(--color-accent);
        font-weight: bold;
        cursor: pointer;
    }

    .btn-apply {
        background: var(--color-accent);
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 6px;
        cursor: pointer;
    }
    @@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

</style>
