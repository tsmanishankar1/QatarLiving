@page "/forgot-password"
@inject NavigationManager NavManager
@using MudBlazor
@inject ISnackbar Snackbar
@inject ApiService Api
@using QLN.Blazor.Base.Services
@inject UserState UserState
@using MudBlazor.Components
@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using System.Text.RegularExpressions;
@using QLN.Web.Shared.Components.ModalDialog

@if (ShowSuccess){
    <div class="popup-overlay">
       <ModalDialog
        Title="Password Reset Link Sent" 
        Description="We have sent a link to your email, please follow the steps in the email to create a new password.."
        ButtonName="Back to Login"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
    </div> 
}
<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">    
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5" Align="Align.Center">Reset Password</MudText>

        <MudText Typo="Typo.caption" Align="Align.Center">
            Enter your email address and we'll send you a link to reset your password
        </MudText>

        <MudTextField T="string" 
                      Label="Email Address" 
                      Variant="Variant.Outlined" 
                      FullWidth="true" 
                      Required="true"
                      Style="background-color: #FFFFFF;"
                      @bind-Value="_input"
                      RequiredError="Email is required" />
<MudPaper Class="d-flex align-center px-4 py-2"
          Style="border: 2px solid #CCCCCC; border-radius: 8px; width: 100%; background-color: #F5F5F5;">
    
    @* <MudCheckBox @bind-Checked="_checked" T="bool" Label="" DisableMargins="true" /> *@
    <MudCheckBox @bind-Value="_checked" Label=""></MudCheckBox>


    <MudText Align="Align.Center"
             Class="mud-clickable ml-2"
             Style="color: #999999; cursor: pointer;">
        I'm not a robot
    </MudText>

    <MudSpacer />

    <MudImage Src="/images/recapcha.svg"
              Alt="Verification Success"
              Width="65"
              Height="65"
              Style="display: block;" />

</MudPaper>
        
        <CustomButton 
    BackgroundColor="#FF7F38"
    TextColor="#FFFFFF"
    Text="Send Reset Link"
    Disabled="_isLoading"
    Loading="_isLoading"
    OnClick="@ResetPassword"
    Class="mt-4" />


        <MudText Align="Align.Center"
                 Class="mud-clickable mt-2"
                 Style="color: #FF7F38; cursor: pointer;" 
                 @onclick="NavigateToForgotPassword">
            Back to Sign In
        </MudText>
    </MudStack>
    </div>
</div>
@code {
    private string _input = string.Empty;
    private bool _isLoading = false;
    private bool _checked { get; set; } = false;

    private bool ShowSuccess = false;

private bool _isChecked;

    private void NavigateToForgotPassword()
    {
        NavManager.NavigateTo("/login");
    }

    private async Task ResetPassword()
{
     _isLoading = true;
    if (string.IsNullOrWhiteSpace(_input))
    {
        Snackbar.Add("Email field cannot be empty.", Severity.Warning);
        _isLoading = false;
        return;
    }
    var emailRegex = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
if (!Regex.IsMatch(_input, emailRegex))
{
    Snackbar.Add("Please enter a valid email address.", Severity.Warning);
    _isLoading = false;
    return;
}
Console.WriteLine($"Email: {_checked}");
     if (_checked == false)
    {
        Snackbar.Add("Please check the ‘I’m not a robot’ box to proceed..", Severity.Warning);
        _isLoading = false;
        return;
    }

    try
    {
        var payload = new { email = _input };
        var res = await Api.PostAsync<object, ResponseModel<object>>("auth/forgot-password", payload);

        if (res?.Status == true)
        {
            ShowSuccess = true;
            
        }
        else
        {
            Snackbar.Add(res?.Message ?? "Failed to resend verification email.", Severity.Warning);
        }
    }
    catch (Exception ex)
    {
        Snackbar.Add($"Signup failed: {ex.Message}", Severity.Error);
    }
    finally
        {
            _isLoading = false;
        }
}
   private void CloseVerificationPopup()
{
    ShowSuccess = false;
    NavManager.NavigateTo("/login");
}
}

<style>
    .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; 
}
</style>