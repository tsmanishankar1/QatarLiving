@using QLN.ContentBO.WebUI.Models
@using MudBlazor

@if (Events == null || Categories == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    var indexedEvents = Events
        .Where(e => string.IsNullOrWhiteSpace(SearchText) || e.EventTitle.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
        .Select((e, i) => new { Event = e, Index = i + 1 })
        .ToList();

    <div class="events-button-container">
        <MudButton StartIcon="@Icons.Material.Outlined.Add"
                   Style="background-color: #FF7F38; color: white; text-transform: none;"
                   Class="compact-button"
                   OnClick="AddEventCallback">
            Add Event
        </MudButton>

        <MudTextField @bind-Value="SearchText"
                      Placeholder="Search for Events"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="search-field" />

        <div class="sort-by-wrapper">
            <MudButton StartIcon="@Icons.Material.Filled.FilterList"
                       Variant="Variant.Outlined"
                       Class="sort-by-style">
                Sort by
            </MudButton>
        </div>
    </div>

    <MudTable Items="indexedEvents" Hover="true" Style="padding-top: 20px; margin-top: 40px;">
        <HeaderContent>
            <MudTh>Number</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Creation Date</MudTh>
            <MudTh>Expiry Date</MudTh>
            <MudTh>Live for</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Index</MudTd>
            <MudTd><MudLink Href="#">@context.Event.EventTitle</MudLink></MudTd>
            <MudTd>@Categories.FirstOrDefault(c => c.Id == context.Event.CategoryId)?.CategoryName</MudTd>
            <MudTd>@context.Event.CreatedAt.ToString("dd-MM-yyyy")</MudTd>
            <MudTd>@context.Event.EventSchedule?.EndDate.ToString("dd-MM-yyyy")</MudTd>
            <MudTd>@(DateTime.Now - context.Event.CreatedAt).Days + " days"</MudTd>
            <MudTd>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true">
                    <MudMenuItem><MudIcon Icon="@Icons.Material.Outlined.Edit" /> Edit</MudMenuItem>
                    <MudMenuItem><MudIcon Icon="@Icons.Material.Outlined.VisibilityOff" /> Unpublish</MudMenuItem>
                    <MudMenuItem OnClick="() => OnDelete.InvokeAsync(context.Event.Id.ToString())" Class="mud-error-text">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" /> Delete
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter] public List<EventDTO> Events { get; set; }
    [Parameter] public List<EventCategoryModel> Categories { get; set; }
    [Parameter] public EventCallback<string> OnDelete { get; set; }
    [Parameter] public EventCallback AddEventCallback { get; set; }

    private string SearchText { get; set; } = string.Empty;
}
