@page "/blazormarkdown"
@using System.Text
@using PSC.Blazor.Components.MarkdownEditor.Enums
@using QLN.ContentBO.WebUI.Components
@using QLN.ContentBO.WebUI.Interfaces
@using System.Net
@using QLN.ContentBO.WebUI.Models
@using System.Text.Json
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IFileUploadService fileUploadService
@inherits QLComponentBase

<MudGrid Style="padding-top: 18px">
    <MudItem>
        <MudText Typo="Typo.h4">Blazor Markdown Editor with Image Paste</MudText>
        <div id="pasteTarget" @ref="divRef">
            Click here and press Ctrl + V to paste image
            <MarkdownEditor @bind-Value="@markdownValue" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" @ref="Markdown1">
                <Toolbar>
                    <MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" Title="Bold" />
                    <MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" Title="Italic" />
                    <MarkdownToolbarButton Action="MarkdownAction.Strikethrough" Icon="fa fa-strikethrough" Title="Strikethrough" />

                    <MarkdownToolbarButton Action="MarkdownAction.Heading" Icon="fa fa-header" Title="Heading" />
                    <MarkdownToolbarButton Action="MarkdownAction.HeadingSmaller" Icon="fa fa-minus" Title="Heading Smaller" />
                    <MarkdownToolbarButton Action="MarkdownAction.HeadingBigger" Icon="fa fa-plus" Title="Heading Bigger" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading1" Icon="fa fa-header" Title="Heading 1" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading2" Icon="fa fa-header" Title="Heading 2" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading3" Icon="fa fa-header" Title="Heading 3" />

                    <MarkdownToolbarButton Action="MarkdownAction.Code" Icon="fa fa-code" Title="Code Block" />
                    <MarkdownToolbarButton Action="MarkdownAction.Quote" Icon="fa fa-quote-right" Title="Quote" />
                    <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" Icon="fa fa-list-ul" Title="Unordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Icon="fa fa-list-ol" Title="Ordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.CleanBlock" Icon="fa fa-eraser" Title="Clean Block" />

                    <MarkdownToolbarButton Action="MarkdownAction.Link" Icon="fa fa-link" Title="Link" />
                    <MarkdownToolbarButton Action="MarkdownAction.Image" Icon="fa fa-image" Title="Image" />
                    <MarkdownToolbarButton Name="uploadimage"
                                           Value="upload"
                                           Icon="fa fa-upload"
                                           Title="Upload Image"
                                           OnClick="TriggerCustomImageUpload" />
                    <MarkdownToolbarButton Action="MarkdownAction.Table" Icon="fa fa-table" Title="Table" />
                    <MarkdownToolbarButton Action="MarkdownAction.HorizontalRule" Icon="fa fa-minus" Title="Horizontal Rule" />

                    <MarkdownToolbarButton Action="MarkdownAction.Preview" Icon="fa fa-eye" Title="Preview" />
                    <MarkdownToolbarButton Action="MarkdownAction.SideBySide" Icon="fa fa-columns" Title="Side by Side" />
                    <MarkdownToolbarButton Action="MarkdownAction.Guide" Icon="fa fa-question-circle" Title="Markdown Guide" />
                </Toolbar>
            </MarkdownEditor>
        </div>
        <hr />
    </MudItem>
    <MudItem>

        <h3>Result</h3>
        <MudText Typo="Typo.body1">Markdown Value:</MudText>
        @((MarkupString)markdownHtml.ToString())

        <hr />
        <MudText Typo="Typo.body1">Uploaded Image:</MudText>
        @if (!string.IsNullOrEmpty(PastedImage))
        {
            <img src="@PastedImage" alt="Pasted" style="max-width: 300px;" />
        }
        <br />
    </MudItem>
</MudGrid>


@code {
    MarkdownEditor Markdown1;
    private string? PastedImage;

    string markdownValue = "Test";
    string markdownHtml = string.Empty;

    private ElementReference divRef;
    private DotNetObjectReference<TestComponent>? _objRef;
    private string base64Image = string.Empty;

    protected FileUploadModel fileUploadModel { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("pasteImageHandler.register", "pasteTarget", _objRef);
        }
    }

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = string.Empty;
        markdownHtml = value;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnImagePasted(string base64)
    {
        try
        {
            base64Image = string.Empty;
            PastedImage = string.Empty;
            fileUploadModel = new FileUploadModel();
            if (string.IsNullOrEmpty(base64))
            {
                Snackbar.Add("No image data found", Severity.Error);
                return;
            }
            base64Image = base64;
            fileUploadModel.Container = "content-images";
            fileUploadModel.File = base64Image;

            var fileUploadResponse = await UploadFile(fileUploadModel);
            if (fileUploadResponse?.IsSuccess == true)
            {
                PastedImage = fileUploadResponse.FileUrl;
                var imageMarkdown = $"\n![image-{fileUploadResponse.FileName}]({fileUploadResponse.FileUrl})";
                markdownValue += imageMarkdown;
                await Markdown1!.SetValueAsync(markdownValue);

                base64Image = string.Empty;
            }
            else
            {
                Snackbar.Add(fileUploadResponse?.Message ?? "Image upload failed", Severity.Error);
            }



            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnImagePasted");
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    protected async Task<FileUploadResponse> UploadFile(FileUploadModel fileUploadData)
    {
        var response = await fileUploadService.UploadFileAsync(fileUploadData);
        var jsonString = await response.Content.ReadAsStringAsync();
        if (response != null && response.IsSuccessStatusCode)
        {
            var result = JsonSerializer.Deserialize<FileUploadResponse>(jsonString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            return result ?? new();
        }
        else if (response?.StatusCode == HttpStatusCode.BadRequest)
        {
            Snackbar.Add($"Bad Request: {jsonString}", Severity.Error);
        }
        else if (response?.StatusCode == HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("You are unauthorized to perform this action", Severity.Error);
        }
        else if (response?.StatusCode == HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal API Error", Severity.Error);
        }

        return new();
    }

}