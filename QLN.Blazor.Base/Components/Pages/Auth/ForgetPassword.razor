@page "/forgot-password"
@inject NavigationManager NavManager
@inject ApiService Api
@inject UserState UserState
@using MudBlazor
@using MudBlazor.Components
@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Models
@using QLN.Blazor.Base.Helpers
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@rendermode InteractiveServer

@if (ShowSuccess)
{
    <div class="popup-overlay">
        <ModalDialog
            Title="Password Reset Link Sent"
            Description="We have sent a link to your email, please follow the steps in the email to create a new password."
            ButtonName="Back to Login"
            StatusType="Success"
            OnClick="CloseVerificationPopup" />
    </div>
}

<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Align="Align.Center">Reset Password</MudText>

            <MudText Typo="Typo.caption" Align="Align.Center">
                Enter your email address and we'll send you a link to reset your password
            </MudText>

            <MudTextField T="string"
                Label="Email Address"
                Variant="Variant.Outlined"
                FullWidth="true"
                Immediate="true"
                Value="@_email"
                ValueChanged="OnEmailChanged"
                ValueExpression="(() => _email)"
                Error="@(!string.IsNullOrEmpty(_emailError))"
                ErrorText="@_emailError"
                Size="Size.Small"
                Style="background-color: #FFFFFF;" />

            <MudPaper Class="d-flex flex-column px-4 py-2"
                      Style="border: 2px solid #CCCCCC; border-radius: 8px; width: 100%; background-color: #FFFFFF; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                <div class="d-flex align-center">
                    <MudCheckBox T="bool"
                                 @bind-Value="@_checked"
                                 CheckedChanged="OnRobotCheckboxChanged"
                                 DisableRipple="true"
                                 Color="Color.Primary" />

                    <MudText Class="ml-2" Style="color: #555; font-size: 14px;">
                        I'm not a robot
                    </MudText>

                    <MudSpacer />

                    <MudImage Src="/images/recapcha.svg"
                              Alt="Verification"
                              Width="40"
                              Height="40"
                              Style="display: block;" />
                </div>
            </MudPaper>

            @if (!string.IsNullOrEmpty(_robotError))
            {
                <MudText Color="Color.Error" Typo="Typo.caption" Style="margin-top: 2px;">
                    @_robotError
                </MudText>
            }

            <CustomButton
                BackgroundColor="#FF7F38"
                TextColor="#FFFFFF"
                Text="Send Reset Link"
                Disabled="_isLoading"
                Loading="_isLoading"
                OnClick="@ResetPassword"
                Class="mt-4" />

            <MudText Align="Align.Center"
                     Class="mud-clickable mt-2"
                     Style="color: #FF7F38; cursor: pointer;"
                     @onclick="NavigateToLogin">
                Back to Sign In
            </MudText>
        </MudStack>
    </div>
</div>

<style>
.popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}
</style>

@code {
    private string _email = string.Empty;
    private string _emailError = string.Empty;
    private bool _isLoading = false;
    private bool _checked = false;
    private string _robotError = string.Empty;
    private bool ShowSuccess = false;

    private async Task OnEmailChanged(string value)
    {
        _email = value;
        ValidateEmail();
        await InvokeAsync(StateHasChanged);
    }

    private void ValidateEmail()
    {
        if (string.IsNullOrWhiteSpace(_email))
        {
            _emailError = "Email is required.";
        }
        else if (!ValidationHelper.IsValidEmail(_email))
        {
            _emailError = "Invalid email address.";
        }
        else
        {
            _emailError = string.Empty;
        }
    }

     private void OnRobotCheckboxChanged(bool isChecked)
    {
        _checked = isChecked;
        
        // If checked, clear the error, otherwise show error
        if (_checked)
        {
            _robotError = string.Empty;  // Clear error message when checked
        }
        else
        {
            _robotError = "Please confirm you are not a robot.";  // Show error if unchecked
        }

        // Trigger UI refresh
        StateHasChanged();
    }

    private async Task ResetPassword()
    {
        _isLoading = true;
        _emailError = string.Empty;
        _robotError = string.Empty;
        await Task.Yield(); // Let UI update first

        ValidateEmail();

        if (!_checked)
        {
            _robotError = "Please confirm you are not a robot.";
        }

        if (!string.IsNullOrEmpty(_emailError) || !_checked)
        {
            _isLoading = false;
            return;
        }

        try
        {
            var payload = new { email = _email };
            var res = await Api.PostAsync<object, ResponseModel<object>>("auth/forgot-password", payload);

            if (res?.Status == true)
            {
                ShowSuccess = true;
            }
            else
            {
                _emailError = res?.Message ?? "Failed to send reset email.";
            }
        }
        catch (Exception ex)
        {
            _emailError = $"Reset password failed: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }

    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }
}
