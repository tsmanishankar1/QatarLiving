@page "/forgot-password"
@inject NavigationManager NavManager
@inject ApiService Api
@inject UserState UserState
@inject ISnackbar Snackbar
@using MudBlazor
@using MudBlazor.Components
@using QLN.Blazor.Base.Services
@using QLN.Blazor.Base.Models
@using QLN.Blazor.Base.Helpers
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog
@rendermode InteractiveServer

@if (ShowSuccess)
{
    <ModalDialog
        Title="Password Reset Link Sent"
        Description="We have sent a link to your email, please follow the steps in the email to create a new password."
        ButtonName="Back to Login"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
}

<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Align="Align.Center">Reset Password</MudText>

            <MudText Typo="Typo.caption" Align="Align.Center">
                Enter your email address and we'll send you a link to reset your password
            </MudText>

            <MudForm @ref="_form">
                <MudTextField T="string"
                    Label="Email Address"
                    Variant="Variant.Outlined"
                    FullWidth="true"
                    Immediate="true"
                    For="@(() => Email)"
                    Required="true"
                    RequiredError="Email is required."
                    Validation="@ValidateEmailFormat"
                    Size="Size.Small"
                    Style="background-color: #FFFFFF;" />

                <MudPaper Class="d-flex flex-column px-4 py-2 mt-2"
                          Style="border: 2px solid #CCCCCC; border-radius: 8px; width: 100%; background-color: #FFFFFF; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                    <div class="d-flex align-center">
                        <MudCheckBox T="bool"
                                     @bind-Value="IsRobotChecked"
                                     For="@(() => IsRobotChecked)"
                                     Required="true"
                                     RequiredError="Please confirm you are not a robot."
                                     DisableRipple="true"
                                     Color="Color.Primary" />
                        <MudText Class="ml-2" Style="color: #555; font-size: 14px;">
                            I'm not a robot
                        </MudText>
                        <MudSpacer />
                        <MudImage Src="/images/recapcha.svg" Alt="Verification" Width="40" Height="40" />
                    </div>
                </MudPaper>

                <CustomButton
                    BackgroundColor="#FF7F38"
                    TextColor="#FFFFFF"
                    Text="Send Reset Link"
                    Disabled="@IsLoading"
                    Loading="@IsLoading"
                    OnClick="@HandleResetPassword"
                    Class="mt-4" />
            </MudForm>

            <MudText Align="Align.Center"
                     Class="mud-clickable mt-2"
                     Style="color: #FF7F38; cursor: pointer;"
                     @onclick="NavigateToLogin">
                Back to Sign In
            </MudText>
        </MudStack>
    </div>
</div>

@code {
    private MudForm _form;
    private string Email { get; set; } = string.Empty;
    private bool IsRobotChecked { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool ShowSuccess { get; set; } = false;

    private async Task HandleResetPassword()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        await ResetPasswordApiCall();
    }

    private async Task ResetPasswordApiCall()
    {
        try
        {
            IsLoading = true;

            var payload = new { email = Email };
            var response = await Api.PostAsync<object, ResponseModel<object>>("auth/forgot-password", payload);

            if (response?.StatusCode == 200)
            {
                ShowSuccess = true;
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to send reset email.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Reset password failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

   private string ValidateEmailFormat(string email)
    {
        return ValidationHelper.IsValidEmail(email) ? null : "Invalid email address.";
    }

    private void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }

    private void CloseVerificationPopup()
    {
        ShowSuccess = false;
        NavManager.NavigateTo("/login");
    }
}
