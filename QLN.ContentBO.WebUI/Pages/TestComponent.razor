@page "/blazormarkdown"
@using System.Text
@using PSC.Blazor.Components.MarkdownEditor.Enums
@using QLN.ContentBO.WebUI.Components
@using QLN.ContentBO.WebUI.Interfaces
@using System.Net
@using QLN.ContentBO.WebUI.Models
@using System.Text.Json
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IFileUploadService fileUploadService
@inherits QLComponentBase

<MudGrid Style="padding-top: 18px">
    <MudItem>
        <MudText Typo="Typo.h4">Blazor Markdown Editor with Image Paste</MudText>
        <div id="pasteTarget" @ref="divRef">
            Click here and press Ctrl + V to paste image
            <MarkdownEditor @bind-Value="@markdownValue" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" CustomButtonClicked="@OnCustomButtonClicked" @ref="Markdown1">
                <Toolbar>
                    <MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" Title="Bold" />
                    <MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" Title="Italic" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading" Icon="fa fa-header" Title="Heading" />
                    <MarkdownToolbarButton Action="MarkdownAction.Strikethrough" Icon="fa fa-strikethrough" Title="Strikethrough" />
                    
                    <MarkdownToolbarButton Separator Action="MarkdownAction.Code" Icon="fa fa-code" Title="Code Block" />
                    <MarkdownToolbarButton Action="MarkdownAction.Quote" Icon="fa fa-quote-right" Title="Quote" />
                    <MarkdownToolbarButton Action="MarkdownAction.HorizontalRule" Icon="fa fa-minus" Title="Horizontal Rule" />
                    <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" Icon="fa fa-list-ul" Title="Unordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Icon="fa fa-list-ol" Title="Ordered List" />
                    
                    <MarkdownToolbarButton Separator Action="MarkdownAction.Link" Icon="fa fa-link" Title="Link" />
                    <MarkdownToolbarButton Action="MarkdownAction.Custom" Name="@UploadImageButtonName" Icon="fa fa-upload" Title="Upload Image" />
                    <MarkdownToolbarButton Action="MarkdownAction.Image" Icon="fa fa-image" Title="Image" />

                    <MarkdownToolbarButton Separator Action="MarkdownAction.SideBySide" Icon="fa fa-columns" Title="Side by Side" />
                    <MarkdownToolbarButton Action="MarkdownAction.Guide" Icon="fa fa-question-circle" Title="Markdown Guide" />
                </Toolbar>
            </MarkdownEditor>
            <MudFileUpload T="IBrowserFile" Accept="image/*" OnFilesChanged="@(e => HandleFilesChanged(e))" MaximumFileCount="1" MaxFileSize="2097152" @ref="_fileUpload">
            </MudFileUpload>
        </div>
        <hr />
    </MudItem>
    <MudItem>

        <h3>Result</h3>
        <br />
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem>
        <MudText Typo="Typo.body1">File Uploded Image:</MudText>
        @if (!string.IsNullOrEmpty(UploadedImage))
        {
            <img src="@UploadedImage" alt="Pasted" style="max-width: 300px;" />
        }
        <MudText Typo="Typo.body1">Markdown Value:</MudText>
        @((MarkupString)markdownHtml.ToString())

        <hr />
        <MudText Typo="Typo.body1">Uploaded Image:</MudText>
        @if (!string.IsNullOrEmpty(PastedImage))
        {
            <img src="@PastedImage" alt="Pasted" style="max-width: 300px;" />
        }
    </MudItem>

</MudGrid>


@code {
    MarkdownEditor Markdown1;
    private string? PastedImage;

    string markdownValue = "Test";
    string markdownHtml = string.Empty;

    private ElementReference divRef;
    private DotNetObjectReference<TestComponent>? _objRef;
    private string base64Image = string.Empty;

    protected FileUploadModel fileUploadModel { get; set; } = new();

    protected string UploadImageButtonName { get; set; } = "";

    protected MudFileUpload<IBrowserFile> _fileUpload;

    protected string UploadedImage { get; set; } = string.Empty;

    protected string BlobContainerName { get; set; } = "content-images";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("pasteImageHandler.register", "pasteTarget", _objRef);
        }
    }

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = string.Empty;
        markdownHtml = value;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnImagePasted(string base64)
    {
        try
        {
            base64Image = string.Empty;
            PastedImage = string.Empty;
            fileUploadModel = new FileUploadModel();
            if (string.IsNullOrEmpty(base64))
            {
                Snackbar.Add("No image data found", Severity.Error);
                return;
            }
            base64Image = base64;
            fileUploadModel.Container = "content-images";
            fileUploadModel.File = base64Image;

            var fileUploadResponse = await FileUploadAsync(fileUploadModel);
            if (fileUploadResponse?.IsSuccess == true)
            {
                PastedImage = fileUploadResponse.FileUrl;
                var imageMarkdown = $"\n![image-{fileUploadResponse.FileName}]({fileUploadResponse.FileUrl})";
                markdownValue += imageMarkdown;
                await Markdown1!.SetValueAsync(markdownValue);

                base64Image = string.Empty;
            }
            else
            {
                Snackbar.Add(fileUploadResponse?.Message ?? "Image upload failed", Severity.Error);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnImagePasted");
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    protected async Task<FileUploadResponse> FileUploadAsync(FileUploadModel fileUploadData)
    {
        var response = await fileUploadService.UploadFileAsync(fileUploadData);
        var jsonString = await response.Content.ReadAsStringAsync();
        if (response != null && response.IsSuccessStatusCode)
        {
            var result = JsonSerializer.Deserialize<FileUploadResponse>(jsonString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            return result ?? new();
        }
        else if (response?.StatusCode == HttpStatusCode.BadRequest)
        {
            Snackbar.Add($"Bad Request: {jsonString}", Severity.Error);
        }
        else if (response?.StatusCode == HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("You are unauthorized to perform this action", Severity.Error);
        }
        else if (response?.StatusCode == HttpStatusCode.InternalServerError)
        {
            Snackbar.Add("Internal API Error", Severity.Error);
        }

        return new();
    }



    protected void TriggerCustomImageUpload()
    {
        UploadedImage = string.Empty;
        _fileUpload.OpenFilePickerAsync();
    }

    protected Task OnCustomButtonClicked(MarkdownButtonEventArgs eventArgs)
    {
        Console.WriteLine("OnCustomButtonClicked -> " + eventArgs.Name);
        if (eventArgs.Name is not null)
        {
            if (eventArgs.Name == UploadImageButtonName)
            {
                TriggerCustomImageUpload();
            }

        }
        return Task.CompletedTask;
    }

    protected async Task UploadFile(string base64)
    {
        var fileUploadData = new FileUploadModel
        {
            Container = BlobContainerName,
            File = base64
        };

        var fileUploadResponse = await FileUploadAsync(fileUploadData);
        if (fileUploadResponse?.IsSuccess == true)
        {
            PastedImage = fileUploadResponse.FileUrl;
            var imageMarkdown = $"\n![image-{fileUploadResponse.FileName}]({fileUploadResponse.FileUrl})";
            markdownValue += imageMarkdown;
            await Markdown1!.SetValueAsync(markdownValue);

            base64Image = string.Empty;
        }
    }

    protected async Task HandleFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using var stream = file.OpenReadStream(2 * 1024 * 1024); // 2MB limit
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var base64 = Convert.ToBase64String(memoryStream.ToArray());
                UploadedImage = $"data:{file.ContentType};base64,{base64}";
                if (!string.IsNullOrWhiteSpace(UploadedImage))
                {
                    await UploadFile(UploadedImage);
                }
                _fileUpload?.ResetValidation();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "HandleFilesChanged");
        }
    }
}