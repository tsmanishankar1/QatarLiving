@using MudBlazor
@using QLN.Web.Shared.Components.Classifieds.PromotedItemCards
@using QLN.Web.Shared.Pages.Classifieds.Components.Landing.Components.Skeletons.FeaturedItemSkeleton
@using QLN.Web.Shared.Components.EmptyCard
@using QLN.Web.Shared.Models
@using QLN.Web.Shared.Components.BreadCrumb
@using QLN.Web.Shared.Components.PaginationFooter
@using QLN.Web.Shared.Components.CustomSelect
@implements IDisposable
@inject NavigationManager NavigationManager

<Breadcrumb Items="breadcrumbItems" />
<div class="item-list">
    <div class="item-list-header">
        <div class="item-list-left">
            <h3 class="results-count">@($"Items in Qatar ({Items.Count} results)")</h3>
        </div>

        <div class="sort-section">
            <h3 class="sort-name">Sort by</h3>
            <CustomSelect TItem="string" Options="sortOptions.Select(x => x.Key).ToList()" SelectedItem="selectedSort"
                SelectedItemChanged="value => OnFilterChanged(nameof(selectedSort), value)" Placeholder="Sort by" />
        </div>
    </div>

    @if (Loading)
    {
        <MudGrid GutterSize="16px">
            @for (int i = 0; i < 9; i++)
            {
                <MudItem xs="12" sm="6" md="4">
                    <ItemSkeletonCard />
                </MudItem>
            }
        </MudGrid>
    }
    else if (PagedItems == null || !PagedItems.Any())
    {
        <div class="empty-wrapper">
            <EmptyCard Title="No items found." Subtitle="Try adjusting your filters or search keywords." />
        </div>
    }
    else
    {
        @if (ViewMode == "grid")
        {
            <MudGrid GutterSize="16px" style="padding: 0 40px;">
                @foreach (var item in PagedItems)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <PromotedItemGridCard Item="item" />
                    </MudItem>
                }
            </MudGrid>
        }
        else if (ViewMode == "list")
        {
            <div class="list-view-wrapper">
                <div class="list-view-left">
                    @foreach (var item in PagedItems)
                    {
                        <PromotedItemListCard Item="item" />
                    }
                </div>

                <div class="list-view-right">
                    <img src="/qln-images/classifieds/ad_image.svg" alt="Ad Banner" class="ad-image" />
                </div>
            </div>

        }
        <!-- Pagination -->
        <PaginationFooter TotalItems="@Items.Count" CurrentPage="@currentPage" PageSize="@pageSize"
            OnPageChange="@HandlePageChange" OnPageSizeChange="@HandlePageSizeChange" />

    }



</div>

@code {
    [Parameter] public string ViewMode { get; set; } = "grid";
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public List<PromotedItem> Items { get; set; } = new();
    private IEnumerable<PromotedItem> PagedItems =>
    Items.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private List<QLN.Web.Shared.Components.BreadCrumb.BreadcrumbItem> breadcrumbItems = new();
    private string selectedSort = "default";

    private int currentPage = 1;
    private int pageSize = 12;

    private void HandlePageChange(int newPage)
    {
        currentPage = newPage;
        StateHasChanged();
    }

    private void HandlePageSizeChange(int newSize)
    {
        pageSize = newSize;
        currentPage = 1;
        StateHasChanged();
    }




    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage * pageSize >= Items.Count;
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateBreadcrumb(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateBreadcrumb(e.Location);
        StateHasChanged(); // Force UI to refresh after breadcrumb change
    }
    private void OnFilterChanged(string filterName, string? value)
    {
        if (filterName == nameof(selectedSort))
        {
            selectedSort = value ?? "default";
            currentPage = 1;
            StateHasChanged();
            // Optional: Apply sorting logic here if needed
        }
    }


    private void UpdateBreadcrumb(string uri)
    {
        var lowerUri = uri.ToLower();

        string routeSegment = lowerUri switch
        {
            var x when x.Contains("/classifieds/preloved") => "Preloved",
            var x when x.Contains("/classifieds/collectibles") => "Collectibles",
            _ => "Items"
        };

        string routeUrl = routeSegment.ToLower();

        breadcrumbItems = new()
{
new() { Label = "Classifieds", Url = "/classifieds" },
new() { Label = routeSegment, Url = $"/classifieds/{routeUrl}", IsLast = true }
};
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private List<KeyValuePair<string, string>> sortOptions = new()
{
new("default", "Default"),
new("priceLow", "Price: Low to High"),
new("priceHigh", "Price: High to Low")
};


}

<style>
    .footer-pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        padding: 32px 40px 0;
    }

    .pagination-center {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .empty-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 300px;
        padding: 40px 20px;
    }



    .item-list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        margin-bottom: 1.5rem;
    }

    .item-list-left {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .results-count {
        color: #212529;
        /* Adjust this to match the heading color in your image */
        font-weight: 500;
    }

    .sort-section {
        display: flex;
        align-items: center;
        flex-direction: row;
        gap: 6px;
        max-width: 300px;
    }

    .sort-name {
        font-size: 13px;
        font-weight: 500;
        width: 100%;
        color: #242424;
    }

    .list-view-wrapper {
        display: flex;
        gap: 20px;
        align-items: flex-start;
    }

    .list-view-left {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .list-view-right {
        width: 340px;
        flex-shrink: 0;
        position: sticky;
        top: 16px;
    }

    .ad-image {
        width: 100%;
        height: 384px;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }


    .pagination-container {
        margin-top: 24px;
    }
</style>