@page "/verification-popup"
@inject NavigationManager NavManager
@using MudBlazor
@inject ISnackbar Snackbar
@inject ApiService Api
@using QLN.Blazor.Base.Services
@inject UserState UserState
@using MudBlazor.Components
@rendermode InteractiveServer
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using System.Text.RegularExpressions;




 @if(_showSucess){ 
    <MudPaper Class="pa-6 mx-auto mt-10" 
          Style="max-width: 500px; border-radius: 12px; margin-top: 30px; margin-bottom: 30px; position: relative;">
    <MudStack Spacing="2" AlignItems="AlignItems.Center">
        
         <img src="/images/success.svg" alt="Microsoft" style="width: 57px; height: 57px;" />
        
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2">Verification Successful</MudText>
        
        @if(isEmail){
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-2">
            Your email has been successfully verified.
        </MudText>
        }
        else{
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-2">
            Your phone number has been successfully verified.
        </MudText>
        }

        
        <CustomButton 
            BackgroundColor="#FF7F38"
            TextColor="#FFFFFF"
            Text="Continue"
            OnClick="@Close"
            Class="mt-4" />
    </MudStack>

</MudPaper>
 } 
 else{
<MudPaper Class="pa-6 mx-auto mt-10" 
          Style="max-width: 500px; border-radius: 12px; margin-top: 30px; margin-bottom: 30px; position: relative;">
    
    
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5" Align="Align.Center">Verification Code Sent</MudText>
    @if(isEmail){
        <MudText Typo="Typo.caption" Align="Align.Center">
            We’ve sent a verification code to your email address.
        </MudText>
        }
        else{
        <MudText Typo="Typo.caption" Align="Align.Center">
            We’ve sent a verification code to your phone number.
        </MudText>
    }
        <MudText Typo="Typo.caption" Align="Align.Center">
            Please enter the code below to continue.
        </MudText>

        <MudTextField T="string"
              Label="Verification Code"
              Variant="Variant.Outlined"
              FullWidth="true"
              InputType="InputType.Text"
              MaxLength="6"
              @bind-Value="_code"
              Immediate="true"
              OnInput="ValidateOtp"
              Error="@(!string.IsNullOrEmpty(_otpError))"
              ErrorText="_otpError"
              Required="true" />
 
        <CustomButton 
    BackgroundColor="#FF7F38"
    TextColor="#FFFFFF"
    Text="Verify"
    Disabled="_isLoading"
    Loading="_isLoading"
    OnClick="@VerifyCode"
    Class="mt-4">
</CustomButton>

        <MudText Align="Align.Center" Class="mt-4">
            Didn't receive a code?
            <MudLink Href="/signup" Class="ml-1" Style="color: #FF7F38;">Resend</MudLink>
        </MudText>
        <MudText Align="Align.Center"
                 Class="mud-clickable mt-2"
                 Style="color: #FF7F38; cursor: pointer;" 
                 @onclick="Close">
            Back to Sign Up
        </MudText>
    </MudStack>
</MudPaper>
} 

@code {
    [Parameter]
public bool ShowSuccess { get; set; }
 [Parameter]
public bool isEmail {get; set;} 

[Parameter]
 public bool _showMobileVerificationSuccess { get; set; }

[Parameter]
public string email { get; set; } 

[Parameter]
public EventCallback OnAction { get; set; }

private string? _otpError;

    private string _code = string.Empty;
    private bool _isLoading = false;
    public bool _showSucess = false;
   
    
    [Parameter] public EventCallback OnClose { get; set; }
    
    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
    
    private void NavigateToForgotPassword()
    {
        NavManager.NavigateTo("/login");
    }
    
    private async Task VerifyCode()
    {
        _isLoading = true;
        if (string.IsNullOrWhiteSpace(_code))
        {
             _otpError = "Enter a Verification Code";
            _isLoading = false;
            return;
        }
        if (_code.Length != 6 || !_code.All(char.IsDigit))
        {
            Snackbar.Add("Enter a Valid Verification Code", Severity.Warning);
            _isLoading = false;
            return;
        }
        try
        {   
            if (isEmail)
            {
              var payload = new { email = email, otp = _code };
              Console.WriteLine(payload);
                var response = await Api.PostAsync<object, object>("auth/verify-email-otp", payload);
                Console.WriteLine(response?.Status);
                if (response?.StatusCode == 200)
                {
                    _showSucess = true;
                    ShowSuccess = true;
                     if (OnAction.HasDelegate)
                    {
                        await OnAction.InvokeAsync();
                    }
                }
                else
                {
                    Snackbar.Add(response?.Message, Severity.Warning);
                }
            }
            else
            {

                var body = new { phoneNumber = email, otp = _code };
                Console.WriteLine(body);
                var response = await Api.PostAsync<object, object>("auth/verify-phone-otp", body);
                Console.WriteLine(response?.Status);
                if (response?.StatusCode == 200)
                {
                    _showSucess = true;
                    _showMobileVerificationSuccess = true;
                    if (OnAction.HasDelegate)
                    {
                        await OnAction.InvokeAsync();
                    }
                }
                else
                {
                    Snackbar.Add(response?.Message, Severity.Warning);
                }
                
            }
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Verification failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    private void ValidateOtp(ChangeEventArgs e)
{
    _code = e.Value?.ToString() ?? string.Empty;

    if (!Regex.IsMatch(_code, @"^\d{6}$"))
    {
        _otpError = "OTP must be exactly 6 digits.";
    }
    else
    {
        _otpError = null;
    }
}

    


}

<style>
    .otp-box input {
        text-align: center;
        font-size: 24px;
        padding: 12px;
        border-radius: 8px;
    }
</style>