@using QLN.Common.Infrastructure.DTO_s
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="swiper takeouverbanner-swiper" id="@_swiperId">
    <div class="swiper-wrapper">
        @if (BannerItems?.Count == 1)
        {
            @for (int i = 0; i < 2; i++)
            {
                <div class="swiper-slide">
                    <a href="@BannerItems[0].Link" target="_blank" rel="noopener noreferrer">
                        <img id="banner-img-0-@i" class="take-over-banner-image" src="@BannerItems[0].ImageDesktop"
                            data-mobile="@BannerItems[0].ImageMobile" data-desktop="@BannerItems[0].ImageDesktop"
                            alt="Banner" />
                    </a>
                </div>
            }
        }
        else if (BannerItems?.Count > 1)
        {
            int index = 0;
            @foreach (var banner in BannerItems)
            {
                <div class="swiper-slide">
                    <a href="@banner.Link" target="_blank" rel="noopener noreferrer">
                        <img id="banner-img-@index" class="take-over-banner-image" src="@banner.ImageDesktop"
                            data-mobile="@banner.ImageMobile" data-desktop="@banner.ImageDesktop" alt="Banner" />
                    </a>
                </div>
                index++;
            }
        }
    </div>

    <div class="swiper-pagination"></div>
</div>

<style>
    .takeouverbanner-swiper {
        width: 100%;
    }

    .take-over-banner-image {
        width: 100%;
        border-radius: 3px;
        display: block;
    }

    @@media (max-width: 768px) {
        .take-over-banner-image {
            height: 150px;
            object-fit: cover;
        }
    }

    @@media (min-width: 769px) {
        .take-over-banner-image {
            height: 150px;
            object-fit: cover;
        }
    }
</style>

@code {
    [Parameter] public List<BannerItem> BannerItems { get; set; } = [];

    private string _swiperId = $"swiper-{Guid.NewGuid().ToString("N")}";
    [Parameter] public bool Loading { get; set; } = false;

    private bool _bannerInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_bannerInitialized && !Loading && BannerItems?.Any() == true)
        {
            _bannerInitialized = true;

            // Initialize Swiper
            await JS.InvokeVoidAsync("initTakeOverBannerSwiper", _swiperId);


            // Update banner images based on screen size
            await JS.InvokeVoidAsync("updateBannerImagesForScreen");
        }
    }
}
