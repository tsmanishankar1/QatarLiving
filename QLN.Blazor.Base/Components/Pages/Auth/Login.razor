@page "/login"
@inject ApiService Api
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject UserState UserState
@using QLN.Blazor.Base.Services
@using MudBlazor
@using QLN.Blazor.Base.Models
@using QLN.Web.Shared.Components.CustomButton
@using QLN.Web.Shared.Components.ModalDialog

@if (loginSucesss){
    <div class="popup-overlay">
       <ModalDialog
        Title="Verification Successful" 
        Description="Your email has been successfully verified."
        ButtonName="Continue"
        StatusType="Success"
        OnClick="CloseVerificationPopup" />
    </div> 
}
<div style="width: 100%; background-color: #F5F6FA; padding: 32px 16px;">
    <div style="max-width: 400px; margin: 0 auto;">
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Log in to your account</MudText>
    <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
    <MudText Typo="Typo.body1" Align="Align.Center">
        Welcome back! Please enter your details.
    </MudText>
    </MudStack>
     <MudText Typo="Typo.body1"  Style="font-weight: 400;">
        Email or Phone Number
        </MudText>
    <MudTextField T="string"
    Label="Email or Username"
    Variant="Variant.Outlined"
    FullWidth="true"
    InputType="InputType.Text"
    Style="background-color: #FFFFFF;"
    @bind-Value="_username"
    Required="true"
    Error="@(!string.IsNullOrEmpty(_usernameError))"
    ErrorText="@_usernameError" />

        <MudText Typo="Typo.body1"  Style="font-weight: 400;">
        Password
        </MudText>
       <MudTextField T="string"
    Label="Password"
    Variant="Variant.Outlined"
    InputType="@(_showPassword ? InputType.Text : InputType.Password)"
    FullWidth="true"
    Class="mt-4"
    @bind-Value="_password"
    Style="background-color: #FFFFFF;"
    Required="true"
    Adornment="Adornment.End"
    AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
    OnAdornmentClick="TogglePasswordVisibility"
    AdornmentColor="Color.Default"
    Error="@(!string.IsNullOrEmpty(_passwordError))"
    ErrorText="@_passwordError" />


    <div style="display: flex; justify-content: space-between; align-items: center; margin: 8px 0;">
    <MudCheckBox T="bool" Label="Remember me" DisableMargins="true" />

    <MudLink Href="/forgot-password" Style="color: #FF7F38; text-decoration: none;">
        Forgot Password?
    </MudLink>
</div>
   
<CustomButton 
    BackgroundColor= "var(--color-secondary)"
    TextColor="#FFFFFF"
    Text="Sign In"
    Disabled="_isLoading"
    Loading="_isLoading"
    OnClick="@PerformLogin"
    Class="mt-4" />


     <div class="d-flex align-center my-4">
        <div style="flex-grow: 1; height: 1px; background-color: #ccc;"></div>
        <MudText Typo="Typo.caption" Class="mx-2">Or continue with</MudText>
        <div style="flex-grow: 1; height: 1px; background-color: #ccc;"></div>
    </div>

    <MudGrid Justify="Justify.SpaceEvenly" GutterSize="12px" Class="mt-4">
    <MudItem xs="2">
        <MudButton Variant="Variant.Outlined" Style="background-color: #FFFFFF; border-color: #DDDDDD; height: 44px; width: 78px; border-radius: 8px; min-width: 50px; padding: 0;">
            <img src="images/google.svg" alt="Google" style="height: 24px;" />
        </MudButton>
    </MudItem>
    <MudItem xs="2">
        <MudButton Variant="Variant.Outlined" Style="background-color: #FFFFFF; border-color: #DDDDDD; height: 44px; width: 78px; min-width: 50px; padding: 0; border-radius: 8px;">
            <img src="images/microsoft.svg" alt="Microsoft" style="height: 24px;" />
        </MudButton>
    </MudItem>
    <MudItem xs="2">
        <MudButton Variant="Variant.Outlined" Style="background-color: #FFFFFF; border-color: #DDDDDD; height: 44px; width: 78px; min-width: 50px; padding: 0; border-radius: 8px;">
            <img src="images/facebook.svg" alt="Facebook" style="height: 24px;" />
        </MudButton>
    </MudItem>
    </MudGrid>
    <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
    <MudText Align="Align.Start" Class="mt-4">
        Don't have an account? 
        <MudLink Href="/signup" Class="ml-1" Style="color: #FF7F38;">Sign Up</MudLink>
    </MudText>
    </MudStack>
    </div>
</div>

@code {
    private string _username = string.Empty;
    private string _password = string.Empty;
    private bool _isLoading = false;
    private bool _showPassword = false;
    private ModalData modalData = new();
    private bool loginSucesss = false;


    // New validation messages
    private string _usernameError = string.Empty;
    private string _passwordError = string.Empty;

    private void CloseVerificationPopup()
{
    loginSucesss = false;
}

    private async Task PerformLogin()
    {
        // Clear previous errors
        _usernameError = string.Empty;
        _passwordError = string.Empty;

        bool hasError = false;

        // Validate username/email
        if (string.IsNullOrWhiteSpace(_username))
        {
            _usernameError = "Please enter your email or phone number.";
            hasError = true;
        }
        else if (!IsValidEmail(_username) && !IsPhoneNumber(_username))
        {
            _usernameError = "Please enter a valid email or phone number.";
            hasError = true;
        }

        // Validate password
        if (string.IsNullOrWhiteSpace(_password))
        {
            _passwordError = "Please enter your password.";
            hasError = true;
        }

        if (hasError)
        {
            StateHasChanged(); 
            return;
        }

        _isLoading = true;
        var payload = new { usernameOrEmailOrPhone = _username, password = _password };

        try
        {
            Console.WriteLine($"Payload: {payload}");
            var result = await Api.PostAsync<object, ResponseModel<LoginResponseData>>("auth/login", payload);

            if (result?.Status == true)
            {
                UserState.Email = result.Data.Emailaddress;
                UserState.mobileNumber = result.Data.Mobilenumber;
                modalData = ErrorHandler.HandleApiError(result);
                StateHasChanged();
                
                if (result.Data.IsTwoFactorEnabled)
                {
                    Snackbar.Add($"Logged in as {result.Data.Emailaddress}", Severity.Success);
                    NavManager.NavigateTo("/select-verification");
                    return;
                }
                else
                {
                    Snackbar.Add($"Logged in as {result.Data.Emailaddress}", Severity.Success);
                    NavManager.NavigateTo("/");
                }
            }
            else
            {
                Snackbar.Add("Login failed. Please check credentials.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error: " + ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    // Helper: Basic email validation
    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    // Helper: Basic phone number check
    private bool IsPhoneNumber(string input)
    {
        return input.All(char.IsDigit) && input.Length >= 8 && input.Length <= 15;
    }

    public class LoginResponseData
    {
        public string Username { get; set; }
        public string Mobilenumber { get; set; }
        public string Emailaddress { get; set; }
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
        public bool IsTwoFactorEnabled { get; set; }
    }

    private class LoginResult
    {
        public bool Success { get; set; }
        public MessageContent Message { get; set; }
    }

    private class MessageContent
    {
        public string JwtToken { get; set; }
        public string RefreshToken { get; set; }
    }
}

<style>
    .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; 
}
</style>
